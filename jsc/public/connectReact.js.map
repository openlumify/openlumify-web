{"version":3,"sources":["../../js/public/connectReact.jsx"],"names":["define","createReactClass","PropTypes","API_VERSIONS","loadApiPromise","loadApiVersions","defaultMapApiToProps","apiVersions","defaultVersion","Connect","mapApi","Component","getInitialState","connected","api","componentWillMount","then","setState","displayName","getDisplayName","render","state","props","connectReact","mapApiToProps","_","partial","Promise","map","version","require","connect","asyncApi","baseApi","omit","extend","apis","object","name"],"mappings":"gOAsBAA,OAAO,CACH,oBADG,CACmB,YADnB,CAAP,CAEG,SAASC,gBAAT,CAA2BC,SAA3B,CAAsC,CACrC,aAEA,GAAMC,cAAe,CAAC,IAAD,CAArB,CACA,GAAMC,gBAAiBC,iBAAvB,CAcA,GAAMC,sBAAuB,QAAvBA,qBAAuB,CAACC,WAAD,CAAiB,CAC1C,GAAIC,gBAAiBL,aAAa,CAAb,CAArB,CACA,MAAOI,aAAYC,cAAZ,CAAP,CACH,CAHD,CAIA,GAAMC,SAAU,QAAVA,QAAU,CAACC,MAAD,CAASC,SAAT,QAAuBV,kBAAiB,CACpDW,eADoD,2BAClC,CACd,MAAO,CACHC,UAAW,KADR,CAEHC,IAAK,IAFF,CAAP,CAIH,CANmD,CAQpDC,kBARoD,8BAQ/B,gBACjBX,eACKY,IADL,CACU,SAACT,WAAD,CAAiB,CACnB,MAAKU,QAAL,CAAc,CACVJ,UAAW,IADD,CAEVC,IAAKP,WAFK,CAAd,EAIH,CANL,EAOH,CAhBmD,CAkBpDW,YAAa,WAAaC,eAAeR,SAAf,CAAb,CAAyC,GAlBF,CAoBpDS,MApBoD,kBAoB3C,YACsB,KAAKC,KAD3B,CACGR,SADH,QACGA,SADH,CACcC,GADd,QACcA,GADd,CAGL,MAAOD,WAAY,oBAAC,SAAD,aAAe,KAAKS,KAApB,CAA+BZ,OAAOI,GAAP,CAA/B,EAAZ,CAA6D,IAApE,CACH,CAxBmD,CAAjB,CAAvB,EAAhB,CAyCA,QAASS,aAAT,CAAsBC,aAAtB,CAAqC,CACjC,GAAId,QAASc,cAAgBA,aAAhB,CAAgClB,oBAA7C,CAEA,MAAOmB,GAAEC,OAAF,CAAUjB,OAAV,CAAmBC,MAAnB,CAAP,CACH,CAED,MAAOa,aAAP,CAEA,QAASlB,gBAAT,EAA2B,CACvB,MAAOsB,SAAQC,GAAR,CAAYzB,YAAZ,CAA0B,SAAC0B,OAAD,CAAa,CACtC,MAAOF,SAAQG,OAAR,CAAgB,UAAYD,OAAZ,CAAsB,MAAtC,EACFb,IADE,CACG,SAACF,GAAD,CAAS,CACX,MAAOA,KAAIiB,OAAJ,GACFf,IADE,CACG,SAACgB,QAAD,CAAc,CAChB,GAAIC,SAAUR,EAAES,IAAF,CAAOpB,GAAP,CAAY,SAAZ,CAAd,CACA,MAAO,CAACe,OAAD,CAAUJ,EAAEU,MAAF,CAASF,OAAT,CAAkBD,QAAlB,CAAV,CAAP,CACH,CAJE,CAAP,CAKH,CAPE,CAAP,CAQH,CATE,EAUFhB,IAVE,CAUG,SAACoB,IAAD,CAAU,CACZ,MAAOX,GAAEY,MAAF,CAASD,IAAT,CAAP,CACH,CAZE,CAAP,CAaH,CAED,QAASjB,eAAT,CAAwBR,SAAxB,CAAmC,CAC/B,MAAOA,WAAUO,WAAV,EAAyBP,UAAU2B,IAAnC,EAA2C,WAAlD,CACH,CAEJ,CA7FD","file":"connectReact.js","sourcesContent":["/**\n * This module returns a function that creates a higher-order\n * component that calls `connect` on the {@link module:public/v1/api}\n * and will defer rendering of the component until the promise resolves.\n * In which case the props will contain the\n * {@link module:public/v1/api.connected|connected} components.\n *\n * @module public/connectReact\n * @react Higher-order Component that automatically resolves the `connect`\n * promise from the public API\n * @example\n * define(['create-react-class', 'prop-types', 'public/v1/api'], function(createReactClass, PropTypes, api) {\n *     const MyComponent = createReactClass({\n *         render() {\n *             const { formatters, dataRequest, components } = this.props;\n *             // ...\n *         }\n *     })\n *     const MyConnectedComponent = api.connectReact()(MyComponent)\n *     return MyConnectedComponent\n * })\n */\ndefine([\n    'create-react-class', 'prop-types'\n], function(createReactClass, PropTypes) {\n    'use strict';\n\n    const API_VERSIONS = ['v1'];\n    const loadApiPromise = loadApiVersions();\n\n    /**\n     * Maps from the available Apis to what the component gets as props.\n     *\n     * @callback module:public/connectReact~mapApiToProps\n     * @param {object} availableApis\n     * @param {object} availableApis.v1\n     * @returns {object} Api requested\n     * @example\n     * function(apiVersions) {\n     *  return apiVersions['v1']\n     * }\n     */\n    const defaultMapApiToProps = (apiVersions) => {\n        var defaultVersion = API_VERSIONS[0];\n        return apiVersions[defaultVersion];\n    };\n    const Connect = (mapApi, Component) => createReactClass({\n        getInitialState() {\n            return {\n                connected: false,\n                api: null\n            };\n        },\n\n        componentWillMount() {\n            loadApiPromise\n                .then((apiVersions) => {\n                    this.setState({\n                        connected: true,\n                        api: apiVersions\n                    });\n                });\n        },\n\n        displayName: 'Connect(' + getDisplayName(Component) + ')',\n\n        render() {\n            const { connected, api } = this.state;\n\n            return connected ? <Component {...this.props} {...mapApi(api)} /> : null;\n        }\n    });\n\n    /**\n     *\n     * @memberof module:public/connectReact\n     * @see module:public/v1/api.connected\n     * @param {module:public/connectReact~mapApiToProps} [mapApiToProps] Passes the latest API to\n     * component by default\n     * @returns {function} Connect HOC function\n     * @example\n     * const MyConnectedComponent = api.connectReact()(MyComponent)\n     * @example <caption>Custom mapApiToProps</caption>\n     * const MyConnectedComponent = api.connectReact(apis => {\n     *     return apis['v1']\n     * })(MyComponent)\n     */\n    function connectReact(mapApiToProps) {\n        var mapApi = mapApiToProps ? mapApiToProps : defaultMapApiToProps;\n\n        return _.partial(Connect, mapApi);\n    }\n\n    return connectReact;\n\n    function loadApiVersions() {\n        return Promise.map(API_VERSIONS, (version) => {\n                return Promise.require('public/' + version + '/api')\n                    .then((api) => {\n                        return api.connect()\n                            .then((asyncApi) => {\n                                var baseApi = _.omit(api, 'connect');\n                                return [version, _.extend(baseApi, asyncApi)];\n                            });\n                    });\n            })\n            .then((apis) => {\n                return _.object(apis);\n            })\n    }\n\n    function getDisplayName(Component) {\n        return Component.displayName || Component.name || 'Component';\n    }\n\n});\n"]}
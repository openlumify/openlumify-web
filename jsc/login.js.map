{"version":3,"sources":["../js/login.js"],"names":["define","defineComponent","template","registry","withDataRequest","alertTemplate","configProperties","LoginMessageKey","ExpireLoginErrorMessageMillis","LoginComponent","Login","setErrorMessage","errorMessage","sessionStorage","setItem","JSON","stringify","date","Date","now","removeItem","e","console","warn","defaultAttrs","authenticationSelector","before","$node","remove","after","documentExtensionPoint","_","isString","componentPath","html","showPoweredBy","self","authPlugins","extensionsForPoint","authNode","select","error","on","event","data","message","length","require","AuthenticationPlugin","attr","messageJson","getItem","parse","isNumber","attachTo"],"mappings":"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","file":"login.js","sourcesContent":["\ndefine([\n    'flight/lib/component',\n    'loginTpl.hbs',\n    'configuration/plugins/registry',\n    'util/withDataRequest',\n    'tpl!util/alert',\n    'util/requirejs/promise!util/service/propertiesPromise'\n], function(\n    defineComponent,\n    template,\n    registry,\n    withDataRequest,\n    alertTemplate,\n    configProperties) {\n    'use strict';\n\n    const LoginMessageKey = 'loginErrorMessage';\n    const ExpireLoginErrorMessageMillis = 60 * 1000;\n\n    const LoginComponent = defineComponent(Login, withDataRequest);\n\n    LoginComponent.setErrorMessage = function(errorMessage) {\n        try {\n            if (errorMessage) {\n                sessionStorage.setItem(LoginMessageKey, JSON.stringify({\n                    errorMessage,\n                    date: Date.now()\n                }));\n            } else {\n                sessionStorage.removeItem(LoginMessageKey);\n            }\n        } catch(e) {\n            console.warn('Unable to write to sessionStorage, can\\'t set error message', e);\n        }\n    }\n\n    return LoginComponent;\n\n    function Login() {\n\n        this.defaultAttrs({\n            authenticationSelector: '.authentication'\n        });\n\n        this.before('teardown', function() {\n            this.$node.remove();\n        });\n\n        this.after('initialize', function() {\n\n            /**\n             * Provide custom authentication interface to login users.\n             *\n             * _OpenLumify will display an error if:_\n             *\n             * * No authentication plugins are registered\n             * * More than one plugins are registered\n             *\n             * @param {string} componentPath {@link org.openlumify.authentication~Component|Component} that renders the interface to login users\n             */\n            registry.documentExtensionPoint('org.openlumify.authentication',\n                'Provides interface for authentication',\n                function(e) {\n                    return _.isString(e.componentPath);\n                },\n                'http://docs.openlumify.org/extension-points/front-end/authentication'\n            );\n\n            this.$node.html(template({ showPoweredBy: configProperties['login.showPoweredBy'] === 'true' }));\n            var self = this,\n                authPlugins = registry.extensionsForPoint('org.openlumify.authentication'),\n                authNode = this.select('authenticationSelector'),\n                error = '',\n                componentPath = '';\n\n            this.on('showErrorMessage', function(event, data) {\n                authNode.html(alertTemplate({ error: data.message }));\n            })\n\n            if (authPlugins.length === 0) {\n                error = 'No authentication extension registered.';\n            } else if (authPlugins.length > 1) {\n                error = 'Multiple authentication extensions registered. (See console for more info)';\n                console.error('Authentication plugins:', authPlugins);\n            } else {\n                componentPath = authPlugins[0].componentPath;\n            }\n\n            if (error) {\n                authNode.html(alertTemplate({ error: error }));\n            } else if (componentPath) {\n                require([componentPath], function(AuthenticationPlugin) {\n\n                    let errorMessage = self.attr.errorMessage;\n                    const messageJson = sessionStorage.getItem(LoginMessageKey);\n\n                    if (!errorMessage) {\n                        const message = messageJson && JSON.parse(messageJson);\n                        // Ignore messages from too far back\n                        if (message &&\n                            _.isString(message.errorMessage) &&\n                            _.isNumber(message.date) &&\n                            (Date.now() - message.date) < ExpireLoginErrorMessageMillis) {\n                            errorMessage = message.errorMessage;\n                        }\n                    }\n                    if (messageJson) {\n                        LoginComponent.setErrorMessage(null);\n                    }\n\n                    /**\n                     * Custom authentication interface. Trigger `loginSucess`\n                     * upon successful login.\n                     *\n                     * Display `errorMessage` property somewhere in interface\n                     * if it is non-empty.\n                     *\n                     * @typedef org.openlumify.authentication~Component\n                     * @property {string} [errorMessage=''] Error Message to display\n                     * @fires org.openlumify.authentication#loginSuccess\n                     */\n                    AuthenticationPlugin.attachTo(authNode, {\n                        errorMessage\n                    });\n\n                    /**\n                     * Notify OpenLumify that user is valid and application should\n                     * start.\n                     *\n                     * Will fail if `/user/me` actually returns `403` errors\n                     *\n                     * @event org.openlumify.authentication#loginSuccess\n                     * @example\n                     * this.trigger('loginSuccess')\n                     */\n                });\n            }\n        });\n\n    }\n\n});\n"]}
{"version":3,"sources":["../../../js/configuration/plugins/registry.js"],"names":["define","_","u","reselect","tmpPrev","extensionsNoMutate","extensionDocumentation","uuidToExtensionPoint","legacyMappingToNew","uuidGen","alreadyWarnedAboutDocsByExtensionPoint","alreadyWarnedAboutLegacyByExtensionPoint","getOrCreateSelector","selectorsByPoint","_extensions","state","extensions","_documentation","documentation","extensionPoint","createSelector","registered","values","validityChecked","partition","validator","length","console","warn","toString","shouldWarnAboutMissingDocs","getExtensions","getExtensionSubset","cache","_points","extensionPoints","key","sort","join","subset","object","map","p","all","list","point","verifyArguments","extension","isString","Error","triggerChange","$","document","trigger","shouldWarn","partial","shouldWarnAboutLegacyUse","moveExistingLegacyExtensions","old","extensionsMutate","config","uuid","constant","api","debug","log","clear","canonicalName","canonical","registerExtension","apply","arguments","unregisterAllExtensions","uuids","keys","omit","unregisterExtension","extensionUuid","markUndocumentedExtensionPoint","undocumented","documentExtensionPoint","description","options","isFunction","externalDocumentationUrl","legacyName","url","extensionPointDocumentation","mapObject","doc","extensionsForPoint","replaceFunctions","value","isArray","isObject","extensionsForPoints","points"],"mappings":"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","file":"registry.js","sourcesContent":["/**\n * View all available extensions and registrations in the _Admin_ panel inside\n * OpenLumify under _UI Extensions_.  Documentation with examples is available at {@link http://docs.openlumify.org/extension-points/front-end docs.openlumify.org}.\n *\n * @module registry\n * @classdesc Registry for adding and removing extensions given documented extension points\n */\ndefine(['underscore', 'updeep', 'reselect'], function(_, u, reselect) {\n\n    var tmpPrev = {};\n\n    var extensionsNoMutate = {},\n        extensionDocumentation = {},\n        uuidToExtensionPoint = {},\n        legacyMappingToNew = {},\n        uuidGen = 0;\n\n    const alreadyWarnedAboutDocsByExtensionPoint = {},\n        alreadyWarnedAboutLegacyByExtensionPoint = {},\n        getOrCreateSelector = (function() {\n            const selectorsByPoint = {};\n            const _extensions = state => state.extensions;\n            const _documentation = state => state.documentation;\n            return extensionPoint => {\n                if (!(extensionPoint in selectorsByPoint)) {\n                    // Selector per extension point because selectors have cache size of 1\n                    selectorsByPoint[extensionPoint] = reselect.createSelector([_extensions, _documentation], (extensions, documentation) => {\n                        if (extensions) {\n                            const registered = _.values(extensions);\n                            if (documentation) {\n                                const validityChecked = _.partition(registered, documentation.validator);\n                                if (validityChecked[1].length) {\n                                    console.warn(\n                                        'Extensions invalid',\n                                        validityChecked[1],\n                                        'according to validator',\n                                        documentation.validator.toString()\n                                    );\n                                }\n                                return validityChecked[0];\n                            } else {\n                                if (shouldWarnAboutMissingDocs(extensionPoint)) {\n                                    console.warn('Consider adding documentation for ' +\n                                        extensionPoint +\n                                        '\\n\\tUsage: registry.documentExtensionPoint(\\'' + extensionPoint + '\\', desc, validator)'\n                                    );\n                                }\n\n                                return registered;\n                            }\n                        }\n                        return [];\n                    })\n                }\n                return selectorsByPoint[extensionPoint];\n            };\n        })(),\n        getExtensions = (function() {\n            return (extensionPoint) => {\n                return getOrCreateSelector(extensionPoint)({\n                    extensions: extensionsNoMutate[extensionPoint],\n                    documentation: extensionDocumentation[extensionPoint]\n                })\n            };\n        })(),\n        getExtensionSubset = (function() {\n            const cache = {};\n            const _extensions = state => state.extensionsNoMutate;\n            const _points = state => state.extensionPoints;\n\n            return extensionPoints => {\n                const key = extensionPoints.sort().join(',')\n                const subset = _.object(extensionPoints.map(p => [p, getExtensions(p)]))\n                if (cache[key] && _.all(subset, (list, point) => list === cache[key][point])) {\n                    return cache[key];\n                }\n\n                cache[key] = subset;\n                return subset;\n            };\n        })(),\n        verifyArguments = function(extensionPoint, extension) {\n            if (!_.isString(extensionPoint) && extensionPoint) {\n                throw new Error('extensionPoint must be string');\n            }\n            if (!extension) {\n                throw new Error('extension must be provided');\n            }\n        },\n        triggerChange = function(extensionPoint) {\n            if (typeof $ !== 'undefined' && typeof document !== 'undefined') {\n                $(document).trigger('extensionsChanged', {\n                    extensionPoint: extensionPoint\n                })\n            }\n        },\n        shouldWarn = function(map, extensionPoint) {\n            if (extensionPoint in map) {\n                return;\n            }\n            map[extensionPoint] = true;\n            return true;\n        },\n        shouldWarnAboutMissingDocs = _.partial(shouldWarn, alreadyWarnedAboutDocsByExtensionPoint),\n        shouldWarnAboutLegacyUse = _.partial(shouldWarn, alreadyWarnedAboutLegacyByExtensionPoint),\n        moveExistingLegacyExtensions = function(old, extensionPoint) {\n            if (extensionsNoMutate[old]) {\n                extensionsMutate({\n                    [extensionPoint]: _.object(\n                        _.map(extensionsNoMutate[old], (config, uuid) => {\n                            return [uuid, u.constant(config)]\n                        })\n                    )\n                })\n            }\n        },\n        extensionsMutate = function(config) {\n            extensionsNoMutate = u(config, extensionsNoMutate)\n        },\n\n        /**\n         * @alias module:registry\n         */\n        api = {\n            debug: function() {\n                console.log(extensionsNoMutate);\n            },\n            clear: function() {\n                extensionsNoMutate = {};\n                extensionDocumentation = {};\n                legacyMappingToNew = {};\n                uuidToExtensionPoint = {};\n                uuidGen = 0;\n            },\n\n            /**\n             * Get the canonical name for an extension point.\n             * Some extension points have been renamed, so we translate to\n             * the current.\n             *\n             * @param {String} point The extension point to transform\n             * @returns {String} The canonical name\n             */\n            canonicalName: function(point) {\n                if (!point) return;\n                if (point in legacyMappingToNew) {\n                    var canonical = legacyMappingToNew[point];\n                    if (shouldWarnAboutLegacyUse(point)) {\n                        console.warn(`This extension point has been renamed from ${point} to ${canonical},\nThe extension will continue to work, but the old name will be removed in future releases`)\n                    }\n                    return canonical;\n                }\n\n                return point;\n            },\n\n            /**\n             * Register new functionality at the given `extensionPoint`. View the {@link http://docs.openlumify.org/extension-points/front-end docs} for available extension points, or in OpenLumify, open the Admin panel, then UI Extensions.\n             *\n             * @param {String} extensionPoint string that designates the\n             * extension to extend.\n             * @param {Object} extension configuration object based on the\n             * extension requirements.\n             * @returns {String} extensionUuid used to {@link module:configuration/plugins/registry.unregisterExtension unregister an extension}\n             * @example\n             * registry.registerExtension('org.openlumify.menubar', {\n             *     title: 'New'\n             *     identifier: 'org-openlumify-example-new',\n             *     action: {\n             *         type: 'full',\n             *         componentPath: 'example-new-page'\n             *     },\n             *     icon: '../img/new.png'\n             * });\n             */\n            registerExtension: function(point, extension) {\n                const extensionPoint = api.canonicalName(point);\n                verifyArguments.apply(null, arguments);\n\n                const uuid = [extensionPoint, uuidGen++].join('-');\n\n                extensionsMutate({ [extensionPoint]: { [uuid]: u.constant(extension) } })\n                uuidToExtensionPoint[uuid] = extensionPoint;\n                triggerChange(extensionPoint);\n\n                return uuid;\n            },\n            unregisterAllExtensions: function(point) {\n                const extensionPoint = api.canonicalName(point);\n                if (!extensionPoint) {\n                    throw new Error('extension point required to unregister')\n                }\n\n                var uuids = _.keys(extensionsNoMutate[extensionPoint])\n                uuidToExtensionPoint = _.omit(uuidToExtensionPoint, uuids)\n                extensionsMutate(u.omit(extensionPoint));\n                delete extensionDocumentation[extensionPoint]\n            },\n\n            /**\n             * Remove a given extension using the value returned from {@link module:configuration/plugins/registry.registerExtension registerExtension}\n             * @param {String} extensionUuid The extension registration to remove\n             */\n            unregisterExtension: function(extensionUuid) {\n                if (!extensionUuid) {\n                    throw new Error('extension uuid required to unregister')\n                }\n\n                var extensionPoint = api.canonicalName(uuidToExtensionPoint[extensionUuid]);\n                if (!extensionPoint) {\n                    throw new Error('extension uuid not found in registry')\n                }\n\n                extensionsMutate({ [extensionPoint]: u.omit(extensionUuid) });\n\n                triggerChange(extensionPoint);\n            },\n            markUndocumentedExtensionPoint: function(point) {\n                const extensionPoint = api.canonicalName(point);\n                extensionDocumentation[extensionPoint] = {\n                    undocumented: true\n                }\n            },\n\n            /**\n             * Adds information in the Admin Panel -> UI Extensions list about this extension point.\n             *\n             * @param {String} extensionPoint The extension point to document\n             * @param {String} description About this extension point / what it does\n             * @param {function} validator Gets any registered extensions and returns if it's valid\n             * @param {String|Object} [options] External URL to documentation if string, or options\n             * @param {String} [url] External documentation url\n             * @param {String} [legacyName] Previous extension point name to include with this. Will warn when used\n             */\n            documentExtensionPoint: function(point, description, validator, options) {\n                const extensionPoint = api.canonicalName(point);\n                if (!description) {\n                    throw new Error('Description required for documentation')\n                }\n\n                if (!_.isFunction(validator)) {\n                    throw new Error('Validator required for documentation')\n                }\n\n                var externalDocumentationUrl = _.isString(options) ? options : null;\n\n                if (options) {\n                    if (options.legacyName) {\n                        legacyMappingToNew[options.legacyName] = extensionPoint\n                        moveExistingLegacyExtensions(options.legacyName, extensionPoint)\n                    }\n                    if (options.url) {\n                        externalDocumentationUrl = options.url;\n                    }\n                }\n\n                extensionDocumentation[extensionPoint] = {\n                    description: description,\n                    validator: validator,\n                    externalDocumentationUrl: externalDocumentationUrl\n                };\n            },\n\n            extensionPointDocumentation: function() {\n                return _.omit(_.mapObject(extensionDocumentation, function(doc, point) {\n                    if (doc.undocumented) return;\n                    return {\n                        extensionPoint: point,\n                        description: doc.description,\n                        validator: doc.validator.toString(),\n                        externalDocumentationUrl: doc.externalDocumentationUrl,\n                        registered: api.extensionsForPoint(point).map(replaceFunctions)\n                    };\n                }), function(value) {\n                    return !value;\n                });\n\n                function replaceFunctions(object) {\n                    if (_.isFunction(object)) {\n                        return 'FUNCTION' + object.toString()\n                    } else if (_.isArray(object)) {\n                        return _.map(object, replaceFunctions);\n                    } else if (_.isObject(object)) {\n                        return _.mapObject(object, replaceFunctions);\n                    }\n                    return object;\n                }\n            },\n\n            /**\n             * Get all the currently registered extensions for a given `extensionPoint`.\n             *\n             * @param {String} extensionPoint The extension point to get extensions\n             * @returns {Array.<Object>} List of all registered (and valid if validator exists) extension configuration values\n             */\n            extensionsForPoint: function(point) {\n                if (!_.isString(point)) throw new Error('Must specify a string')\n                const extensionPoint = api.canonicalName(point);\n                return getExtensions(extensionPoint);\n            },\n\n            /**\n             * Get a subset of the currently registered extensions for given `extensionPoints`.\n             *\n             * @param {Array.<String>} extensionPoints The extension points to get\n             * @returns {Object} Object with point strings as keys and list of extensions as values (only valid extensions returned)\n             */\n            extensionsForPoints: function(points) {\n                if (!_.isArray(points) || points.length === 0) throw new Error('Must specify an array')\n                const extensionPoints = points.map(api.canonicalName);\n                return getExtensionSubset(extensionPoints)\n            }\n        };\n\n    return api;\n})\n"]}
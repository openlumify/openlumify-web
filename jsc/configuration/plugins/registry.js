function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}define(['underscore','updeep','reselect'],function(_,u,reselect){var tmpPrev={};var extensionsNoMutate={},extensionDocumentation={},uuidToExtensionPoint={},legacyMappingToNew={},uuidGen=0;var alreadyWarnedAboutDocsByExtensionPoint={},alreadyWarnedAboutLegacyByExtensionPoint={},getOrCreateSelector=function(){var selectorsByPoint={};var _extensions=function _extensions(state){return state.extensions;};var _documentation=function _documentation(state){return state.documentation;};return function(extensionPoint){if(!(extensionPoint in selectorsByPoint)){selectorsByPoint[extensionPoint]=reselect.createSelector([_extensions,_documentation],function(extensions,documentation){if(extensions){var registered=_.values(extensions);if(documentation){var validityChecked=_.partition(registered,documentation.validator);if(validityChecked[1].length){console.warn('Extensions invalid',validityChecked[1],'according to validator',documentation.validator.toString());}return validityChecked[0];}else{if(shouldWarnAboutMissingDocs(extensionPoint)){console.warn('Consider adding documentation for '+extensionPoint+'\n\tUsage: registry.documentExtensionPoint(\''+extensionPoint+'\', desc, validator)');}return registered;}}return[];});}return selectorsByPoint[extensionPoint];};}(),getExtensions=function(){return function(extensionPoint){return getOrCreateSelector(extensionPoint)({extensions:extensionsNoMutate[extensionPoint],documentation:extensionDocumentation[extensionPoint]});};}(),getExtensionSubset=function(){var cache={};var _extensions=function _extensions(state){return state.extensionsNoMutate;};var _points=function _points(state){return state.extensionPoints;};return function(extensionPoints){var key=extensionPoints.sort().join(',');var subset=_.object(extensionPoints.map(function(p){return[p,getExtensions(p)];}));if(cache[key]&&_.all(subset,function(list,point){return list===cache[key][point];})){return cache[key];}cache[key]=subset;return subset;};}(),verifyArguments=function verifyArguments(extensionPoint,extension){if(!_.isString(extensionPoint)&&extensionPoint){throw new Error('extensionPoint must be string');}if(!extension){throw new Error('extension must be provided');}},triggerChange=function triggerChange(extensionPoint){if(typeof $!=='undefined'&&typeof document!=='undefined'){$(document).trigger('extensionsChanged',{extensionPoint:extensionPoint});}},shouldWarn=function shouldWarn(map,extensionPoint){if(extensionPoint in map){return;}map[extensionPoint]=true;return true;},shouldWarnAboutMissingDocs=_.partial(shouldWarn,alreadyWarnedAboutDocsByExtensionPoint),shouldWarnAboutLegacyUse=_.partial(shouldWarn,alreadyWarnedAboutLegacyByExtensionPoint),moveExistingLegacyExtensions=function moveExistingLegacyExtensions(old,extensionPoint){if(extensionsNoMutate[old]){extensionsMutate(_defineProperty({},extensionPoint,_.object(_.map(extensionsNoMutate[old],function(config,uuid){return[uuid,u.constant(config)];}))));}},extensionsMutate=function extensionsMutate(config){extensionsNoMutate=u(config,extensionsNoMutate);},api={debug:function debug(){console.log(extensionsNoMutate);},clear:function clear(){extensionsNoMutate={};extensionDocumentation={};legacyMappingToNew={};uuidToExtensionPoint={};uuidGen=0;},canonicalName:function canonicalName(point){if(!point)return;if(point in legacyMappingToNew){var canonical=legacyMappingToNew[point];if(shouldWarnAboutLegacyUse(point)){console.warn('This extension point has been renamed from '+point+' to '+canonical+',\nThe extension will continue to work, but the old name will be removed in future releases');}return canonical;}return point;},registerExtension:function registerExtension(point,extension){var extensionPoint=api.canonicalName(point);verifyArguments.apply(null,arguments);var uuid=[extensionPoint,uuidGen++].join('-');extensionsMutate(_defineProperty({},extensionPoint,_defineProperty({},uuid,u.constant(extension))));uuidToExtensionPoint[uuid]=extensionPoint;triggerChange(extensionPoint);return uuid;},unregisterAllExtensions:function unregisterAllExtensions(point){var extensionPoint=api.canonicalName(point);if(!extensionPoint){throw new Error('extension point required to unregister');}var uuids=_.keys(extensionsNoMutate[extensionPoint]);uuidToExtensionPoint=_.omit(uuidToExtensionPoint,uuids);extensionsMutate(u.omit(extensionPoint));delete extensionDocumentation[extensionPoint];},unregisterExtension:function unregisterExtension(extensionUuid){if(!extensionUuid){throw new Error('extension uuid required to unregister');}var extensionPoint=api.canonicalName(uuidToExtensionPoint[extensionUuid]);if(!extensionPoint){throw new Error('extension uuid not found in registry');}extensionsMutate(_defineProperty({},extensionPoint,u.omit(extensionUuid)));triggerChange(extensionPoint);},markUndocumentedExtensionPoint:function markUndocumentedExtensionPoint(point){var extensionPoint=api.canonicalName(point);extensionDocumentation[extensionPoint]={undocumented:true};},documentExtensionPoint:function documentExtensionPoint(point,description,validator,options){var extensionPoint=api.canonicalName(point);if(!description){throw new Error('Description required for documentation');}if(!_.isFunction(validator)){throw new Error('Validator required for documentation');}var externalDocumentationUrl=_.isString(options)?options:null;if(options){if(options.legacyName){legacyMappingToNew[options.legacyName]=extensionPoint;moveExistingLegacyExtensions(options.legacyName,extensionPoint);}if(options.url){externalDocumentationUrl=options.url;}}extensionDocumentation[extensionPoint]={description:description,validator:validator,externalDocumentationUrl:externalDocumentationUrl};},extensionPointDocumentation:function extensionPointDocumentation(){return _.omit(_.mapObject(extensionDocumentation,function(doc,point){if(doc.undocumented)return;return{extensionPoint:point,description:doc.description,validator:doc.validator.toString(),externalDocumentationUrl:doc.externalDocumentationUrl,registered:api.extensionsForPoint(point).map(replaceFunctions)};}),function(value){return!value;});function replaceFunctions(object){if(_.isFunction(object)){return'FUNCTION'+object.toString();}else if(_.isArray(object)){return _.map(object,replaceFunctions);}else if(_.isObject(object)){return _.mapObject(object,replaceFunctions);}return object;}},extensionsForPoint:function extensionsForPoint(point){if(!_.isString(point))throw new Error('Must specify a string');var extensionPoint=api.canonicalName(point);return getExtensions(extensionPoint);},extensionsForPoints:function extensionsForPoints(points){if(!_.isArray(points)||points.length===0)throw new Error('Must specify an array');var extensionPoints=points.map(api.canonicalName);return getExtensionSubset(extensionPoints);}};return api;});
//# sourceMappingURL=registry.js.map

{"version":3,"sources":["../../js/util/parsers.js"],"names":["define","FULL_NUMERIC_REGEX","NUMERIC_WITH_UNITS_REGEX","prepare","str","replace","PARSERS","number","isValid","s","_","isString","test","isValidWithUnits","parseFloat","NaN","parseInt","parseFloatWithUnits","parseIntWithUnits","bool","parse","defaultValue","toLocaleLowerCase","isUndefined","isNull","Error"],"mappings":"AAAAA,OAAO,EAAP,CACG,UAAW,CACV,aAEA,GAAIC,oBAAqB,oBAAzB,CACIC,yBAA2B,0BAD/B,CAEIC,QAAU,QAAVA,QAAU,CAASC,GAAT,CAAc,CACpB,MAAOA,KAAIC,OAAJ,CAAY,IAAZ,CAAkB,EAAlB,CAAP,CACH,CAJL,CAKIC,QAAU,CAENC,OAAQ,CACJC,QAAS,iBAASC,CAAT,CAAY,CACjB,MAAOC,GAAEC,QAAF,CAAWF,CAAX,GAAiBR,mBAAmBW,IAAnB,CAAwBH,CAAxB,CAAxB,CACH,CAHG,CAKJI,iBAAkB,0BAASJ,CAAT,CAAY,CAC1B,MAAOC,GAAEC,QAAF,CAAWF,CAAX,GAAiBP,yBAAyBU,IAAzB,CAA8BH,CAA9B,CAAxB,CACH,CAPG,CASJK,sLAAY,SAASL,CAAT,CAAY,CACpB,MAAOH,SAAQC,MAAR,CAAeC,OAAf,CAAuBC,CAAvB,EAA4BK,WAAWX,QAAQM,CAAR,CAAX,CAAuB,EAAvB,CAA5B,CAAyDM,GAAhE,CACH,CAFD,CATI,CAaJC,yKAAU,SAASP,CAAT,CAAY,CAClB,MAAOH,SAAQC,MAAR,CAAeC,OAAf,CAAuBC,CAAvB,EAA4BO,SAASb,QAAQM,CAAR,CAAT,CAAqB,EAArB,CAA5B,CAAuDM,GAA9D,CACH,CAFD,CAbI,CAiBJE,oBAAqB,6BAASR,CAAT,CAAY,CAC7B,MAAOH,SAAQC,MAAR,CAAeM,gBAAf,CAAgCJ,CAAhC,EAAqCK,WAAWX,QAAQM,CAAR,CAAX,CAAuB,EAAvB,CAArC,CAAkEM,GAAzE,CACH,CAnBG,CAqBJG,kBAAmB,2BAAST,CAAT,CAAY,CAC3B,MAAOH,SAAQC,MAAR,CAAeM,gBAAf,CAAgCJ,CAAhC,EAAqCO,SAASb,QAAQM,CAAR,CAAT,CAAqB,EAArB,CAArC,CAAgEM,GAAvE,CACH,CAvBG,CAFF,CA4BNI,KAAM,CACFC,MAAO,eAASX,CAAT,CAAYY,YAAZ,CAA0B,CAC7B,GAAI,MAAOZ,EAAP,GAAa,SAAjB,CAA4B,CACxB,MAAOA,EAAP,CACH,CAFD,IAEO,IAAI,MAAOA,EAAP,GAAa,QAAjB,CAA2B,CAC9B,GAAIA,EAAEa,iBAAF,KAA0B,MAA9B,CAAsC,CAClC,MAAO,KAAP,CACH,CAFD,IAEO,IAAIb,EAAEa,iBAAF,KAA0B,OAA9B,CAAuC,CAC1C,MAAO,MAAP,CACH,CACJ,CANM,IAMA,IAAI,CAACZ,EAAEa,WAAF,CAAcd,CAAd,GAAoBC,EAAEc,MAAF,CAASf,CAAT,CAArB,GAAqC,MAAOY,aAAP,GAAwB,SAAjE,CAA4E,CAC/E,MAAOA,aAAP,CACH,CACD,KAAM,IAAII,MAAJ,CAAU,4BAA8BhB,CAA9B,CAAkC,GAA5C,CAAN,CACH,CAdC,CA5BA,CALd,CAmDA,MAAOH,QAAP,CACH,CAxDD","file":"parsers.js","sourcesContent":["define([\n], function() {\n    'use strict';\n\n    var FULL_NUMERIC_REGEX = /^[\\-\\+]?\\d+\\.?\\d*$/,\n        NUMERIC_WITH_UNITS_REGEX = /^[\\-\\+]?\\d+\\.?\\d*[a-z]+$/,\n        prepare = function(str) {\n            return str.replace(/,/g, '');\n        },\n        PARSERS = {\n\n            number: {\n                isValid: function(s) {\n                    return _.isString(s) && FULL_NUMERIC_REGEX.test(s);\n                },\n\n                isValidWithUnits: function(s) {\n                    return _.isString(s) && NUMERIC_WITH_UNITS_REGEX.test(s);\n                },\n\n                parseFloat: function(s) {\n                    return PARSERS.number.isValid(s) ? parseFloat(prepare(s), 10) : NaN;\n                },\n\n                parseInt: function(s) {\n                    return PARSERS.number.isValid(s) ? parseInt(prepare(s), 10) : NaN;\n                },\n\n                parseFloatWithUnits: function(s) {\n                    return PARSERS.number.isValidWithUnits(s) ? parseFloat(prepare(s), 10) : NaN;\n                },\n\n                parseIntWithUnits: function(s) {\n                    return PARSERS.number.isValidWithUnits(s) ? parseInt(prepare(s), 10) : NaN;\n                }\n            },\n\n            bool: {\n                parse: function(s, defaultValue) {\n                    if (typeof s === 'boolean') {\n                        return s;\n                    } else if (typeof s === 'string') {\n                        if (s.toLocaleLowerCase() === 'true') {\n                            return true;\n                        } else if (s.toLocaleLowerCase() === 'false') {\n                            return false;\n                        }\n                    } else if ((_.isUndefined(s) || _.isNull(s)) && typeof defaultValue === 'boolean') {\n                        return defaultValue;\n                    }\n                    throw new Error('Could not parse boolean \"' + s + '\"');\n                }\n            }\n        };\n\n    return PARSERS;\n});\n"]}
{"version":3,"sources":["../../../../js/util/vertex/justification/viewer.js"],"names":["define","defineComponent","Attacher","JustificationViewerReact","JustificationViewer","before","attacher","teardown","after","attr","linkToSource","sourceInfo","sourceMetadata","justificationMetadata","params","value","justificationText","component","node","attach"],"mappings":"AAqCAA,OAAO,CACH,sBADG,CAEH,yBAFG,CAGH,8CAHG,CAAP,CAIG,SAASC,eAAT,CAA0BC,QAA1B,CAAoCC,wBAApC,CAA8D,CAE7D,MAAOF,iBAAgBG,mBAAhB,CAAP,CAEA,QAASA,oBAAT,EAA+B,CAE3B,KAAKC,MAAL,CAAY,UAAZ,CAAwB,UAAW,CAC/B,GAAI,KAAKC,QAAT,CAAmB,CACf,KAAKA,QAAL,CAAcC,QAAd,GACA,KAAKD,QAAL,CAAgB,IAAhB,CACH,CACJ,CALD,EAOA,KAAKE,KAAL,CAAW,YAAX,CAAyB,UAAW,WAEmD,KAAKC,IAFxD,0BAExBC,YAFwB,CAExBA,YAFwB,gCAET,IAFS,oBAEaC,UAFb,OAEHC,cAFG,CAEyBC,qBAFzB,OAEyBA,qBAFzB,CAGhC,GAAMC,QAAS,CACXJ,yBADW,CAEXK,MAAO,EAFI,CAAf,CAKA,GAAIJ,UAAJ,CAAgB,CACZG,OAAOC,KAAP,CAAaJ,UAAb,CAA0BA,UAA1B,CACH,CAFD,IAEO,IAAIE,qBAAJ,CAA2B,CAC9BC,OAAOC,KAAP,CAAaC,iBAAb,CAAiCH,sBAAsBG,iBAAvD,CACH,CAED,KAAKV,QAAL,CAAgBJ,WACXe,SADW,CACDd,wBADC,EAEXe,IAFW,CAEN,KAAKA,IAFC,EAGXJ,MAHW,CAGJA,MAHI,CAAhB,CAIA,KAAKR,QAAL,CAAca,MAAd,GACH,CAnBD,EAqBH,CACJ,CAvCD","file":"viewer.js","sourcesContent":["/**\n * Renders the json justification object. Could be either justification text or\n * full source info with link to source.\n *\n * One of `justificationMetadata` or `sourceMetadata` must be provided.\n * If both justificationMetadata and sourceMetadata are given, only justificationMetadata is used.\n *\n * @module components/JustificationViewer\n * @flight Displays justification information\n * @attr {boolean} [linkToSource=true] Show the source link if available\n * @attr {object} [justificationMetadata]\n * @attr {string} justificationMetadata.justificationText The text to display\n * @attr {object} [sourceMetadata]\n * @attr {string} sourceMetadata.snippet The snippet from source material to display\n * @attr {string} sourceMetadata.textPropertyKey The property key of the text property in source\n * @attr {string} sourceMetadata.textPropertyName The property name of the text property in source\n * @attr {string} sourceMetadata.startOffset The character start index of snippet in source\n * @attr {string} sourceMetadata.endOffset The character end index of snippet in source\n * @attr {string} sourceMetadata.vertexId The vertexId of the source\n * @example <caption>Text</caption>\n * JustificationViewer.attachTo(node, {\n *     justificationMetadata: {\n *         justificationText: 'Justification for property here'\n *     }\n * })\n * @example <caption>Source Reference</caption>\n * JustificationViewer.attachTo(node, {\n *     sourceMetadata: {\n *         snippet: '[html snippet]',\n *         vertexId: vertexId,\n *         textPropertyKey: textPropertyKey,\n *         textPropertyName: textPropertyName,\n *         startOffset: 0,\n *         endOffset: 42\n *     }\n * })\n */\ndefine([\n    'flight/lib/component',\n    'util/component/attacher',\n    'components/justification/JustificationViewer'\n], function(defineComponent, Attacher, JustificationViewerReact) {\n\n    return defineComponent(JustificationViewer);\n\n    function JustificationViewer() {\n\n        this.before('teardown', function() {\n            if (this.attacher) {\n                this.attacher.teardown();\n                this.attacher = null;\n            }\n        })\n\n        this.after('initialize', function() {\n\n            const { linkToSource = true, sourceMetadata: sourceInfo, justificationMetadata } = this.attr;\n            const params = {\n                linkToSource,\n                value: {}\n            }\n\n            if (sourceInfo) {\n                params.value.sourceInfo = sourceInfo;\n            } else if (justificationMetadata) {\n                params.value.justificationText = justificationMetadata.justificationText;\n            }\n\n            this.attacher = Attacher()\n                .component(JustificationViewerReact)\n                .node(this.node)\n                .params(params)\n            this.attacher.attach();\n        });\n\n    }\n});\n"]}
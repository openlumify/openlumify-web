{"version":3,"sources":["../../../js/util/vertex/formatters.js"],"names":["define","F","vertexUrl","formula","i18n","ontologySelectors","visibilityUtil","_state","getProperty","iri","getProperties","getPropertiesByDependentToCompound","getConcept","getConcepts","getRelationship","getRelationships","applyTint","url","color","noTint","replace","encodeURIComponent","openlumifyData","storePromise","then","store","observe","newState","V","isPublished","vertex","sandboxStatus","apply","arguments","undefined","vertexOrProperty","length","props","_","any","p","test","getVertexAndEdgeIdsFromDataEventOrCurrentSelection","data","Promise","all","getVertexIdsFromDataEventOrCurrentSelection","async","getEdgeIdsFromDataEventOrCurrentSelection","spread","vertexIds","edgeIds","opts","options","vertexId","window","selectedObjectsPromise","vertexIdsUsingSelectedObjects","console","warn","selectedObjects","vertices","selectedVertexIds","pluck","intersection","concat","unique","edgeId","edgeIdsUsingSelectedObjects","edges","selectedEdgeIds","metadata","datetime","el","value","textContent","date","dateTimeString","percent","number","userAsync","userId","require","withDataRequest","dataRequest","users","properties","visibility","property","element","attachComponent","source","directoryEntity","requestPretty","$","text","geoLocation","wrap","displayValue","pretty","description","append","css","appendTo","bytes","link","anchor","document","createElement","prop","name","key","href","trim","linkTitle","setAttribute","appendChild","textarea","html","escape","heading","div","dim","half","style","width","height","display","marginRight","insertBefore","childNodes","d3","select","attr","call","styling","createArrowLine","hasMetadata","metadataPropertyNames","indexOf","some","isUndefined","concept","type","Error","ontology","relationship","edge","conceptType","label","conceptProperties","parentConcept","hasProperty","propertyName","isKindOfConcept","conceptTypeFilter","externalImage","optionalWorkspaceId","maxWidth","maxHeight","params","vId","id","workspaceId","currentWorkspaceId","template","origin","location","param","image","entityImageUrl","entityImageVertexId","displayType","isImage","isVideo","graphVertexId","each","ontologyProperty","intents","rotation","flip","posterFrame","glyphIconHref","selectedImage","conceptImage","out","glyphIconSelectedHref","imageIsFromConcept","imageDetail","raw","imageFrames","videoPreview","sortByProperties","verticesWithValues","partition","allProps","defaultValue","isString","isEmpty","sortedNoValue","sortBy","title","sorted","propName","propRaw","dependentPropertyIris","dataType","toLowerCase","order","reverse","autoExpandedName","resolvedName","longestProp","optionalName","chain","filter","a","userVisible","map","parentProperties","includes","parentProperty","flatten","sort","b","rollup","values","min","Number","MAX_VALUE","max","MIN_VALUE","sum","forEach","v","Math","span","relativeToDate","average","dateString","reduce","m","propDisplay","possibleValues","foundPossibleValue","string","phoneNumber","ssn","duration","boolean","dateStringUtc","isObject","val","transform","transformName","isFunction","JSON","stringify","isArray","args","optionalKey","optionalOpts","checkVertexAndPropertyNameArguments","ignoreDisplayFormula","firstMatchingProperty","find","displayFormula","dependentIris","partial","join","foundProperties","transformMatchingVertexProperties","singlePropValid","propertyKey","formulaString","validationFormula","result","Boolean","propValid","isEveryPropertyValid","every","hasValue","i","findWhere","extend","push","titles","maxBeforeOther","maxTitleWords","slice","truncate","diff","others","accessedPropertyNames","formulaResultForElement","ignoreErrorIfTitle","subtitle","time","headingProp","hasKey","iris","throwErrorIfCompoundProperty","firstFoundProp","displayName","isVertex","isEdge","isExtendedDataRow","item","rowId","isArtifact","contains","propNames","rawProp","rawPropMimeType","E","byte","treeLookupForConceptProperty","conceptId","additionalScope","ontologyConcept","vertexiumObject","formulaKey","tableName","ontologyRelation","toUpperCase","capture","fn","rest","propertyNames","CONFIDENCE","pTransformSortValueMap","WeakMap","propertiesByName","propValues","Array","prototype","get","pDisplay","set","p1","p2","c1","c2","p1HasCon","p2HasCon","compareConf","p1TransformSortValue","p2TransformSortValue","localeCompare"],"mappings":"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","file":"formatters.js","sourcesContent":["define([\n    '../formatters',\n    './urlFormatters',\n    './formula',\n    'util/messages',\n    'data/web-worker/store/ontology/selectors',\n    'util/visibility/util'\n], function(\n    F,\n    vertexUrl,\n    formula,\n    i18n,\n    ontologySelectors,\n    visibilityUtil) {\n    'use strict';\n\n    var _state;\n    var getProperty = function(iri) {\n        return ontologySelectors.getProperties(_state)[iri];\n    };\n    var getPropertiesByDependentToCompound = function(iri) {\n        return ontologySelectors.getPropertiesByDependentToCompound(_state)[iri];\n    };\n    var getConcept = function(iri) {\n        return ontologySelectors.getConcepts(_state)[iri];\n    };\n    var getRelationship = function(iri) {\n        return ontologySelectors.getRelationships(_state)[iri];\n    };\n    var applyTint = function(url, color) {\n        var noTint = url.replace(/&tint=[^&+]/);\n        if (color) {\n            return noTint + `&tint=${encodeURIComponent(color)}`\n        }\n        return noTint;\n    };\n    openlumifyData.storePromise.then(function(store) {\n        return store.observe(function(newState) {\n            _state = newState;\n        });\n    });\n\n    /**\n     * Utilities that assist in transforming vertices and edges.\n     *\n     * @alias module:formatters.vertex\n     * @namespace\n     */\n    var V = {\n\n            /**\n             * Check if the passed object is currently published from a case\n             *\n             * @param {Object} element The vertex/edge json to check\n             * @returns {boolean} Whether the element is published\n             */\n            isPublished: function(vertex) {\n                return V.sandboxStatus.apply(null, arguments) === undefined;\n            },\n\n            /**\n             * Get the state of the vertex or property\n             * * `published`: Unpublished in case or Published but changed in case\n             * * `undefined`: Published and not changed in case\n             *\n             * @param {object} Vertex or property json\n             * @returns {string|undefined} result\n             */\n            sandboxStatus: function(vertexOrProperty) {\n                if (arguments.length === 3) {\n                    var props = V.props.apply(null, arguments);\n                    if (props.length) {\n                        return _.any(props, function(p) {\n                            return V.sandboxStatus(p) === undefined;\n                        }) ? undefined : i18n('vertex.status.unpublished');\n                    }\n                    return;\n                }\n\n                return (/^(private|public_changed)$/i).test(vertexOrProperty.sandboxStatus) ?\n                        i18n('vertex.status.unpublished') :\n                        undefined;\n            },\n\n            getVertexAndEdgeIdsFromDataEventOrCurrentSelection: function(data) {\n                return Promise.all([\n                    V.getVertexIdsFromDataEventOrCurrentSelection(data, {async: true}),\n                    V.getEdgeIdsFromDataEventOrCurrentSelection(data)\n                ]).spread(function (vertexIds, edgeIds) {\n                   return {\n                       vertexIds: vertexIds,\n                       edgeIds: edgeIds\n                   };\n                });\n            },\n\n            /**\n             * Helper to get vertexIds from either an events data or the\n             * current selection.\n             *\n             * Useful to get the vertexIds that should be transformed based on\n             * context menus.\n             *\n             * @param {object} data Some event data\n             * @param {object} [opts={}] Options\n             * @param {object} [opts.async=false] Returns a promise if true\n             * @returns {Array.<string>} the vertex ids\n             */\n            getVertexIdsFromDataEventOrCurrentSelection: function(data, opts) {\n                // Normalize the vertexIds sent from a vertex menu event,\n                // also checking the current object selection\n                var vertexIds = [],\n                    options = opts || {},\n                    // Return a promise (will return more accurate list that\n                    // isn't susceptible to selectObjects -> objectsSelected\n                    // race condition\n                    async = options.async;\n\n                if (data && data.vertexId) {\n                    vertexIds = [data.vertexId];\n                } else if (data && data.vertexIds) {\n                    vertexIds = data.vertexIds;\n                }\n\n                if (typeof window.openlumifyData !== 'undefined') {\n                    if (async) {\n                        return openlumifyData.selectedObjectsPromise()\n                            .then(vertexIdsUsingSelectedObjects);\n                    } else {\n                        console.warn('Use { async: true } when calling getVertexIdsFromDataEventOrCurrentSelection')\n                        return vertexIdsUsingSelectedObjects(openlumifyData.selectedObjects)\n                    }\n                }\n\n                return vertexIdsUsingSelectedObjects();\n\n                function vertexIdsUsingSelectedObjects(selectedObjects) {\n                    if (selectedObjects && selectedObjects.vertices.length > 0) {\n                        var selectedVertexIds = _.pluck(selectedObjects.vertices, 'id');\n                        if (_.intersection(vertexIds, selectedVertexIds).length) {\n                            vertexIds = vertexIds.concat(selectedVertexIds);\n                        } else if (!vertexIds.length) {\n                            vertexIds = selectedVertexIds;\n                        }\n                    }\n                    return _.unique(vertexIds);\n                }\n            },\n\n            getEdgeIdsFromDataEventOrCurrentSelection: function(data) {\n                // Normalize the edgeIds sent from a edge menu event,\n                // also checking the current object selection\n                var edgeIds = [];\n\n                if (data && data.edgeId) {\n                    edgeIds = [data.edgeId];\n                } else if (data && data.edgeIds) {\n                    edgeIds = data.edgeIds;\n                }\n\n                if (typeof window.openlumifyData !== 'undefined') {\n                    return openlumifyData.selectedObjectsPromise()\n                        .then(edgeIdsUsingSelectedObjects);\n                }\n\n                return edgeIdsUsingSelectedObjects();\n\n                function edgeIdsUsingSelectedObjects(selectedObjects) {\n                    if (selectedObjects && selectedObjects.edges.length > 0) {\n                        var selectedEdgeIds = _.pluck(selectedObjects.edges, 'id');\n                        if (_.intersection(edgeIds, selectedEdgeIds).length) {\n                            edgeIds = edgeIds.concat(selectedEdgeIds);\n                        } else if (!edgeIds.length) {\n                            edgeIds = selectedEdgeIds;\n                        }\n                    }\n                    return _.unique(edgeIds);\n                }\n            },\n            /**\n             * Transformers for display of property metadata\n             *\n             * Define/override metadata dataType specific\n\n             * displayTransformers here, based on values set in\n             * configuration: `properties.metadata.propertyNamesType`\n             * {@link http://docs.openlumify.org/front-end/#property-info-metadata}\n             *\n             * All functions receive: function(el, value, property, vertexId)\n             * set the value synchronously\n             * - or -\n             * append \"Async\" to function name and return a Promise\n                }\n\n             *\n\n             * @namespace\n             * @example\n             * require(['util/vertex/formatters'], function(F) {\n             *     F.vertex.metadata.customMetadataType = function(el, val) {\n             *         el.textContent = transform(val)\n             *     }\n             * })\n             */\n            metadata: {\n\n                /**\n                 * Transform to date time string\n                 */\n                datetime: function(el, value) {\n                    el.textContent = F.date.dateTimeString(value);\n                    return el;\n                },\n\n                /**\n                 * Transform to sandbox display\n                 */\n                sandboxStatus: function(el, value) {\n                    el.textContent = V.sandboxStatus({ sandboxStatus: value }) || '';\n                    return el;\n                },\n\n                /**\n                 * Transform to percent display\n                 */\n                percent: function(el, value) {\n                    el.textContent = F.number.percent(value);\n                    return el;\n                },\n\n                /**\n                 * Transform user id to display name\n                 */\n                userAsync: function(el, userId) {\n                    return Promise.require('util/withDataRequest')\n                        .then(function(withDataRequest) {\n                            return withDataRequest.dataRequest('user', 'getUserNames', [userId])\n                        })\n                        .then(function(users) {\n                            el.textContent = users && users[0] || i18n('user.unknown.displayName');\n                            return el;\n                        })\n                }\n            },\n\n            /**\n             * Define/override specific displayTransformers for\n             * properties. These are used to transform property json into\n             * displayed versions in the Inspector.\n             *\n             * All functions receive: `function(HtmlElement, property, element)` and\n             * should populate the dom element with a value.\n             *\n             * The function name matches the `displayType` value in the ontology for the property.\n             * Those defined below are built-in.\n             *\n             * @namespace\n             * @example <caption>Add new displayType</caption>\n             * // Add new displayType formatter\n             * require(['util/vertex/formatters'], function(F) {\n             *     F.vertex.properties.customDisplayType = function(htmlElement, property, element) {\n             *         htmlElement.textContent = processValue(p.value)\n             *     }\n             * })\n             *\n             * // In ontology.owl\n             * <openlumify:displayType>customDisplayType</openlumify:displayType>\n             * @example <caption>Add multiple displayTypes</caption>\n             * require(['util/vertex/formatters'], function(F) {\n             *     Object.assign(F.vertex.properties, {\n             *         streetAddress: function(el, prop) { },\n             *         internationalPhone: function(el, prop) { }\n             *     })\n             * })\n             */\n            properties: {\n\n                /**\n                 * Visibility can be customized with the\n                 * {@link http://docs.openlumify.org/extension-points/front-end/visibility/|visibility extension point}\n                 */\n                visibility: function(el, property, element) {\n                    visibilityUtil.attachComponent('viewer', el, {\n                        property: property,\n                        value: property.value && property.value.source,\n                        element: element\n                    })\n\n                    return el;\n                },\n\n                'directory/entity': function(el, property) {\n                    return F.directoryEntity.requestPretty(property.value)\n                      .then(function(value) {\n                          $(el).text(value);\n                          return el;\n                      });\n                },\n\n                /**\n                 * Display geolocation, with description if available\n                 *\n                 * @example\n                 * <openlumify:displayType>geoLocation</openlumify:displayType>\n                 */\n                geoLocation: function(el, property) {\n                    var wrap = $('<span>'),\n                        displayValue = F.geoLocation.pretty(property.value, true);\n\n                    if (property.value.description) {\n                        wrap.append(property.value.description + ' ');\n                    }\n\n                    $('<small>')\n                        .css('white-space', 'nowrap')\n                        .text(F.geoLocation.pretty(property.value, true))\n                        .appendTo(wrap);\n\n                    wrap.appendTo(el);\n\n                    return el;\n                },\n\n                /**\n                 * For property values with number of bytes, formats to human\n                 * readable\n                 *\n                 * @example\n                 * <openlumify:displayType>bytes</openlumify:displayType>\n                 */\n                bytes: function(el, property) {\n                    el.textContent = F.bytes.pretty(property.value);\n                    return el;\n                },\n\n                /**\n                 * For property values that contain URLs, render as a link.\n                 * If the metadata property `http://openlumify.org#linkTitle`\n                 * exists for property, display that as link text.\n                 *\n                 * Opens in a new window\n                 *\n                 * @example\n                 * <openlumify:displayType>link</openlumify:displayType>\n                 */\n                link: function(el, property, vertex) {\n                    var anchor = document.createElement('a'),\n                        value = V.prop(vertex, property.name, property.key),\n                        href = $.trim(value),\n                        linkTitle = property.metadata['http://openlumify.org#linkTitle'];\n\n                    if (!(/^http/).test(href)) {\n                        href = 'http://' + href;\n                    }\n\n                    anchor.setAttribute('href', href);\n                    anchor.setAttribute('target', '_blank');\n                    anchor.textContent = linkTitle || href;\n\n                    el.appendChild(anchor);\n\n                    return el;\n                },\n\n                /**\n                 * Render the property value with whitespace preserving\n                 *\n                 * @example\n                 * <openlumify:displayType>textarea</openlumify:displayType>\n                 */\n                textarea: function(el, property) {\n                    $(el).html(_.escape(property.value || '').replace(/\\r?\\n+/g, '<br>'));\n                    return el;\n                },\n\n                /**\n                 * For property values containing degrees, will\n                 * render an arrow and show human readable heading.\n                 *\n                 * @example\n                 * <openlumify:displayType>heading</openlumify:displayType>\n                 */\n                heading: function(el, property) {\n                    var div = document.createElement('div'),\n                        dim = 12,\n                        half = dim / 2;\n\n                    el.textContent = F.number.heading(property.value);\n                    div.style.width = div.style.height = dim + 'px';\n                    div.style.display = 'inline-block';\n                    div.style.marginRight = '0.25em';\n                    div = el.insertBefore(div, el.childNodes[0]);\n\n                    return Promise.require('d3')\n                        .then(function(d3) {\n                            d3.select(div)\n                                .append('svg')\n                                    .style('vertical-align', 'middle')\n                                    .attr('width', dim)\n                                    .attr('height', dim)\n                                    .append('g')\n                                        .attr('transform', 'rotate(' + property.value + ' ' + half + ' ' + half + ')')\n                                        .call(function() {\n                                            this.append('line')\n                                                .attr('x1', half)\n                                                .attr('y1', 0)\n                                                .attr('x2', half)\n                                                .attr('y2', dim)\n                                                .call(styling)\n\n                                            this.append('g')\n                                                .attr('transform', 'rotate(30 ' + half + ' 0)')\n                                                .call(createArrowLine)\n\n                                            this.append('g')\n                                                .attr('transform', 'rotate(-30 ' + half + ' 0)')\n                                                .call(createArrowLine)\n                                        });\n\n                            return el;\n                        });\n\n                    function createArrowLine() {\n                        this.append('line')\n                            .attr('x1', half)\n                            .attr('y1', 0)\n                            .attr('x2', half)\n                            .attr('y2', dim / 3)\n                            .call(styling);\n                    }\n                    function styling() {\n                        this.attr('stroke', '#555')\n                            .attr('line-cap', 'round')\n                            .attr('stroke-width', '1');\n                    }\n                }\n\n            },\n\n            /**\n             * Check if the property has any of the given metadata values\n             *\n             * @param {object} property The property to check\n             * @param {Array.<string>} metadataPropertyNames The metadata names\n             * to check if there are values\n             * @returns {boolean} True if any of the metadata exists\n             */\n            hasMetadata: function(property, metadataPropertyNames) {\n                return (V.sandboxStatus(property) && metadataPropertyNames.indexOf('sandboxStatus') > -1) ||\n                    _.some(metadataPropertyNames, function(name) {\n                        return property.metadata && !_.isUndefined(property.metadata[name]);\n                    });\n            },\n\n            /**\n             * Given a vertex, get the ontology concept object.\n             *\n             * If not found in ontology returns the root concept\n             *\n             * @param {object} vertex\n             * @returns {object} concept\n             */\n            concept: function(vertex) {\n                if (!vertex || vertex.type !== 'vertex') {\n                    throw new Error('Not a vertex, unable to get concept', vertex);\n                }\n                return V.ontology(vertex)\n            },\n\n            /**\n             * Given an edge, get the ontology relationship object.\n             *\n             * If not found in ontology returns undefined\n             *\n             * @param {object} edge\n             * @returns {object} relationship\n             */\n            relationship: function(edge) {\n                if (!edge || edge.type !== 'edge') {\n                    throw new Error('Not an edge, unable to get relationship', edge);\n                }\n                return V.ontology(edge)\n            },\n\n            /**\n             * Given a vertex or edge, get the ontology concept/relationship object.\n             *\n             * If not found in ontology returns root concept (if vertex) or null (if relationship).\n             *\n             * @param {object} element\n             * @returns {object} ontology\n             */\n            ontology: function(element) {\n                var ontology;\n                if (element.type === 'vertex') {\n                    var conceptType = element && element.conceptType;\n\n                    if (!conceptType || conceptType === 'Unknown') {\n                        conceptType = 'http://www.w3.org/2002/07/owl#Thing';\n                    }\n\n                    ontology = getConcept(conceptType);\n                    if (!ontology) {\n                        console.warn('Concept: ' + conceptType + ' is not in ontology');\n                        ontology = getConcept('http://www.w3.org/2002/07/owl#Thing');\n                    }\n                } else if (element.type === 'edge') {\n                    ontology = element && element.label && getRelationship(element.label)\n                } else {\n                    console.warn('Unknown element type', element.type, element)\n                }\n\n                return ontology\n            },\n\n            /**\n             * Given a vertex get all valid properties for that vertex\n             * concept and all parent concepts\n             *\n             * @param {object} vertex\n             * @return {Array.<object>} Valid properties for concept\n             */\n            conceptProperties: function(vertex) {\n                var concept = V.concept(vertex),\n                    properties = [];\n                do {\n                    properties = properties.concat(concept.properties);\n                    concept = concept.parentConcept && getConcept(concept.parentConcept);\n                } while (concept);\n                return properties;\n            },\n\n            /**\n             * Check if the vertex concept has the property.\n             *\n             * _Does not check if the vertex has the property, just\n             * that the concept (or ancestors) lists it as valid in\n             * ontology._\n             *\n             * @param {object} vertex\n             * @param {string} propertyName\n             * @returns {boolean} if the vertex has the property\n             */\n            hasProperty: function(vertex, propertyName) {\n                var concept = V.concept(vertex);\n                do {\n                    if (concept && concept.properties.indexOf(propertyName) >= 0) {\n                        return true;\n                    }\n                    concept = concept.parentConcept && getConcept(concept.parentConcept);\n                } while (concept);\n                return false;\n            },\n\n            /**\n             * Check if the vertex concept (or concept ancestors) matches\n             * the filter.\n             *\n             * @param {object} vertex\n             * @param {string} conceptTypeFilter IRI of concept\n             * @returns {boolean} if the vertex concept matches the filter\n             */\n            isKindOfConcept: function(vertex, conceptTypeFilter) {\n                var conceptType = V.prop(vertex, 'conceptType');\n\n                do {\n                    if (conceptType === conceptTypeFilter) {\n                        return true;\n                    }\n\n                    conceptType = getConcept(conceptType).parentConcept;\n                } while (conceptType)\n\n                return false;\n            },\n\n            externalImage: function(vertex, optionalWorkspaceId, url, maxWidth, maxHeight) {\n                var params = {\n                        vId: vertex.id,\n                        url: url,\n                        workspaceId: optionalWorkspaceId || openlumifyData.currentWorkspaceId,\n                        maxWidth: maxWidth || 400,\n                        maxHeight: maxHeight || 400\n                    },\n                    template = _.template('{origin}/resource/external?');\n\n                return template({\n                    origin: location.origin\n                }) + $.param(params);\n            },\n\n            /**\n             * Get the image representing this vertex\n             *\n             * @param {object} vertex\n             * @param {object} [optionalWorkspaceId=]\n             * @param {number} [width=400]\n             * @returns {string} url to image\n             */\n            image: function(vertex, optionalWorkspaceId, width) {\n                var entityImageUrl = V.prop(vertex, 'entityImageUrl');\n                if (entityImageUrl) {\n                    return V.externalImage(vertex, optionalWorkspaceId, entityImageUrl, width, width);\n                }\n\n                var entityImageVertexId = V.prop(vertex, 'entityImageVertexId'),\n                    concept = V.concept(vertex),\n                    displayType = V.displayType(vertex),\n                    isImage = displayType === 'image',\n                    isVideo = displayType === 'video';\n\n                if (entityImageVertexId || isImage) {\n                    var params = {\n                        workspaceId: optionalWorkspaceId || openlumifyData.currentWorkspaceId,\n                        graphVertexId: entityImageVertexId || vertex.id,\n                        width: width || 150\n                    };\n\n                    _.each(vertex.properties, function(prop) {\n                        var ontologyProperty = getProperty(prop.name),\n                            intents = ontologyProperty ? ontologyProperty.intents : null;\n                        if (intents) {\n                            if (_.indexOf(intents, 'media.clockwiseRotation') >= 0) {\n                                params.rotation = prop.value;\n                            }\n                            if (_.indexOf(intents, 'media.yAxisFlipped') >= 0) {\n                                params.flip = prop.value;\n                            }\n                        }\n                    });\n\n                    return 'vertex/thumbnail?' + $.param(params);\n                }\n\n                if (isVideo) {\n                    var posterFrame = _.any(vertex.properties, function(p) {\n                        return p.name === 'http://openlumify.org#rawPosterFrame';\n                    });\n                    if (posterFrame) {\n                        return 'vertex/poster-frame?' + $.param({\n                            workspaceId: optionalWorkspaceId || openlumifyData.currentWorkspaceId,\n                            graphVertexId: vertex.id\n                        });\n                    }\n                }\n\n                return applyTint(concept.glyphIconHref, concept.color);\n            },\n\n            /**\n             * Get the vertex image when selected (if available).\n             * Otherwise just return main image.\n             *\n             * @param {object} vertex\n             * @param {object} [optionalWorkspaceId=]\n             * @param {number} [width=400]\n             * @returns {string} url to image\n             */\n            selectedImage: function(vertex, optionalWorkspaceId, width) {\n                var concept = V.concept(vertex),\n                    conceptImage = V.image(vertex, optionalWorkspaceId, width);\n                var out = conceptImage.indexOf(concept.glyphIconHref) === 0 ?\n                    (concept.glyphIconSelectedHref || applyTint(concept.glyphIconHref, '#ffffff')) :\n                    conceptImage;\n                return out;\n            },\n\n            /**\n             * Check if this element has a custom image, or if it\n             * will just display the concepts icon.\n             *\n             * @param {object} vertex\n             * @param {object} [optionalWorkspaceId=]\n             * @returns {boolean} true if the image for `vertex` is just the\n             * concept icon.\n             */\n            imageIsFromConcept: function(vertex, optionalWorkspaceId) {\n                return V.image(vertex, optionalWorkspaceId).indexOf(V.concept(vertex).glyphIconHref) === 0;\n            },\n\n            /**\n             * Larger version of vertex image. 800 pixels.\n             *\n             * Used in the Inspector.\n             *\n             * @param {object} vertex\n             * @param {object} [optionalWorkspaceId=]\n             * @returns {string} url to image\n             */\n            imageDetail: function(vertex, optionalWorkspaceId) {\n                return V.image(vertex, optionalWorkspaceId, 800);\n            },\n\n            raw: function(vertex, optionalWorkspaceId) {\n                return 'vertex/raw?' + $.param({\n                    workspaceId: optionalWorkspaceId || openlumifyData.currentWorkspaceId,\n                    graphVertexId: vertex.id\n                });\n            },\n\n            imageFrames: function(vertex, optionalWorkspaceId) {\n                var videoPreview = _.any(vertex.properties, function(p) {\n                    return p.name === 'http://openlumify.org#videoPreviewImage';\n                });\n                if (videoPreview) {\n                    return 'vertex/video-preview?' + $.param({\n                        workspaceId: optionalWorkspaceId || openlumifyData.currentWorkspaceId,\n                        graphVertexId: vertex.id\n                    });\n                }\n            },\n\n            sortByProperties: function(vertices, name, options) {\n                var verticesWithValues = _.partition(vertices, function(vertex) {\n                        var allProps = V.props(vertex, name);\n                        if (allProps.length === 0) return false;\n                        var prop = V.prop(vertex, name, undefined, { defaultValue: ' ' });\n                        if (_.isString(prop)) {\n                            prop = prop.trim();\n                        }\n                        if (_.isUndefined(prop)) return false;\n                        if (_.isString(prop) && _.isEmpty(prop)) return false;\n                        return true;\n                    }),\n                    sortedNoValue = _.sortBy(verticesWithValues[1], function(vertex) {\n                        return V.title(vertex);\n                    }),\n                    sorted = _.sortBy(verticesWithValues[0], function(vertex) {\n                        var ontologyProperty = getProperty(V.propName(name)),\n                            propRaw = V.propRaw(vertex, name, undefined, { defaultValue: ' ' });\n\n                        if (_.isString(propRaw)) {\n                            propRaw = propRaw.trim();\n                        }\n\n                        if (ontologyProperty) {\n                            if (ontologyProperty.dependentPropertyIris) {\n                                propRaw = V.prop(vertex, name, undefined, { defaultValue: ' ' });\n                            }\n                            switch (ontologyProperty.dataType) {\n                                case 'string':\n                                    return propRaw.toLowerCase();\n\n                                case 'boolean':\n                                    return propRaw === true ? 1 : -1;\n\n                                case 'date':\n                                case 'integer':\n                                case 'currency':\n                                case 'number':\n                                case 'double':\n                                    return propRaw\n                            }\n                        }\n                        return propRaw;\n                    });\n                if (options && options.order === 'DESC') {\n                    sorted.reverse();\n                }\n                return sorted.concat(sortedNoValue);\n            },\n\n            propName: function(name) {\n                var autoExpandedName = (/^http:\\/\\/openlumify.org/).test(name) ?\n                        name : ('http://openlumify.org#' + name),\n                    ontologyProperty = getProperty(name) || getProperty(autoExpandedName),\n\n                    resolvedName = ontologyProperty && (\n                        ontologyProperty.title === name ? name : autoExpandedName\n                    ) || name;\n\n                return resolvedName;\n            },\n\n            /**\n             * Get the longest property value, optionally for\n             * given propertyName only.\n             *\n             * @param {object} vertex\n             * @param {string} [optionalName=] Property name\n             * @returns {object} The property\n             */\n            longestProp: function(vertex, optionalName) {\n                var properties = _.chain(vertex.properties)\n                    .filter(function(a) {\n                        var ontologyProperty = getProperty(a.name);\n                        if (optionalName && optionalName !== a.name) {\n                            return false;\n                        }\n                        return ontologyProperty && ontologyProperty.userVisible;\n                    })\n                    .map(function(a) {\n                        var parentProperties = getPropertiesByDependentToCompound(a.name);\n                        if (parentProperties) {\n                            var concept = V.concept(vertex);\n                            return parentProperties.map(parentProperty => {\n                                if (concept.properties.includes(parentProperty)) {\n                                    return V.prop(vertex, parentProperty, a.key);\n                                }\n                                return '';\n                            })\n                        }\n                        return V.prop(vertex, a.name, a.key);\n                    })\n                    .flatten(true)\n                    .value()\n                    .sort(function(a, b) {\n                        return b.length - a.length;\n                    });\n                if (properties.length > 0) {\n                    return properties[0];\n                }\n            },\n\n            rollup: function(name, values) {\n                name = V.propName(name);\n                var ontologyProperty = getProperty(name),\n                    min = Number.MAX_VALUE,\n                    max = Number.MIN_VALUE,\n                    sum = 0;\n\n                if (ontologyProperty) {\n                    switch (ontologyProperty.dataType) {\n                        case 'date':\n                            values.forEach(function(v) {\n                                min = Math.min(v, min);\n                                max = Math.max(v, max);\n                                sum += v;\n                            })\n\n                            return {\n                                span: F.date.relativeToDate(min, max),\n                                average: F.date.dateString(sum / (values.length || 1))\n                            }\n                        case 'double':\n                        case 'integer':\n                        case 'currency':\n                        case 'number':\n                            sum = _.reduce(values, function(m, v) {\n                                return m + v;\n                            });\n                            return {\n                                sum: F.number.pretty(sum),\n                                average: F.number.pretty(sum / (values.length || 1))\n                            };\n                    }\n                }\n\n                return {};\n            },\n\n            /**\n             * Given a property name and value, convert to a displayable\n             * value for a user.\n             *\n             * For the raw property value use\n             * {@link module:util/vertex/formatters.vertex.propRaw|propRaw}.\n             *\n             * @param {string} name The property name IRI\n             * @param {object} value The value\n             * @param {object} [options=] Additional string transforms. Any\n             * function defined in {@link module:util/vertex/formatters.string}\n             * as the key and boolean if active or an array of arguments to pass to the transform function\n             * @returns {string} display value\n             * @example\n             * F.vertex.propDisplay(name, value, {\n             *     prettyPrint: true,\n             *     plural: ['person', 'people']\n             * })\n             */\n            propDisplay: function(name, value, options) {\n                name = V.propName(name);\n                var ontologyProperty = getProperty(name);\n\n                if (!ontologyProperty) {\n                    return value;\n                }\n\n                if (ontologyProperty.possibleValues) {\n                    var foundPossibleValue = ontologyProperty.possibleValues[value];\n                    if (foundPossibleValue) {\n                        return foundPossibleValue;\n                    } else {\n                        console.warn('Unknown ontology value for key', value, ontologyProperty);\n                    }\n                }\n\n                if (ontologyProperty.displayType) {\n                    switch (ontologyProperty.displayType) {\n                        case 'phoneNumber': return F.string.phoneNumber(value);\n                        case 'ssn': return F.string.ssn(value);\n                        case 'byte':\n                        case 'bytes': return F.bytes.pretty(value);\n                        case 'heading': return F.number.heading(value);\n                        case 'duration' : return F.number.duration(value);\n                    }\n                }\n\n                switch (ontologyProperty.dataType) {\n                    case 'boolean': return F.boolean.pretty(value);\n\n                    case 'date': {\n                        if (ontologyProperty.displayType !== 'dateOnly') {\n                            return F.date.dateTimeString(value);\n                        }\n                        return F.date.dateStringUtc(value);\n                    }\n\n                    case 'double':\n                    case 'integer':\n                    case 'currency':\n                    case 'number': return F.number.pretty(value);\n                    case 'geoLocation': return F.geoLocation.pretty(value);\n\n                    default:\n\n                        if (options && _.isObject(options)) {\n                            return _.reduce(options, function(val, transform, transformName) {\n                                if (transform && transformName in F.string && _.isFunction(F.string[transformName])) {\n                                    if (_.isObject(val)) {\n                                        val = JSON.stringify(val);\n                                    }\n\n                                    if (_.isArray(transform)) {\n                                        var args = [val].concat(transform);\n                                        return F.string[transformName].apply(this, args);\n                                    } else {\n                                        return F.string[transformName](val);\n                                    }\n                                } else if (_.isObject(val)) {\n                                    return JSON.stringify(val);\n                                }\n\n                                return val;\n                            }, value)\n                        } else if (_.isObject(value)) {\n                            return JSON.stringify(value);\n                        }\n\n                        return value;\n                }\n            },\n\n            /**\n             * Get the first property value transformed for display\n             * using {@link module:util/vertex/formatters.vertex.propDisplay|propDisplay}\n             *\n             * @param {object} vertex\n             * @param {string} name Property IRI\n             * @param {string} [key=] Property key, if not given the first is\n             * returned\n             * @param {object} [optionalOpts=] Options\n             * @param {object} [optionalOpts.ignoreDisplayFormula] Ignore any\n             * formula defined in ontology\n             */\n            prop: function(vertex, name, optionalKey, optionalOpts) {\n                checkVertexAndPropertyNameArguments(vertex, name);\n\n                if (_.isObject(optionalKey)) {\n                    optionalOpts = optionalKey;\n                    optionalKey = null;\n                }\n\n                // This is now on the vertex, for performance just get it there\n                if ((name === 'http://openlumify.org#conceptType' || name === 'conceptType') && !optionalKey && vertex.conceptType) {\n                    return vertex.conceptType;\n                }\n\n                name = V.propName(name);\n\n                var value = V.propRaw(vertex, name, optionalKey, optionalOpts),\n                    ignoreDisplayFormula = optionalOpts && optionalOpts.ignoreDisplayFormula,\n                    ontologyProperty = getProperty(name);\n\n                if (!ontologyProperty) {\n                    return value;\n                }\n\n                if (_.isArray(value)) {\n                    if (!optionalKey) {\n                        var firstMatchingProperty = _.find(vertex.properties, function(p) {\n                            return ~ontologyProperty.dependentPropertyIris.indexOf(p.name);\n                        });\n                        optionalKey = (firstMatchingProperty && firstMatchingProperty.key);\n                    }\n                    if (ontologyProperty.displayFormula) {\n                        return formula(ontologyProperty.displayFormula, vertex, F, V, optionalKey);\n                    } else {\n                        var dependentIris = ontologyProperty && ontologyProperty.dependentPropertyIris || [];\n                        if (dependentIris.length) {\n                            return _.map(\n                                dependentIris,\n                                _.partial(V.prop, vertex, _, optionalKey, optionalOpts)\n                            ).join(' ');\n                        } else {\n                            return value.join(' ');\n                        }\n                    }\n                }\n\n                if (!ignoreDisplayFormula && ontologyProperty.displayFormula) {\n                    return formula(ontologyProperty.displayFormula, vertex, F, V, optionalKey, optionalOpts);\n                }\n\n                return V.propDisplay(name, value, optionalOpts);\n            },\n\n            /**\n             * Return list of all matching properties.\n             *\n             * @param {object} element\n             * @param {string} name Property IRI\n             * @param {string} [key=] Property key\n             * @returns {Array.<object>} All properties matching\n             */\n            props: function(vertex, name, optionalKey) {\n                checkVertexAndPropertyNameArguments(vertex, name);\n\n                name = V.propName(name);\n\n                var ontologyProperty = getProperty(name),\n                    dependentIris = ontologyProperty && ontologyProperty.dependentPropertyIris,\n                    foundProperties = transformMatchingVertexProperties(vertex, dependentIris || [name], optionalKey);\n\n                if (name === 'http://openlumify.org#visibilityJson' && foundProperties.length === 0) {\n                    // Protect against no visibility, just set to empty\n                    return [{\n                        key: '',\n                        sandboxStatus: 'PUBLIC',\n                        name: 'http://openlumify.org#visibilityJson',\n                        metadata: {},\n                        value: {\n                            source: ''\n                        }\n                    }];\n                }\n\n                return foundProperties;\n            },\n\n            singlePropValid: function(value, propertyName, propertyKey) {\n                var property = {\n                        name: propertyName,\n                        key: propertyKey,\n                        value: value\n                    },\n                    vertex = {\n                        id: 'singlePropValid',\n                        properties: [property]\n                    },\n                    ontologyProperty = getProperty(propertyName),\n                    formulaString = ontologyProperty.validationFormula,\n                    result = true;\n                if (formulaString) {\n                    result = formula(formulaString, vertex, F, V, propertyKey);\n                }\n                return Boolean(result);\n            },\n\n            propValid: function(vertex, values, propertyName, propertyKey) {\n                checkVertexAndPropertyNameArguments(vertex, propertyName);\n                if (!_.isArray(values)) {\n                    throw new Error('Unable to validate without values array')\n                }\n\n                var ontologyProperty = getProperty(propertyName),\n                    dependentIris = ontologyProperty.dependentPropertyIris,\n                    formulaString = ontologyProperty.validationFormula,\n                    result,\n                    isEveryPropertyValid = function(vertex) {\n                        return _.every(vertex.properties, function(property) {\n                            return V.singlePropValid(property.value, property.name, property.key);\n                        });\n                    };\n\n                if (values.length) {\n                    var properties = [];\n                    if (dependentIris) {\n                        var hasValue = false;\n                        dependentIris.forEach(function(iri, i) {\n                            var property = _.findWhere(vertex.properties, {\n                                    name: iri,\n                                    key: propertyKey\n                                }),\n                                value = _.isArray(values[i]) && values[i].length === 1 ? values[i][0] : values[i];\n\n                            if (property) {\n                                property = _.extend({}, property, { value: value });\n                                if (_.isUndefined(values[i])) {\n                                    property.value = undefined;\n                                }\n                            } else {\n                                property = {\n                                    name: iri,\n                                    key: propertyKey,\n                                    value: value\n                                };\n                            }\n                            hasValue = hasValue || (\n                                property.value !== undefined\n                                && property.value !== ''\n                                && property.value !== null\n                            );\n                            properties.push(property);\n                        })\n\n                        if (!hasValue) {\n                            return false\n                        }\n                    }\n                    vertex = _.extend({}, vertex, { properties: properties });\n                }\n\n                result = isEveryPropertyValid(vertex) &&\n                    (formulaString ? Boolean(formula(formulaString, vertex, F, V, propertyKey)) : true);\n                return Boolean(result);\n            },\n\n            titles: function(vertices, { maxBeforeOther = 3, maxTitleWords = 4 } = {}) {\n                if (!_.isArray(vertices)) throw new Error('Must pass an array of vertices: ' + typeof vertices)\n\n                const { length } = vertices;\n\n                if (length === 0) {\n                    return i18n('vertex.titles.none');\n                }\n                if (length === 1) {\n                    return V.title(vertices[0])\n                }\n\n                const titles = vertices.slice(0, Math.min(length, maxBeforeOther))\n                    .map((vertex, i) => {\n                        const title = maxTitleWords > 0 ?\n                            (F.string.truncate(V.title(vertex) || '', maxTitleWords)) : V.title(vertex);\n\n                        if (i === length - 1) {\n                            return i18n('vertex.titles.oxford', title)\n                        }\n                        return title;\n                    })\n                    .join(', ')\n\n                if (maxBeforeOther > 0 && length > maxBeforeOther) {\n                    const diff = length - maxBeforeOther;\n                    const others = i18n('vertex.titles.other' + (diff > 1 ? 's' : ''), diff);\n                    return `${titles}, ${others}`\n                }\n\n                return titles;\n            },\n\n            /**\n             * Get the `title` of the element, using order:\n             *\n             * 1. Use the title formula in the ontology\n             * 2. Use the `title` property\n             *\n             * @param {object} vertex\n             * @returns {string} The display title for vertex\n             */\n            title: function(vertex, accessedPropertyNames) {\n                var title = formulaResultForElement(vertex, 'titleFormula', undefined, accessedPropertyNames)\n\n                if (!title) {\n                    title = V.prop(vertex, 'title', undefined, {\n                        ignoreErrorIfTitle: true\n                    });\n                }\n\n                return title;\n            },\n\n            /**\n             * Get the `subtitle` of the element, using subtitle formula\n             *\n             * @function\n             * @param {object} vertex\n             * @returns {string} The display subtitle for vertex\n             */\n            subtitle: _.partial(formulaResultForElement, _, 'subtitleFormula', ''),\n\n            /**\n             * Get the `time` of the element, using subtitle formula.\n             *\n             * Nothing enforces that this is time value. Just returns\n             * a string.\n             *\n             * @function\n             * @param {object} vertex\n             * @returns {string} The display time for vertex\n             */\n            time: _.partial(formulaResultForElement, _, 'timeFormula', ''),\n\n            heading: function(vertex) {\n                var headingProp = _.find(vertex.properties, function(p) {\n                  return p.name.indexOf('heading') > 0;\n                });\n                if (headingProp) {\n                    return headingProp.value;\n                }\n                return 0;\n            },\n\n            /**\n             * Get the first property value as raw value. For a transformed\n             * value use {@link module:util/vertex/formatters.vertex.prop|prop}\n             *\n             * @param {object} vertex\n             * @param {string} name Property IRI\n             * @param {string} [key=] Property key, if not given the first is returned\n             * @param {object} [options=] Options\n             * @param {object} options.defaultValue=undefined] If no value\n             * @returns {object} The raw property value\n             */\n            propRaw: function(vertex, name, optionalKey, optionalOpts) {\n                checkVertexAndPropertyNameArguments(vertex, name);\n\n                if (_.isObject(optionalKey)) {\n                    optionalOpts = optionalKey;\n                    optionalKey = null;\n                }\n\n                var hasKey = !_.isUndefined(optionalKey),\n                    options = _.extend({\n                        defaultValue: undefined,\n                        ignoreErrorIfTitle: false\n                    }, optionalOpts || {});\n\n                if (options.ignoreErrorIfTitle !== true && name === 'title') {\n                    throw new Error('Use title function, not generic prop');\n                }\n\n                name = V.propName(name);\n\n                var ontologyProperty = getProperty(name),\n                    dependentIris = ontologyProperty && ontologyProperty.dependentPropertyIris || [],\n                    iris = dependentIris.length ? dependentIris : [name],\n                    properties = transformMatchingVertexProperties(vertex, iris, optionalKey);\n\n                if (dependentIris.length) {\n                    if (options.throwErrorIfCompoundProperty) {\n                        throw new Error('Compound properties that depend on compound properties are not allowed');\n                    }\n\n                    if (!hasKey && properties.length) {\n                        optionalKey = properties[0].key;\n                    }\n\n                    options.throwErrorIfCompoundProperty = true;\n\n                    return _.map(dependentIris, _.partial(V.propRaw, vertex, _, optionalKey, options));\n                } else {\n                    var firstFoundProp = properties[0];\n                    var hasValue = firstFoundProp && !_.isUndefined(firstFoundProp.value);\n\n                    if (!hasValue &&\n                        name !== 'http://openlumify.org#title' &&\n                        _.isUndefined(options.defaultValue)) {\n                        return undefined;\n                    }\n\n                    return hasValue ? firstFoundProp.value :\n                        (\n                            options.defaultValue ||\n                            i18n('vertex.property.not_available',\n                                (ontologyProperty && ontologyProperty.displayName || '').toLowerCase() || name)\n                        )\n                }\n            },\n\n            /**\n             * Check if the element is vertex\n             *\n             * @param {object} element\n             * @returns {boolean} If element is a vertex\n             */\n            isVertex: function(vertex) { return vertex && vertex.type && vertex.type === 'vertex'; },\n\n            /**\n             * Check if the element is edge\n             *\n             * @param {object} element\n             * @returns {boolean} If element is a edge\n             */\n            isEdge: function(vertex) { return vertex && vertex.type && vertex.type === 'edge'; },\n\n            isExtendedDataRow: function(item) {\n                return item && ((item.id && item.id.rowId) || (item.type === 'extendedDataRow'));\n            },\n\n            isArtifact: function(vertex) {\n                return _.contains(_.pluck(vertex.properties, 'name'), V.propName('raw'));\n            },\n\n            displayType: function(vertex) {\n                if (!V.isArtifact(vertex)) {\n                    return V.isEdge(vertex) ? 'edge' : 'entity';\n                }\n\n                var propNames = _.pluck(vertex.properties, 'name');\n                if (_.some(propNames, function(propName) { return propName.indexOf('http://openlumify.org#video-') === 0; })) {\n                    return 'video';\n                } else if (_.some(propNames, function(propName) { return propName.indexOf('http://openlumify.org#audio-') === 0; })) {\n                    return 'audio';\n                } else {\n                    var rawProp = V.props(vertex, V.propName('raw')),\n                        rawPropMimeType = rawProp && rawProp.length && rawProp[0].metadata && rawProp[0].metadata[V.propName('mimeType')];\n                    if (rawPropMimeType && rawPropMimeType.indexOf('image/') === 0) {\n                        return 'image';\n                    } else {\n                        return 'document';\n                    }\n                }\n            }\n        };\n\n    var E = {\n        title: V.title,\n        subtitle: V.subtitle,\n        time: V.time\n    };\n\n    // Legacy\n    V.properties.byte = V.properties.bytes;\n\n    return $.extend({}, F, { vertex: V, vertexUrl: vertexUrl.vertexUrl, edge: E });\n\n    function treeLookupForConceptProperty(conceptId, propertyName, additionalScope) {\n        var ontologyConcept = conceptId && getConcept(conceptId),\n            formulaString = ontologyConcept && ontologyConcept[propertyName];\n\n        if (ontologyConcept && !additionalScope.ontology) {\n            additionalScope.ontology = ontologyConcept\n        }\n\n        if (formulaString) {\n            return formulaString;\n        }\n\n        if (ontologyConcept && ontologyConcept.parentConcept) {\n            return treeLookupForConceptProperty(ontologyConcept.parentConcept, propertyName, additionalScope);\n        }\n    }\n\n    function formulaResultForElement(vertexiumObject, formulaKey, defaultValue, accessedPropertyNames) {\n        var isEdge = V.isEdge(vertexiumObject),\n            isVertex = V.isVertex(vertexiumObject),\n            isExtendedDataRow = V.isExtendedDataRow(vertexiumObject),\n            result = defaultValue,\n            formulaString,\n            additionalScope = {};\n\n        if (isExtendedDataRow) {\n            const tableName = vertexiumObject.id.tableName,\n                ontologyProperty = getProperty(tableName);\n            additionalScope.label = ontologyProperty.displayName;\n            formulaString = ontologyProperty[formulaKey];\n        } else if (isEdge) {\n            var edge = vertexiumObject,\n                ontologyRelation = getRelationship(edge.label),\n                label = ontologyRelation.displayName;\n            additionalScope.label = label;\n            additionalScope.ontology = ontologyRelation;\n            formulaString = ontologyRelation[formulaKey];\n        } else if (isVertex) {\n            var vertex = vertexiumObject,\n                conceptId = V.prop(vertex, 'conceptType');\n            formulaString = treeLookupForConceptProperty(conceptId, formulaKey, additionalScope);\n        } else {\n            if (formulaKey === 'titleFormula') {\n                return i18n('element.unauthorized').toUpperCase();\n            } else {\n                return '';\n            }\n        }\n\n        if (formulaString) {\n            var capture = function(fn, vertex, name) {\n                    var result = fn.apply(this, _.rest(arguments))\n                    if (_.isArray(accessedPropertyNames) &&\n                        (!_.isUndefined(result) || (_.isString(result) && result))) {\n                        accessedPropertyNames.push(name);\n                    }\n                    return result;\n                };\n            result = formula(formulaString, vertexiumObject, F, {\n                prop: _.wrap(V.prop, capture),\n                propRaw: _.wrap(V.propRaw, capture),\n                longestProp: _.wrap(V.longestProp, capture),\n                props: _.wrap(V.props, capture),\n                isEdge: V.isEdge\n            }, undefined, { additionalScope: additionalScope });\n        }\n\n        return result;\n    }\n\n    function transformMatchingVertexProperties(vertex, propertyNames, optionalKey) {\n        var CONFIDENCE = 'http://openlumify.org#confidence',\n            properties = [],\n            hasKey = !_.isUndefined(optionalKey),\n            pTransformSortValueMap = new WeakMap();\n\n        if (vertex.propertiesByName) {\n            for (var i = 0; i < propertyNames.length; i++) {\n                var propValues = vertex.propertiesByName[propertyNames[i]];\n                if (propValues && propValues.length) {\n                    if (hasKey) {\n                        propValues = propValues.filter(function(p) { return p.key === optionalKey; })\n                    }\n                    Array.prototype.push.apply(properties, propValues);\n                }\n            }\n        } else {\n            properties = vertex.properties.filter(function(p) {\n                return _.contains(propertyNames, p.name) && (!hasKey || p.key === optionalKey);\n            });\n        }\n\n        return _.forEach(properties, function(p) {\n                if (!pTransformSortValueMap.get(p)) {\n                    var pDisplay = V.propDisplay(p.name, p.value);\n                    if (_.isString(pDisplay)) {\n                        pTransformSortValueMap.set(p, pDisplay.toLowerCase());\n                    }\n                }\n            })\n            .sort(function(p1, p2) { // Use native sort for performance\n                const c1 = p1.metadata && p1.metadata[CONFIDENCE];\n                const c2 = p2.metadata && p2.metadata[CONFIDENCE];\n                const p1HasCon = !_.isUndefined(c1);\n                const p2HasCon = !_.isUndefined(c2);\n                const compareConf = (p1HasCon && p2HasCon) ? (c2 - c1) :\n                    p1HasCon ? -1 :\n                    p2HasCon ? 1 : 0;\n\n                if (compareConf === 0) {\n                    var p1TransformSortValue = pTransformSortValueMap.get(p1),\n                        p2TransformSortValue = pTransformSortValueMap.get(p2);\n                    if (_.isString(p1TransformSortValue) && _.isString(p2TransformSortValue)) {\n                        return p1TransformSortValue.localeCompare(p2TransformSortValue);\n                    }\n                    return 0;\n                }\n\n                return compareConf;\n            });\n    }\n\n    function checkVertexAndPropertyNameArguments(vertex, propertyName) {\n        if (!vertex || !vertex.id || !_.isArray(vertex.properties)) {\n            throw new Error('Vertex is invalid', vertex);\n        }\n        if (!propertyName || !_.isString(propertyName)) {\n            throw new Error('Property name is invalid', propertyName);\n        }\n    }\n});\n"]}
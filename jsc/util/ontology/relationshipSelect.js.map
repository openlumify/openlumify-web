{"version":3,"sources":["../../../js/util/ontology/relationshipSelect.js"],"names":["define","defineComponent","attacher","RelationshipSelector","after","teardown","attr","console","warn","self","on","event","data","conceptId","sourceId","sourceConceptId","targetId","targetConceptId","params","_params","filter","attach","relationshipId","value","node","placeholder","defaultText","creatable","autofocus","focus","limitParentConceptId","sourceConcept","targetConcept","behavior","onSelected","relationship","trigger","path"],"mappings":"gOAiBAA,OAAO,CACH,sBADG,CAEH,yBAFG,CAAP,CAGG,SAASC,eAAT,CAA0BC,QAA1B,CAAoC,CAEnC,MAAOD,iBAAgBE,oBAAhB,CAAP,CAEA,QAASA,qBAAT,EAAgC,CAC5B,KAAKC,KAAL,CAAW,UAAX,CAAuB,UAAW,CAC9B,KAAKF,QAAL,CAAcG,QAAd,GACH,CAFD,EAIA,KAAKD,KAAL,CAAW,YAAX,CAAyB,UAAW,gBAChC,GAAI,YAAc,MAAKE,IAAvB,CAA6B,CACzBC,QAAQC,IAAR,CAAa,iCAAb,EACH,CACD,GAAIC,MAAO,IAAX,CAiBA,KAAKC,EAAL,CAAQ,sBAAR,CAAgC,SAASC,KAAT,CAAgBC,IAAhB,CAAsB,IAC1CC,UAD0C,CAC0BD,IAD1B,CAC1CC,SAD0C,CACdC,QADc,CAC0BF,IAD1B,CAC/BG,eAD+B,CACaC,QADb,CAC0BJ,IAD1B,CACJK,eADI,CAElD,GAAMC,QAAST,KAAKP,QAAL,CAAciB,OAA7B,CACAV,KAAKP,QAAL,CAAcgB,MAAd,aAA0BA,MAA1B,EAAkCE,mBAAaF,OAAOE,MAApB,EAA4BP,mBAA5B,CAAuCC,iBAAvC,CAAiDE,iBAAjD,EAAlC,IAAgGK,MAAhG,GACH,CAJD,EAmBA,KAAKX,EAAL,CAAQ,sBAAR,CAAgC,SAASC,KAAT,CAAgBC,IAAhB,CAAsB,CAClD,GAAMU,gBAAiBV,MAAQA,KAAKU,cAAb,EAA+B,IAAtD,CACAb,KAAKP,QAAL,CAAcgB,MAAd,aAA0BT,KAAKP,QAAL,CAAciB,OAAxC,EAAiDI,MAAOD,cAAxD,IAA0ED,MAA1E,GACH,CAHD,EAKA,KAAKnB,QAAL,CAAgBA,WACXsB,IADW,CACN,KAAKA,IADC,EAEXN,MAFW,CAEJ,CACJO,YAAa,KAAKnB,IAAL,CAAUoB,WADnB,CAEJC,UAAW,KAAKrB,IAAL,CAAUqB,SAAV,GAAwB,KAF/B,CAGJC,UAAW,KAAKtB,IAAL,CAAUuB,KAAV,GAAoB,IAH3B,CAIJT,OAAQ,CACJP,UAAW,KAAKP,IAAL,CAAUwB,oBADjB,CAEJhB,SAAU,KAAKR,IAAL,CAAUyB,aAFhB,CAGJf,SAAU,KAAKV,IAAL,CAAU0B,aAHhB,CAJJ,CAFI,EAYXC,QAZW,CAYF,CACNC,WAAY,oBAAChC,QAAD,CAAWiC,YAAX,CAA4B,CAapC,MAAKC,OAAL,CAAa,sBAAb,CAAqC,CAAED,yBAAF,CAArC,EACH,CAfK,CAZE,EA6BXE,IA7BW,CA6BN,0CA7BM,CAAhB,CA+BA,KAAKnC,QAAL,CAAcmB,MAAd,GACH,CA7ED,EA8EH,CACJ,CA3FD","file":"relationshipSelect.js","sourcesContent":["/**\n * Allows a user to select an ontology relationship from a searchable dropdown component.\n *\n * @module components/RelationshipSelect\n * @flight Dropdown selection component for selecting relationships from the ontology\n * @attr {string} [defaultText=Choose a Relationship...] the placeholder text to display\n * @attr {boolean} [creatable=true] Allow creation of new relationships if the user has ONTOLOGY_ADD privilege\n * @attr {string} [limitParentConceptId=''] Limit edges that contain this concept IRI on one side of the edge\n * @attr {string} [sourceConcept=''] Limit relationships to those that have this concept IRI as the source\n * @attr {string} [targetConcept=''] Limit relationships to those that have this concept IRI as the target\n * @attr {boolean} [focus=false] Activate the field for focus when finished rendering\n * @fires module:components/RelationshipSelect#relationshipSelected\n * @listens module:components/RelationshipSelect#limitParentConceptId\n * @listens module:components/RelationshipSelect#selectRelationshipId\n * @example\n * RelationshipSelect.attachTo(node)\n */\ndefine([\n    'flight/lib/component',\n    'util/component/attacher'\n], function(defineComponent, attacher) {\n\n    return defineComponent(RelationshipSelector);\n\n    function RelationshipSelector() {\n        this.after('teardown', function() {\n            this.attacher.teardown();\n        })\n\n        this.after('initialize', function() {\n            if ('maxItems' in this.attr) {\n                console.warn('maxItems is no longer supported');\n            }\n            var self = this;\n\n            /**\n             * Trigger to change the list of relationships to filter with this concept.\n             *\n             * If `conceptId` is specifed source/target should not be.\n             *\n             * @event module:components/RelationshipSelect#limitParentConceptId\n             * @property {object} data\n             * @property {string} [data.conceptId=''] The concept IRI to limit by\n             * @property {string} [data.sourceConceptId=''] The source concept IRI to limit by\n             * @property {string} [data.targetConceptId=''] The dest concept IRI to limit by\n             * @example\n             * RelationshipSelect.attachTo($node)\n             * //...\n             * $node.trigger('limitParentConceptId', { conceptId: 'http://www.openlumify.org/minimal#person' })\n             */\n            this.on('limitParentConceptId', function(event, data) {\n                const { conceptId, sourceConceptId: sourceId, targetConceptId: targetId } = data;\n                const params = self.attacher._params;\n                self.attacher.params({ ...params, filter: { ...params.filter, conceptId, sourceId, targetId }}).attach();\n            })\n\n            /**\n             * Trigger to change the list of properties the component works with.\n             *\n             * @event module:components/RelationshipSelect#selectRelationshipId\n             * @property {object} data\n             * @property {string} [data.relationshipId=''] The relationship IRI to select or nothing to clear\n             * @example\n             * RelationshipSelect.attachTo($node)\n             * //...\n             * $node.trigger('selectRelationshipId', { relationshipId: '' })\n             * @example <caption>Clear selection</caption>\n             * $node.trigger('selectRelationshipId')\n             */\n            this.on('selectRelationshipId', function(event, data) {\n                const relationshipId = data && data.relationshipId || null;\n                self.attacher.params({ ...self.attacher._params, value: relationshipId }).attach()\n            })\n\n            this.attacher = attacher()\n                .node(this.node)\n                .params({\n                    placeholder: this.attr.defaultText,\n                    creatable: this.attr.creatable !== false,\n                    autofocus: this.attr.focus === true,\n                    filter: {\n                        conceptId: this.attr.limitParentConceptId,\n                        sourceId: this.attr.sourceConcept,\n                        targetId: this.attr.targetConcept\n                    }\n                })\n                .behavior({\n                    onSelected: (attacher, relationship) => {\n                        /**\n                         * Triggered when the user selects a relationship from the list.\n                         *\n                         * @event module:components/RelationshipSelect#relationshipSelected\n                         * @property {object} data\n                         * @property {object} data.relationship The ontology relationship object that was selected\n                         * @example\n                         * $node.on('relationshipSelected', function(event, data) {\n                         *     console.log(data.relationship)\n                         * })\n                         * RelationshipSelect.attachTo($node)\n                         */\n                        this.trigger('relationshipSelected', { relationship })\n                    }\n                })\n                .path('components/ontology/RelationshipSelector')\n\n            this.attacher.attach();\n        })\n    }\n});\n"]}
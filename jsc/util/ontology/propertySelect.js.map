{"version":3,"sources":["../../../js/util/ontology/propertySelect.js"],"names":["define","defineComponent","attacher","HIDE_PROPERTIES","PropertySelect","after","teardown","attr","console","warn","on","event","filter","params","_params","nextFilter","_","omit","value","attach","data","property","rollupCompound","hideCompound","focus","placeholder","properties","onlySearchable","onlySortable","onlyDataTypes","domainType","showAdminProperties","limitParentConceptId","isArray","dataTypes","searchable","userVisible","sortable","conceptId","indexBy","node","selectedProperty","autofocus","creatable","behavior","onSelected","trigger","path"],"mappings":"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","file":"propertySelect.js","sourcesContent":["/**\n * Allows a user to select an ontology property from a searchable dropdown component.\n *\n * @module components/PropertySelect\n * @flight Dropdown selection component for selecting properties from the ontology\n * @attr {Array.<object>=} properties The ontology properties to populate the list with, if not provided will use visible properties\n * @attr {string} [placeholder=Select Property] the placeholder text to display\n * @attr {boolean} [creatable=true] Allow creation of new properties if the user has ONTOLOGY_ADD privilege\n * @attr {boolean} [limitParentConceptId=''] Only show properties that are attached to this concept or it's descendants\n * @attr {boolean} [onlySearchable=false] Only show properties that have searchable attribute equal to true in ontology\n * @attr {boolean} [onlySortable=false] Only show properties that have sortable attribute equal to true in ontology\n * @attr {string} [onlyDataTypes=[]] Only show properties that have matching data type in ontology\n * @attr {string} [domainType] `concept` or `relationship`, show only properties that are attached to concepts or relationships\n * @attr {boolean} [hideCompound=false] Hide all compound/parent fields\n * @attr {boolean} [rollupCompound=true] Hide all dependent properties and only show the compound/parent fields\n * @attr {boolean} [focus=false] Activate the field for focus when finished rendering\n * @attr {string} [selectedProperty=''] Default the selection to this property IRI\n * @fires module:components/PropertySelect#propertyselected\n * @listens module:components/PropertySelect#filterProperties\n * @listens module:components/PropertySelect#selectProperty\n * @example\n * dataRequest('ontology', 'properties').then(function(properties) {\n *     PropertySelect.attachTo(node, {\n *         properties: properties\n *     })\n * })\n */\ndefine([\n    'flight/lib/component',\n    'util/component/attacher'\n], function(defineComponent, attacher) {\n\n\n    var HIDE_PROPERTIES = ['http://openlumify.org/comment#entry'];\n\n    return defineComponent(PropertySelect);\n\n    function PropertySelect() {\n        this.after('teardown', function() {\n            this.attacher.teardown();\n        });\n\n        this.after('initialize', function() {\n            if ('unsupportedProperties' in this.attr) {\n                console.warn('Attribute `unsupportedProperties` no longer used. Use filter attributes to customize list');\n            }\n            if ('maxItems' in this.attr) {\n                console.warn('maxItems is no longer supported');\n            }\n\n            /**\n             * Trigger to change the filters or list of properties the component works with.\n             *\n             * @event module:components/PropertySelect#filterProperties\n             * @property {module:components/PropertySelect#filters} filters Attributes used to filter the properties in the component\n             * @example\n             * PropertySelect.attachTo($node)\n             * //...\n             * $node.trigger('filterProperties', { properties: newList })\n             * $node.trigger('filterProperties', { conceptId: null }) //clear a filter\n             * $node.trigger('filterProperties', { searchable: true, sortable: true, dataType: null }) //set multiple at once\n             */\n            this.on('filterProperties', function(event, filter) {\n                const params = this.attacher._params;\n                const nextFilter = _.omit({ ...params.filter, ...filter }, value => value === null);\n\n                this.attacher.params({ ...params, filter: nextFilter }).attach();\n            });\n\n            /**\n             * Trigger to change the the selected property (or clear it.)\n             *\n             * @event module:components/PropertySelect#selectProperty\n             * @property {object} data\n             * @property {string} data.property The property iri to select\n             * @example\n             * PropertySelect.attachTo($node)\n             * //...\n             * $node.trigger('selectProperty', { property: 'http://openlumify.org#title' })\n             * $node.trigger('selectProperty') // Clear\n             */\n            this.on('selectProperty', function(event, data) {\n                const params = this.attacher._params;\n                this.attacher.params({\n                    ...params,\n                    value: data && data.property || null\n                }).attach();\n            });\n\n            const {\n                filter = {},\n                rollupCompound = true,\n                hideCompound = false,\n                focus,\n                placeholder,\n                properties,\n                onlySearchable,\n                onlySortable,\n                onlyDataTypes,\n                domainType,\n                showAdminProperties,\n                limitParentConceptId\n            } = this.attr;\n\n            if (_.isArray(onlyDataTypes)) {\n                filter.dataTypes = onlyDataTypes\n            }\n            if (domainType) {\n                filter.domainType = domainType;\n            }\n            if (onlySearchable === true) {\n                filter.searchable = true;\n            }\n            if (showAdminProperties === true) {\n                filter.userVisible = null;\n            }\n            if (onlySortable === true) {\n                filter.sortable = true\n            }\n            if (limitParentConceptId) {\n                filter.conceptId = limitParentConceptId;\n            }\n            if (properties) {\n                filter.properties = _.indexBy(properties, 'title');\n            }\n\n            this.attacher = attacher()\n                .node(this.node)\n                .params({\n                    properties: this.attr.properties,\n                    filter: {\n                        ...filter,\n                        rollupCompound,\n                        hideCompound\n                    },\n                    value: this.attr.selectedProperty,\n                    autofocus: focus === true,\n                    creatable: this.attr.creatable !== false,\n                    placeholder\n                })\n                .behavior({\n                    onSelected: (attacher, property) => {\n                        /**\n                         * When the user selects a property, this event will be\n                         * triggered\n                         *\n                         * @event module:components/PropertySelect#propertyselected\n                         * @property {object} data\n                         * @property {object} data.property The property object that was selected\n                         * @example\n                         * $node.on('propertyselected', function(event, data) {\n                         *     console.log(data.property)\n                         * })\n                         * PropertySelect.attachTo($node)\n                         */\n                        this.trigger('propertyselected', { property: property });\n                    }\n                })\n                .path('components/ontology/PropertySelector');\n\n            this.attacher.attach();\n        });\n    }\n});\n"]}
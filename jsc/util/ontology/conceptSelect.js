var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};define(['flight/lib/component','util/component/attacher'],function(defineComponent,attacher){return defineComponent(ConceptSelector);function ConceptSelector(){this.after('teardown',function(){this.attacher.teardown();});this.after('initialize',function(){var _this=this;this.on('clearSelectedConcept',function(event){this.attacher.params(_extends({},this.attacher._params,{value:null})).attach();});this.on('selectConceptId',function(event,_ref){var conceptId=_ref.conceptId;this.attacher.params(_extends({},this.attacher._params,{value:conceptId})).attach();});this.on('enableConcept',function(event,_ref2){var disable=_ref2.disable,enable=_ref2.enable;var disabled=disable===true||enable===false;this.attacher.params(_extends({},this.attacher._params,{disabled:disabled})).attach();});var filter={};if(this.attr.showAdminConcepts===true){filter.userVisible=null;}if(this.attr.onlySearchable===true){filter.searchable=true;}if(this.attr.restrictConcept){filter.conceptId=this.attr.restrictConcept;}if(this.attr.limitRelatedToConceptId){filter.relatedToConceptId=this.attr.limitRelatedToConceptId;}if('maxItems'in this.attr){console.warn('maxItems is no longer supported');}if('selectedConceptIntent'in this.attr){console.warn('selectedConceptIntent is no longer supported');}this.attacher=attacher().node(this.node).params({filter:filter,creatable:this.attr.creatable!==false,value:this.attr.selectedConceptId,placeholder:this.attr.defaultText,autofocus:this.attr.focus===true}).behavior({onSelected:function onSelected(attacher,concept){_this.trigger('conceptSelected',{concept:concept});}}).path('components/ontology/ConceptSelector');this.attacher.attach();});}});
//# sourceMappingURL=conceptSelect.js.map

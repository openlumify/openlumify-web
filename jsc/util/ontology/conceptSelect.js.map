{"version":3,"sources":["../../../js/util/ontology/conceptSelect.js"],"names":["define","defineComponent","attacher","ConceptSelector","after","teardown","on","event","params","_params","value","attach","conceptId","disable","enable","disabled","filter","attr","showAdminConcepts","userVisible","onlySearchable","searchable","restrictConcept","limitRelatedToConceptId","relatedToConceptId","console","warn","node","creatable","selectedConceptId","placeholder","defaultText","autofocus","focus","behavior","onSelected","concept","trigger","path"],"mappings":"gOAyBAA,OAAO,CACH,sBADG,CAEH,yBAFG,CAAP,CAGG,SAASC,eAAT,CAA0BC,QAA1B,CAAoC,CAEnC,MAAOD,iBAAgBE,eAAhB,CAAP,CAEA,QAASA,gBAAT,EAA2B,CACvB,KAAKC,KAAL,CAAW,UAAX,CAAuB,UAAW,CAC9B,KAAKF,QAAL,CAAcG,QAAd,GACH,CAFD,EAIA,KAAKD,KAAL,CAAW,YAAX,CAAyB,UAAW,gBAYhC,KAAKE,EAAL,CAAQ,sBAAR,CAAgC,SAASC,KAAT,CAAgB,CAC5C,KAAKL,QAAL,CAAcM,MAAd,aAA0B,KAAKN,QAAL,CAAcO,OAAxC,EAAiDC,MAAO,IAAxD,IAAgEC,MAAhE,GACH,CAFD,EAoBA,KAAKL,EAAL,CAAQ,iBAAR,CAA2B,SAASC,KAAT,MAA+B,IAAbK,UAAa,MAAbA,SAAa,CACtD,KAAKV,QAAL,CAAcM,MAAd,aAA0B,KAAKN,QAAL,CAAcO,OAAxC,EAAiDC,MAAOE,SAAxD,IAAqED,MAArE,GACH,CAFD,EAqBA,KAAKL,EAAL,CAAQ,eAAR,CAAyB,SAASC,KAAT,OAAqC,IAAnBM,QAAmB,OAAnBA,OAAmB,CAAVC,MAAU,OAAVA,MAAU,CAC1D,GAAMC,UAAWF,UAAY,IAAZ,EAAoBC,SAAW,KAAhD,CACA,KAAKZ,QAAL,CAAcM,MAAd,aAA0B,KAAKN,QAAL,CAAcO,OAAxC,EAAiDM,iBAAjD,IAA6DJ,MAA7D,GACH,CAHD,EAKA,GAAMK,QAAS,EAAf,CACA,GAAI,KAAKC,IAAL,CAAUC,iBAAV,GAAgC,IAApC,CAA0C,CACtCF,OAAOG,WAAP,CAAqB,IAArB,CACH,CACD,GAAI,KAAKF,IAAL,CAAUG,cAAV,GAA6B,IAAjC,CAAuC,CACnCJ,OAAOK,UAAP,CAAoB,IAApB,CACH,CACD,GAAI,KAAKJ,IAAL,CAAUK,eAAd,CAA+B,CAC3BN,OAAOJ,SAAP,CAAmB,KAAKK,IAAL,CAAUK,eAA7B,CACH,CACD,GAAI,KAAKL,IAAL,CAAUM,uBAAd,CAAuC,CACnCP,OAAOQ,kBAAP,CAA4B,KAAKP,IAAL,CAAUM,uBAAtC,CACH,CACD,GAAI,YAAc,MAAKN,IAAvB,CAA6B,CACzBQ,QAAQC,IAAR,CAAa,iCAAb,EACH,CACD,GAAI,yBAA2B,MAAKT,IAApC,CAA0C,CACtCQ,QAAQC,IAAR,CAAa,8CAAb,EACH,CAED,KAAKxB,QAAL,CAAgBA,WACXyB,IADW,CACN,KAAKA,IADC,EAEXnB,MAFW,CAEJ,CACJQ,aADI,CAEJY,UAAW,KAAKX,IAAL,CAAUW,SAAV,GAAwB,KAF/B,CAGJlB,MAAO,KAAKO,IAAL,CAAUY,iBAHb,CAIJC,YAAa,KAAKb,IAAL,CAAUc,WAJnB,CAKJC,UAAW,KAAKf,IAAL,CAAUgB,KAAV,GAAoB,IAL3B,CAFI,EASXC,QATW,CASF,CACNC,WAAY,oBAACjC,QAAD,CAAWkC,OAAX,CAAuB,CAa/B,MAAKC,OAAL,CAAa,iBAAb,CAAgC,CAAED,eAAF,CAAhC,EACH,CAfK,CATE,EA0BXE,IA1BW,CA0BN,qCA1BM,CAAhB,CA4BA,KAAKpC,QAAL,CAAcS,MAAd,GACH,CA3GD,EA4GH,CACJ,CAzHD","file":"conceptSelect.js","sourcesContent":["/**\n * Allows a user to select an ontology concept from a searchable dropdown component.\n *\n * @module components/ConceptSelect\n * @flight Dropdown selection component for selecting concepts from the ontology\n * @attr {string} [defaultText=Choose a Concept...] the placeholder text to display\n * @attr {boolean} [showAdminConcepts=false] Whether concepts that aren't user visible should be displayed\n * @attr {boolean} [onlySearchable=false] Only show concepts that have searchable attribute equal to true in ontology\n * @attr {boolean} [creatable=true] Allow creation of new concepts if the user has ONTOLOGY_ADD privilege\n * @attr {string} [restrictConcept=''] Only allow selection of this concept or its descendants\n * @attr {string} [limitRelatedToConceptId=''] Only allow selection of concepts where there is a valid edge containing the passed in concept IRI\n * @attr {string} [selectedConceptId=''] Default the selection to this concept IRI\n * @attr {string} [selectedConceptIntent=''] Default the selection to this the first concept with this intent defined in ontology\n * @attr {boolean} [focus=false] Activate the field for focus when finished rendering\n * @fires module:components/ConceptSelect#conceptSelected\n * @listens module:components/ConceptSelect#clearSelectedConcept\n * @listens module:components/ConceptSelect#selectConceptId\n * @listens module:components/ConceptSelect#enableConcept\n * @example <caption>Use default component</caption>\n * ConceptSelect.attachTo(node)\n * @example <caption>Select a concept</caption>\n * ConceptSelect.attachTo(node, {\n *     selectedConceptId: 'http://www.openlumify.org/minimal#person'\n * })\n */\ndefine([\n    'flight/lib/component',\n    'util/component/attacher'\n], function(defineComponent, attacher) {\n\n    return defineComponent(ConceptSelector);\n\n    function ConceptSelector() {\n        this.after('teardown', function() {\n            this.attacher.teardown();\n        })\n\n        this.after('initialize', function() {\n\n            /**\n             * Clears the selected concept from the component. Will not fire\n             * conceptSelected.\n             *\n             * @event module:components/ConceptSelect#clearSelectedConcept\n             * @example\n             * ConceptSelect.attachTo($node)\n             * //...\n             * $node.trigger('clearSelectedConcept')\n             */\n            this.on('clearSelectedConcept', function(event) {\n                this.attacher.params({ ...this.attacher._params, value: null }).attach();\n            })\n\n            /**\n             * Set the selected concept. Will not fire conceptSelected.\n             *\n             * If no conceptId is passed or it's empty it'll clear the\n             * selection.\n             *\n             * @event module:components/ConceptSelect#selectConceptId\n             * @property {object} data\n             * @property {string} [data.conceptId=''] The concept IRI to select\n             * @example\n             * ConceptSelect.attachTo($node)\n             * //...\n             * $node.trigger('selectConceptId', {\n             *     conceptId: 'http://www.openlumify.org/minimal#person'\n             * })\n             */\n            this.on('selectConceptId', function(event, { conceptId }) {\n                this.attacher.params({ ...this.attacher._params, value: conceptId }).attach();\n            })\n\n            /**\n             * Enable / Disable the component. Only pass one property (enable\n             * or disable)\n             *\n             * @event module:components/ConceptSelect#enableConcept\n             * @property {object} data\n             * @property {boolean} data.enable Enable this component and allow user entry\n             * @property {boolean} data.disable Disable this component from user entry\n             * @example <caption>Disable</caption>\n             * ConceptSelect.attachTo($node)\n             * //...\n             * $node.trigger('enableConcept', { disable: true })\n             * @example <caption>Enable</caption>\n             * ConceptSelect.attachTo($node)\n             * //...\n             * $node.trigger('enableConcept', { enable: true })\n             */\n            this.on('enableConcept', function(event, { disable, enable }) {\n                const disabled = disable === true || enable === false\n                this.attacher.params({ ...this.attacher._params, disabled }).attach();\n            })\n\n            const filter = {};\n            if (this.attr.showAdminConcepts === true) {\n                filter.userVisible = null;\n            }\n            if (this.attr.onlySearchable === true) {\n                filter.searchable = true;\n            }\n            if (this.attr.restrictConcept) {\n                filter.conceptId = this.attr.restrictConcept;\n            }\n            if (this.attr.limitRelatedToConceptId) {\n                filter.relatedToConceptId = this.attr.limitRelatedToConceptId;\n            }\n            if ('maxItems' in this.attr) {\n                console.warn('maxItems is no longer supported');\n            }\n            if ('selectedConceptIntent' in this.attr) {\n                console.warn('selectedConceptIntent is no longer supported');\n            }\n\n            this.attacher = attacher()\n                .node(this.node)\n                .params({\n                    filter,\n                    creatable: this.attr.creatable !== false,\n                    value: this.attr.selectedConceptId,\n                    placeholder: this.attr.defaultText,\n                    autofocus: this.attr.focus === true\n                })\n                .behavior({\n                    onSelected: (attacher, concept) => {\n                        /**\n                         * Triggered when the user selects a concept from the list.\n                         *\n                         * @event module:components/ConceptSelect#conceptSelected\n                         * @property {object} data\n                         * @property {object} data.concept The concept object that was selected\n                         * @example\n                         * $node.on('conceptSelected', function(event, data) {\n                         *     console.log(data.concept)\n                         * })\n                         * ConceptSelect.attachTo($node)\n                         */\n                        this.trigger('conceptSelected', { concept })\n                    }\n                })\n                .path('components/ontology/ConceptSelector')\n\n            this.attacher.attach();\n        })\n    }\n});\n"]}
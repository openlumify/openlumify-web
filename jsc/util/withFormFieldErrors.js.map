{"version":3,"sources":["../../js/util/withFormFieldErrors.js"],"names":["define","alertTemplate","withFormFieldErrors","clearFieldErrors","root","$","$node","find","empty","markFieldErrors","error","self","rootEl","messages","cls","removeClass","json","_","isString","JSON","parse","e","isError","push","message","i18n","isObject","keys","forEach","fieldName","each","$this","vis","data","invalidValues","toggleClass","any","v","isEqual","value","addClass","length","errorsContainer","html","show","console","warn","describe"],"mappings":"AAAAA,OAAO,CAAC,aAAD,CAAP,CAAwB,SAASC,aAAT,CAAwB,CAC5C,aAEA,MAAOC,oBAAP,CAEA,QAASA,oBAAT,EAA+B,CAE3B,KAAKC,gBAAL,CAAwB,SAASC,IAAT,CAAe,CACnCC,EAAED,MAAQ,KAAKE,KAAf,EAAsBC,IAAtB,CAA2B,SAA3B,EAAsCC,KAAtC,GACH,CAFD,CAIA,KAAKC,eAAL,CAAuB,SAASC,KAAT,CAAgBN,IAAhB,CAAsB,CACzC,GAAIO,MAAO,IAAX,CACIC,OAASR,MAAQ,KAAKE,KAD1B,CAEIO,SAAW,EAFf,CAGIC,IAAM,qBAHV,CAKAF,OAAOL,IAAP,CAAY,sBAAZ,EACKQ,WADL,CACiBD,GADjB,EAGA,GAAI,CAACJ,KAAL,CAAY,CACR,OACH,CACD,GAAIA,MAAMM,IAAV,CAAgB,CACZN,MAAQA,MAAMM,IAAd,CACH,CAED,GAAI,CACA,GAAIC,EAAEC,QAAF,CAAWR,KAAX,CAAJ,CAAuB,CACnBA,MAAQS,KAAKC,KAAL,CAAWV,KAAX,CAAR,CACH,CACJ,CAAC,MAAMW,CAAN,CAAS,CAA0B,CAErC,GAAIJ,EAAEK,OAAF,CAAUZ,KAAV,CAAJ,CAAsB,CAClBG,SAASU,IAAT,CAAcb,MAAMc,OAAN,EAAiBC,KAAK,yBAAL,CAA/B,EACH,CAFD,IAEO,IAAIR,EAAES,QAAF,CAAWhB,KAAX,CAAJ,CAAuB,CAC1BO,EAAEU,IAAF,CAAOjB,KAAP,EAAckB,OAAd,CAAsB,SAASC,SAAT,CAAoB,CACtC,OAAQA,SAAR,EACI,IAAK,QAAL,CAAe,MAEf,IAAK,YAAL,CACIhB,SAASU,IAAT,CAAcb,MAAMmB,SAAN,CAAd,EACA,MAEJ,IAAK,eAAL,CAAsB,MAEtB,IAAK,kBAAL,CACIjB,OAAOL,IAAP,CAAY,aAAZ,EACKuB,IADL,CACU,UAAW,CACb,GAAIC,OAAQ1B,EAAE,IAAF,CAAZ,CACI2B,IAAMD,MAAME,IAAN,CAAW,YAAX,CADV,CAGA,GAAIvB,MAAMwB,aAAN,EAAuBF,GAA3B,CAAgC,CAC5BD,MAAMI,WAAN,CAAkBrB,GAAlB,CACKG,EAAEmB,GAAF,CAAM1B,MAAMwB,aAAZ,CAA2B,SAASG,CAAT,CAAY,CACnC,MAAOpB,GAAEqB,OAAF,CAAUD,CAAV,CAAaL,IAAIO,KAAjB,CAAP,CACH,CAFD,CADL,EAKH,CAND,IAMO,CACHR,MAAMS,QAAN,CAAe1B,GAAf,EACH,CACJ,CAdL,EAeAD,SAASU,IAAT,CAAcb,MAAMmB,SAAN,CAAd,EACJ,MAEA,QACIhB,SAASU,IAAT,CAAcb,MAAMmB,SAAN,CAAd,EACA,MA9BR,CAgCH,CAjCD,EAkCH,CAnCM,IAmCA,IAAIZ,EAAEC,QAAF,CAAWR,KAAX,GAAqBA,KAAzB,CAAgC,CACnCG,SAASU,IAAT,CAAcb,KAAd,EACH,CAED,GAAI,CAACG,SAAS4B,MAAd,CAAsB,CAClB5B,SAASU,IAAT,CAAc,eAAd,EACH,CAED,GAAImB,iBAAkB9B,OAAOL,IAAP,CAAY,SAAZ,CAAtB,CACA,GAAImC,gBAAgBD,MAApB,CAA4B,CACxBC,gBAAgBC,IAAhB,CACI1C,cAAc,CACVS,MAAOG,QADG,CAAd,CADJ,EAIE+B,IAJF,GAKH,CAND,IAMO,CACHC,QAAQC,IAAR,CACI,4CACA,2CADA,CAEA,KAAKC,QAFL,CAEgB,GAHpB,EAKH,CAED,MAAOlC,SAAP,CACH,CAnFD,CAoFH,CACJ,CAhGD","file":"withFormFieldErrors.js","sourcesContent":["define(['tpl!./alert'], function(alertTemplate) {\n    'use strict';\n\n    return withFormFieldErrors;\n\n    function withFormFieldErrors() {\n\n        this.clearFieldErrors = function(root) {\n            $(root || this.$node).find('.errors').empty();\n        };\n\n        this.markFieldErrors = function(error, root) {\n            var self = this,\n                rootEl = root || this.$node,\n                messages = [],\n                cls = 'control-group error';\n\n            rootEl.find('.control-group.error')\n                .removeClass(cls);\n\n            if (!error) {\n                return;\n            }\n            if (error.json) {\n                error = error.json;\n            }\n\n            try {\n                if (_.isString(error)) {\n                    error = JSON.parse(error);\n                }\n            } catch(e) { /*eslint no-empty:0 */ }\n\n            if (_.isError(error)) {\n                messages.push(error.message || i18n('openlumify.server.error'))\n            } else if (_.isObject(error)) {\n                _.keys(error).forEach(function(fieldName) {\n                    switch (fieldName) {\n                        case 'status': break;\n\n                        case 'statusText':\n                            messages.push(error[fieldName]);\n                            break;\n\n                        case 'invalidValues': break;\n\n                        case 'visibilitySource':\n                            rootEl.find('.visibility')\n                                .each(function() {\n                                    var $this = $(this),\n                                        vis = $this.data('visibility')\n\n                                    if (error.invalidValues && vis) {\n                                        $this.toggleClass(cls,\n                                             _.any(error.invalidValues, function(v) {\n                                                 return _.isEqual(v, vis.value);\n                                             })\n                                        );\n                                    } else {\n                                        $this.addClass(cls);\n                                    }\n                                });\n                            messages.push(error[fieldName]);\n                        break;\n\n                        default:\n                            messages.push(error[fieldName]);\n                            break;\n                    }\n                });\n            } else if (_.isString(error) && error) {\n                messages.push(error);\n            }\n\n            if (!messages.length) {\n                messages.push('Unknown error')\n            }\n\n            var errorsContainer = rootEl.find('.errors');\n            if (errorsContainer.length) {\n                errorsContainer.html(\n                    alertTemplate({\n                        error: messages\n                    })\n                ).show();\n            } else {\n                console.warn(\n                    'No <div class=\"errors\"/> container found ' +\n                    'to display error messages for component \"' +\n                    this.describe + '\"'\n                );\n            }\n\n            return messages;\n        };\n    }\n});\n"]}
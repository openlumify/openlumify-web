{"version":3,"sources":["../../js/util/clipboardManager.js"],"names":["define","defineComponent","IGNORE_SELECTORS","WAIT_FOR_DBLCLICK_SELECTORS","ClipboardManager","after","self","on","_","once","require","rangy","initialized","init","test","window","location","hash","textarea","$","css","position","zIndex","cursor","top","height","boxSizing","cut","onCut","bind","copy","onCopy","paste","onPaste","keydown","onKeyDown","keyup","appendTo","document","body","onClick","clear","set","focus","event","val","lastSetData","text","select","data","defer","F","parameters","vertexUrl","parametersInUrl","vertices","vertexIds","length","edges","edgeIds","total","console","debug","trigger","message","i18n","$target","target","is","waitForDblClick","type","returnFocus","timeStamp","cleanup","_dblClickTimer","clearTimeout","previousTimestamp","selection","getSelection","isCollapsed","delay","inFocus"],"mappings":"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","file":"clipboardManager.js","sourcesContent":["\ndefine([\n    'flight/lib/component'\n], function(defineComponent) {\n    'use strict';\n\n    const IGNORE_SELECTORS = 'input,select,option,textarea,.Select,.Select *,.openlumify-allow-focus,.openlumify-allow-focus *,*[data-allow-focus=true],*[data-allow-focus=true] *';\n    const WAIT_FOR_DBLCLICK_SELECTORS = '.openlumify-allow-dblclick-selection, .openlumify-allow-dblclick-selection *';\n\n    return defineComponent(ClipboardManager);\n\n    /**\n     * Manages clipboard events\n     */\n    function ClipboardManager() {\n\n        this.after('initialize', function() {\n            var self = this;\n\n            this.on('applicationReady currentUserOpenLumifyDataUpdated', _.once(function() {\n                require(['rangy-core', 'rangy-text', 'rangy-highlighter'], function(rangy) {\n                    if (!rangy.initialized) rangy.init();\n                });\n            }));\n\n            // Fullscreen view isn't loaded yet but this isn't needed\n            // if it will be\n            if (/^#?v=/.test(window.location.hash)) {\n                return;\n            }\n\n            this.textarea = $('<textarea class=\"clipboardManager\" autocomplete=\"false\" spellcheck=\"false\" />')\n                .css({\n                    position: 'absolute',\n                    zIndex: 10,\n                    cursor: 'pointer',\n                    top: '-300px',\n                    height: '10px',\n                    boxSizing: 'border-box'\n                })\n                .on({\n                    cut: this.onCut.bind(this),\n                    copy: this.onCopy.bind(this),\n                    paste: this.onPaste.bind(this),\n                    keydown: this.onKeyDown.bind(this),\n                    keyup: this.onKeyDown.bind(this)\n                })\n                .appendTo(document.body);\n\n            this.on('click', this.onClick);\n            this.on('dblclick', this.onClick);\n            this.on('clipboardClear', this.clear);\n            this.on('clipboardSet', this.set);\n            this.on('clipboardFocus', this.focus);\n        });\n\n        this.onKeyDown = function(event) {\n            this.textarea.val(this.lastSetData && this.lastSetData.text || '').focus().select();\n        };\n\n        this.focus = function() {\n            this.textarea.focus();\n        };\n\n        this.set = function(event, data) {\n            this.lastSetData = data;\n            this.textarea.val(data && data.text || '').focus().select();\n        };\n\n        this.clear = function() {\n            this.lastSetData = null;\n            this.textarea.val('');\n        };\n\n        this.onPaste = function(event) {\n            var self = this;\n            _.defer(function() {\n                require(['util/vertex/urlFormatters'], function(F) {\n                    var textarea = self.textarea,\n                        val = textarea.val(),\n                        parameters = F.vertexUrl.parametersInUrl(val),\n                        vertices = parameters && parameters.vertexIds && parameters.vertexIds.length || 0,\n                        edges = parameters && parameters.edgeIds && parameters.edgeIds.length || 0,\n                        total = vertices + edges;\n\n                    console.debug('Clipboard: Paste', val);\n\n                    self.trigger('clipboardPaste', {data: val});\n                    self.lastSetData = null;\n                    textarea.val('').focus();\n\n                    if (total === 1) {\n                        self.trigger('displayInformation', {message: i18n('element.clipboard.paste.one')});\n                    } else if (total > 1) {\n                        self.trigger('displayInformation', {\n                            message: i18n('element.clipboard.paste.some', total)\n                        });\n                    }\n                });\n            });\n        };\n\n        this.onCopy = function() {\n            console.debug('Clipboard: Copy', this.textarea.val());\n\n            var self = this,\n                val = this.textarea.val();\n\n            if (val.length) {\n                require(['util/vertex/urlFormatters'], function(F) {\n                    var parameters = F.vertexUrl.parametersInUrl(val),\n                        vertices = parameters && parameters.vertexIds && parameters.vertexIds.length || 0,\n                        edges = parameters && parameters.edgeIds && parameters.edgeIds.length || 0,\n                        total = vertices + edges;\n\n                    if (total === 1) {\n                        self.trigger('displayInformation', { message: i18n('element.clipboard.copy.one') });\n                    } else if (total > 1) {\n                        self.trigger('displayInformation', {\n                            message: i18n('element.clipboard.copy.some', total)\n                        });\n                    } else if (!total) {\n                        self.trigger('displayInformation', { message: i18n('clipboard.copy') });\n                    }\n                })\n            }\n        };\n\n        this.onCut = function() {\n            var val = this.textarea.val();\n            console.debug('Clipboard: Cut', val);\n            this.trigger('clipboardCut', { data: val });\n        };\n\n        this.onClick = function(event) {\n            const $target = $(event.target);\n\n            if ($target.is(IGNORE_SELECTORS)) {\n                return;\n            }\n\n            if ($target.is(WAIT_FOR_DBLCLICK_SELECTORS)) {\n                this.waitForDblClick(event);\n                return;\n            }\n\n            if (event.type === 'dblclick') {\n                return;\n            }\n\n            this.returnFocus(event.target)\n        };\n\n        this.waitForDblClick = function(event) {\n            const { target, timeStamp } = event;\n            const cleanup = () => {\n                if (this._dblClickTimer) {\n                    clearTimeout(this._dblClickTimer);\n                    this._dblClickTimer = null;\n                }\n                this.previousTimestamp = null;\n            }\n            const selection = getSelection();\n\n            if (event.type === 'dblclick') {\n                cleanup();\n                if (selection.isCollapsed) {\n                    this.returnFocus(target)\n                }\n            } else if (!this.previousTimestamp) {\n                this.previousTimestamp = timeStamp;\n                this._dblClickTimer = _.delay(() => {\n                    this.returnFocus(target);\n                    cleanup();\n                }, 250);\n            }\n        };\n\n        this.returnFocus = function(target) {\n            var inFocus = $(':focus');\n            // Check for previous focus, since we are going to steal it to\n            // support browser cut/copy/paste events\n            if (inFocus.length) {\n                this.trigger(inFocus[0], 'focusLostByClipboard');\n            } else {\n                this.trigger(target, 'focusLostByClipboard');\n            }\n\n            if (getSelection().isCollapsed === false) return;\n\n            this.focus();\n        };\n\n    }\n});\n"]}
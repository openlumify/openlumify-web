{"version":3,"sources":["../../js/util/withDataRequest.js"],"names":["define","Promise","_","$","NO_DATA_RESPONSE_TIMEOUT_SECONDS","currentDataRequestId","requests","document","on","event","data","request","requestId","clearTimeout","timeoutTimer","promiseFulfill","updateProgress","progress","cleanRequest","success","result","error","isString","Error","promiseReject","dataRequestFromNode","node","service","method","argsStartIndex","thisRequestId","$node","nodeEl","$nodeInDom","contains","documentElement","args","arguments","length","rest","promise","fulfill","reject","onCancel","require","then","delay","console","trigger","parameters","withDataRequest","dataRequest","partial","Array","prototype","splice","call","apply"],"mappings":"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","file":"withDataRequest.js","sourcesContent":["/**\n * Make data requests using events, but wrapped in Promise interface.\n * These requests get routed to the web worker thread where one of\n * the service interfaces will handle the AJAX request and process the\n * response.\n *\n * The service name maps to a module defined in `data/web-worker/services/*`,\n * and the service method is the method to invoke in that modules exported\n * object.\n *\n * See the documented **Services** in the navigation menu on the left.\n *\n * To create custom services in plugins refer to the\n * {@link http://docs.openlumify.org/tutorials/webplugin.html|Web Plugin Tutorial}.\n *\n * @module dataRequest\n * @classdesc Invoke service requests on Web Worker\n * @example\n * // Invoke the \"me\" function in \"data/web-worker/services/user.js\" module\n * dataRequest('user', 'me')\n *  .then(function(user) {\n *      // The current logged in user info\n *  }).catch(function(err) {\n *    // handle error\n *  }\n */\ndefine([\n    'util/promise',\n    'underscore',\n    'jquery',\n    'util/requirejs/promise!util/service/dataPromise'\n], function(Promise, _, $)\n    /**\n     * @alias module:dataRequest\n     */\n{\n    'use strict';\n\n    var NO_DATA_RESPONSE_TIMEOUT_SECONDS = 4,\n        currentDataRequestId = 0,\n        requests = {};\n\n    $(document)\n        .on('dataRequestStarted', function(event, data) {\n            var request = requests[data.requestId];\n            if (request) {\n                clearTimeout(request.timeoutTimer);\n            }\n        })\n        .on('dataRequestProgress', function(event, data) {\n            var request = requests[data.requestId];\n            if (request) {\n                request.promiseFulfill.updateProgress(data.progress);\n            }\n        })\n        .on('dataRequestCompleted', function(event, data) {\n            var request = cleanRequest(data.requestId);\n            if (request) {\n                if (data.success) {\n                    request.promiseFulfill(data.result);\n                } else {\n                    var error = data.error;\n                    if (_.isString(error)) {\n                        error = new Error(error);\n                    }\n                    request.promiseReject(error);\n                }\n            }\n        });\n\n    function cleanRequest(requestId) {\n        var request = requests[requestId];\n        if (request) {\n            clearTimeout(request.timeoutTimer);\n            delete requests[requestId];\n            return request;\n        }\n    }\n\n\n    /**\n     * Make a data request\n     *\n     * @name module:dataRequest.dataRequest\n     * @function\n     * @param {string} service The name of service\n     * @param {string} method The method to invoke in service\n     * @param {...object} [args] arguments to pass to service\n     * @returns {Promise} The service request promise\n     */\n    function dataRequestFromNode(node, service, method /*, args */) {\n        if (!service || !method) {\n            throw new Error('Service and method parameters required for dataRequest');\n        }\n\n        var argsStartIndex = 3,\n            thisRequestId = currentDataRequestId++,\n            $node = $(node),\n            nodeEl = $node[0],\n            $nodeInDom = $.contains(document.documentElement, nodeEl) ? $node : $(document),\n            args = arguments.length > argsStartIndex ? _.rest(arguments, argsStartIndex) : [],\n            promise = new Promise(function(fulfill, reject, onCancel) {\n                Promise.require('util/requirejs/promise!util/service/dataPromise')\n                    .then(function() {\n                        requests[thisRequestId] = {\n                            promiseFulfill: fulfill,\n                            promiseReject: reject,\n                            timeoutTimer: _.delay(function() {\n                                console.error('Data request went unhandled', service + '->' + method);\n                                $nodeInDom.trigger('dataRequestCompleted', {\n                                    requestId: thisRequestId,\n                                    success: false,\n                                    error: 'No data request handler responded for ' + service + '->' + method\n                                })\n                            }, NO_DATA_RESPONSE_TIMEOUT_SECONDS * 1000)\n                        };\n\n                        $nodeInDom.trigger('dataRequest', {\n                            requestId: thisRequestId,\n                            service: service,\n                            method: method,\n                            parameters: args\n                        });\n                    })\n                onCancel(function() {\n                    var request = cleanRequest(thisRequestId);\n                    if (request) {\n                        $nodeInDom.trigger('dataRequestCancel', {\n                            requestId: thisRequestId\n                        });\n                    }\n                })\n            });\n\n        return promise;\n    }\n    withDataRequest.dataRequest = _.partial(dataRequestFromNode, document);\n\n    return withDataRequest;\n\n\n    function withDataRequest() {\n\n        if (!('dataRequest' in this)) {\n            this.dataRequest = function(service, method /*, args */) {\n                Array.prototype.splice.call(arguments, 0, 0, this.$node);\n                return dataRequestFromNode.apply(this, arguments);\n            }\n        }\n    }\n});\n"]}
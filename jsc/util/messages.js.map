{"version":3,"sources":["../../js/util/messages.js"],"names":["define","messages","DEBUG_MESSAGES","localStorage","getItem","e","console","error","ignoreWarning","key","args","Array","prototype","slice","call","arguments","shift","length","replace","m","index","parseInt"],"mappings":"AACAA,OAAO,CACH,kDADG,CAAP,CAEG,SAASC,QAAT,CAAmB,CAClB,aAIA,GAAIC,gBAAiB,KAArB,CACA,GAAI,CACA,GAAI,SAAWC,aAAaC,OAAb,CAAqB,WAArB,CAAf,CAAkD,CAC9CF,eAAiB,IAAjB,CACH,CACJ,CAAC,MAAMG,CAAN,CAAS,CACPC,QAAQC,KAAR,CAAcF,CAAd,EACH,CAiCD,MAAO,UAASG,aAAT,CAAwBC,GAAxB,CAA0C,CAC7C,GAAIC,MAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX,CACA,GAAIP,gBAAkB,IAAtB,CAA4B,CACxBE,KAAKM,KAAL,GACH,CAFD,IAEO,CACHR,cAAgB,KAAhB,CACH,CAEDC,IAAMC,KAAK,CAAL,CAAN,CAEA,GAAIR,cAAJ,CAAoB,CAChB,MAAOO,IAAP,CACH,CAED,GAAIA,MAAOR,SAAX,CAAqB,CACjB,GAAIS,KAAKO,MAAL,GAAgB,CAApB,CAAuB,CACnB,MAAOhB,UAASQ,GAAT,CAAP,CACH,CAEDC,KAAKM,KAAL,GACA,MAAOf,UAASQ,GAAT,EAAcS,OAAd,CAAsB,YAAtB,CAAoC,SAASC,CAAT,CAAY,CACnD,GAAIC,OAAQC,SAASF,EAAE,CAAF,CAAT,CAAe,EAAf,CAAZ,CACA,MAAOT,MAAKU,KAAL,CAAP,CACH,CAHM,CAAP,CAIH,CAED,GAAIZ,aAAJ,CAAmB,CACf,OACH,CAFD,IAEO,CACHF,QAAQC,KAAR,CAAc,oBAAd,CAAoCE,GAApC,EACH,CACD,MAAOA,IAAP,CACH,CAhCD,CAiCH,CAhFD","file":"messages.js","sourcesContent":["\ndefine([\n    'util/requirejs/promise!./service/messagesPromise'\n], function(messages) {\n    'use strict';\n\n    // Set to true to not replace messages and just\n    // show keys to debug keys that are hard-coded\n    var DEBUG_MESSAGES = false;\n    try {\n        if ('true' === localStorage.getItem('i18nDebug')) {\n            DEBUG_MESSAGES = true;\n        }\n    } catch(e) {\n        console.error(e);\n    }\n\n    /**\n     * Use message bundles to convert keys to internationalized values.\n     *\n     * Use `registerMessageBundle` in web plugin to register custom bundles.\n     *\n     * Tokens can be placed in message values of the form: `{n}`, where `n` is\n     * the argument number to replace.\n     *\n     * <div class=\"warning\">\n     * Will display console warning if key doesn't exist\n     * </div>\n     *\n     * @global\n     * @name i18n\n     * @function\n     * @param {string} key The key to lookup\n     * @param {...string} args The arguments to replace in the value\n     * @return {string} The string\n     * @example <caption>Message Bundle Properties</caption>\n     * openlumify.help.logout=Logout\n     * openlumify.offline_overlay.last_check=Last checked {0}\n     * @example <caption>Handlebars Template</caption>\n     * {{ i18n 'openlumify.help.logout' }}\n     * {{ i18n 'openlumify.offline_overlay.last_check', date }}\n     * @example <caption>JavaScript Usage</caption>\n     * i18n('openlumify.help.logout')\n     * // => Logout of OpenLumify\n     *\n     * i18n('openlumify.offline_overlay.last_check', new Date().toString())\n     * // => Last checked 2017-02-09T18:29:47.333Z\n     */\n    return function(ignoreWarning, key/**, args **/) {\n        var args = Array.prototype.slice.call(arguments);\n        if (ignoreWarning === true) {\n            args.shift();\n        } else {\n            ignoreWarning = false;\n        }\n\n        key = args[0];\n\n        if (DEBUG_MESSAGES) {\n            return key;\n        }\n\n        if (key in messages) {\n            if (args.length === 1) {\n                return messages[key];\n            }\n\n            args.shift();\n            return messages[key].replace(/\\{(\\d+)\\}/g, function(m) {\n                var index = parseInt(m[1], 10);\n                return args[index];\n            });\n        }\n\n        if (ignoreWarning) {\n            return;\n        } else {\n            console.error('No message for key', key);\n        }\n        return key;\n    };\n});\n"]}
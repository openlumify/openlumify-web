{"version":3,"sources":["../../js/util/acl.js"],"names":["define","withDataRequest","ACL_ALLOW_ALL","addable","updateable","deleteable","getPropertyAcls","element","elements","Array","isArray","Promise","map","propertiesPromise","type","dataRequest","conceptType","label","then","elementsProperties","ontologyProperties","_","chain","properties","list","flatten","uniq","p","title","value","mergeElementPropertyAcls","ontologyPropertiesToAclProperties","property","key","name","propertyAcls","forEach","e","acl","elementPropertyAcl","matchIndex","findIndex","push","extend","findPropertyAcl","propertiesAcl","propName","propKey","props","where","length","propsByName","Error"],"mappings":"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","file":"acl.js","sourcesContent":["define([\n    'util/withDataRequest'\n], function(withDataRequest) {\n    'use strict';\n\n    const ACL_ALLOW_ALL = {\n        addable: true,\n        updateable: true,\n        deleteable: true\n    };\n\n    return {\n        getPropertyAcls: function(element) {\n            const elements = Array.isArray(element) ? element : [element];\n\n            return Promise.map(elements, (element) => {\n                    let propertiesPromise = [];\n\n                    if (element.type === 'vertex') {\n                        propertiesPromise = withDataRequest.dataRequest('ontology', 'propertiesByConceptId', element.conceptType);\n                    } else {\n                        propertiesPromise = withDataRequest.dataRequest('ontology', 'propertiesByRelationship', element.label);\n                    }\n\n                    return propertiesPromise;\n                })\n                .then((elementsProperties) => {\n                    const ontologyProperties = _.chain(elementsProperties)\n                        .map((properties) => properties.list)\n                        .flatten()\n                        .uniq((p) => p.title)\n                        .value();\n\n                    return mergeElementPropertyAcls(\n                        ontologyPropertiesToAclProperties(ontologyProperties)\n                    );\n                })\n\n            function ontologyPropertiesToAclProperties(properties) {\n                return properties.map(function(property) {\n                    return {\n                        key: null,\n                        name: property.title,\n                        addable: property.addable,\n                        updateable: property.updateable,\n                        deleteable: property.deleteable\n                    };\n                });\n            }\n\n            function mergeElementPropertyAcls(propertyAcls) {\n                elements.forEach(function (e) {\n                    e.acl.propertyAcls.forEach(function (elementPropertyAcl) {\n                        var matchIndex = propertyAcls.findIndex((p) => {\n                            let key = elementPropertyAcl.key || null;\n                            return p.name === elementPropertyAcl.name && p.key === key;\n                        });\n                        if (matchIndex < 0) {\n                            propertyAcls.push(elementPropertyAcl);\n                        } else {\n                            propertyAcls[matchIndex] = _.extend(propertyAcls[matchIndex], elementPropertyAcl);\n                        }\n                    });\n                });\n\n                return propertyAcls;\n            }\n        },\n\n        findPropertyAcl: function(propertiesAcl, propName, propKey) {\n            var props = _.where(propertiesAcl, {name: propName, key: propKey});\n            if (props.length === 0) {\n                var propsByName = _.where(propertiesAcl, { name: propName, key: null });\n                if (propsByName.length === 0) {\n                    propsByName.push({ name: propName, key: propKey, ...ACL_ALLOW_ALL });\n                }\n                props = propsByName;\n            }\n            if (props.length !== 1) {\n                throw new Error('more than one ACL property with the same name defined \"' + propName + ':' + propKey + '\" length: ' + props.length);\n            }\n            return props[0];\n        }\n    };\n});\n"]}
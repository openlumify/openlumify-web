{"version":3,"sources":["../../js/util/dnd.js"],"names":["define","F","FALLBACK_PREFIX","supportsMultipleTypes","checkIfSupportsMultipleTypes","dataTransfer","undefined","setData","data","getData","e","name","dataTransferHasValidMimeType","mimeTypes","_","any","types","includes","type","text","startsWith","VISALLO_MIMETYPES","ELEMENTS","setDataTransferWithElements","vertexIds","edgeIds","elements","typeToData","segmentToTypes","each","effectAllowed","Promise","all","require","openlumifyData","storePromise","spread","actions","store","dispatch","setFocus","elementIds","getElementsFromDataTransfer","dataStr","indexOf","substring","length","JSON","parse","hasFullElements","forEach","id","elementType","push","elementId","url","vertexUrl","concat","currentWorkspaceId","plain","map","vertex","title","item","join","stringify"],"mappings":"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","file":"dnd.js","sourcesContent":["define(['util/vertex/formatters'], function(F) {\n\n    const FALLBACK_PREFIX = 'OpenLumify_ElementIds: ';\n    let supportsMultipleTypes;\n    // IE doesn't support setData([mimetype], ...), it only supports setData('text', ...)\n    const checkIfSupportsMultipleTypes = (dataTransfer) => {\n        if (supportsMultipleTypes !== undefined) {\n            return supportsMultipleTypes;\n        } else {\n            try {\n                dataTransfer.setData('CHECK_ALLOWS_MANY_TYPES', 'true')\n                const data = dataTransfer.getData('CHECK_ALLOWS_MANY_TYPES')\n\n                if (data) {\n                    supportsMultipleTypes = true;\n                }\n                return true;\n            } catch(e) {\n                //Firefox throws exception on setData() for a read-only dataTransfer (from a drop event)\n                if (e.name === 'NoModificationAllowedError') {\n                    return true;\n                } else {\n                    supportsMultipleTypes = false;\n                    return false;\n                }\n            }\n        }\n    }\n\n    return {\n        dataTransferHasValidMimeType(dataTransfer, mimeTypes = []) {\n            if (checkIfSupportsMultipleTypes(dataTransfer)) {\n                return _.any(dataTransfer.types, type => mimeTypes.includes(type));\n            } else {\n                const text = dataTransfer.getData('Text');\n                return text && text.startsWith(FALLBACK_PREFIX) && mimeTypes.includes(VISALLO_MIMETYPES.ELEMENTS);\n            }\n        },\n        setDataTransferWithElements(dataTransfer, { vertexIds, edgeIds, elements = [] }) {\n            const typeToData = segmentToTypes(vertexIds, edgeIds, elements);\n            if (checkIfSupportsMultipleTypes(dataTransfer)) {\n                _.each(typeToData, (data, type) => {\n                    if (data) {\n                        dataTransfer.setData(type, data);\n                    }\n                })\n            } else {\n                dataTransfer.setData('Text', FALLBACK_PREFIX + typeToData[VISALLO_MIMETYPES.ELEMENTS])\n            }\n            dataTransfer.effectAllowed = 'all';\n\n            Promise.all([\n                Promise.require('data/web-worker/store/element/actions'),\n                openlumifyData.storePromise\n            ]).spread((actions, store) => store.dispatch(actions.setFocus({ elementIds: [] })));\n        },\n        getElementsFromDataTransfer(dataTransfer) {\n            var dataStr;\n            if (checkIfSupportsMultipleTypes(dataTransfer)) {\n                dataStr = dataTransfer.getData(VISALLO_MIMETYPES.ELEMENTS);\n            } else {\n                const text = dataTransfer.getData('Text');\n                if (text && text.indexOf(FALLBACK_PREFIX) === 0) {\n                    dataStr = text.substring(FALLBACK_PREFIX.length);\n                }\n            }\n\n            if (dataStr) {\n                return JSON.parse(dataStr);\n            }\n        }\n    }\n\n    function segmentToTypes(vertexIds = [], edgeIds = [], elements) {\n        const hasFullElements = elements.length > 0;\n        if (hasFullElements) {\n            vertexIds = [];\n            edgeIds = [];\n            elements.forEach(({ id, type }) => {\n                if (type === 'extendedDataRow') {\n                    if (id.elementType === 'VERTEX') {\n                        vertexIds.push(id.elementId);\n                    } else {\n                        edgeIds.push(id.elementId);\n                    }\n                } else if (type === 'vertex') {\n                    vertexIds.push(id);\n                } else {\n                    edgeIds.push(id);\n                }\n            })\n        }\n        const url = F.vertexUrl.url(hasFullElements ? elements : vertexIds.concat(edgeIds), openlumifyData.currentWorkspaceId);\n        const plain = hasFullElements ?\n            elements.map(item => [\n                F.vertex.title(item), F.vertexUrl.url([item], openlumifyData.currentWorkspaceId)\n            ].join('\\n')).join('\\n\\n') :\n            url\n\n        return {\n            'text/uri-list': url,\n            'text/plain': plain,\n            'Text': plain,\n            [VISALLO_MIMETYPES.ELEMENTS]: JSON.stringify({ vertexIds, edgeIds })\n        }\n    }\n})\n"]}
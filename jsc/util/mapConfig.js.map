{"version":3,"sources":["../../js/util/mapConfig.js"],"names":["define","config","getTilePropsFromConfiguration","getOptions","providerName","obj","prefix","options","_","chain","pick","val","key","indexOf","tap","o","pairs","map","value","test","parseFloat","JSON","parse","replace","object","e","console","error","source","sourceOptions","warn","osmURL","split","trim","urlKey","params","layers"],"mappings":"yxBAAAA,OAAO,CAAC,oDAAD,CAAP,CAA+D,SAASC,MAAT,CAAiB,CAC5E,aAEA,MAAOC,8BAAP,CAEA,QAASA,8BAAT,EAAyC,CACrC,GAAMC,YAAa,QAAbA,WAAa,CAASC,YAAT,CAAuB,CACtC,GAAI,CACA,GAAIC,IAAJ,CACIC,uBAAyBF,YAAzB,IADJ,CAEIG,QAAUC,EAAEC,KAAF,CAAQR,MAAR,EACTS,IADS,CACJ,SAACC,GAAD,CAAMC,GAAN,QAAcA,KAAIC,OAAJ,iBAA4BT,YAA5B,QAAiD,CAA/D,EADI,EAETU,GAFS,CAEL,WAAK,CAAET,IAAMU,CAAN,CAAS,CAFX,EAGTC,KAHS,GAITC,GAJS,CAIL,cAAkB,kCAAhBL,GAAgB,UAAXM,KAAW,UACnB,GAAI,YAAYC,IAAZ,CAAiBD,KAAjB,CAAJ,CAA6B,CACzBA,MAAQE,WAAWF,KAAX,CAAkB,EAAlB,CAAR,CACH,CAFD,IAEO,IAAK,gBAAD,CAAmBC,IAAnB,CAAwBD,KAAxB,CAAJ,CAAoC,CACvCA,MAAQA,QAAU,MAAlB,CACH,CAFM,IAEA,IAAK,cAAD,CAAiBC,IAAjB,CAAsBD,KAAtB,GAAiC,cAAD,CAAiBC,IAAjB,CAAsBD,KAAtB,CAApC,CAAkE,CACrEA,MAAQG,KAAKC,KAAL,CAAWJ,KAAX,CAAR,CACH,CACD,MAAO,CAACN,IAAIW,OAAJ,CAAYjB,MAAZ,CAAoB,EAApB,CAAD,CAA0BY,KAA1B,CAAP,CACH,CAbS,EAcTM,MAdS,GAeTN,KAfS,EAFd,CAkBA,MAAOX,QAAP,CACH,CAAC,MAAMkB,CAAN,CAAS,CACPC,QAAQC,KAAR,CAAiBrB,MAAjB,wCAA+DD,GAA/D,EACA,KAAMoB,EAAN,CACH,CACJ,CAzBD,CA2BA,GAAIG,QAAS3B,OAAO,cAAP,GAA0B,KAAvC,CACA,GAAI4B,cAAJ,CAEA,GAAID,SAAW,QAAf,CAAyB,CACrBF,QAAQI,IAAR,CAAa,iFAAb,EACAF,OAAS,KAAT,CACH,CAED,GAAIA,SAAW,KAAf,CAAsB,CAElB,GAAIG,QAAS9B,OAAO,sBAAP,CAAb,CACA,GAAI8B,QAAUA,OAAOlB,OAAP,CAAe,GAAf,GAAuB,CAArC,CAAwC,CACpCa,QAAQI,IAAR,CAAa,4FAAb,EACAJ,QAAQI,IAAR,CAAa,mEAAb,EACA7B,OAAO,sBAAP,EAAiC8B,OAAOC,KAAP,CAAa,GAAb,EAAkB,CAAlB,EAAqBC,IAArB,GAA4BV,OAA5B,CAAoC,SAApC,CAA+C,GAA/C,CAAjC,CACH,CACDM,cAAgB1B,WAAW,KAAX,CAAhB,CACAyB,OAAS,KAAT,CACH,CAVD,IAUO,IAAIA,SAAW,cAAf,CAA+B,CAClC,GAAIM,QAAS,+BAAb,CAGA,GAAIjC,OAAOiC,MAAP,CAAJ,CAAoB,CAChBjC,OAAOiC,MAAP,EAAiBjC,OAAOiC,MAAP,EAAeX,OAAf,CAAuB,yBAAvB,CAAkD,EAAlD,CAAjB,CACH,CACDM,wBAAkBM,OAAQ,CAAEC,OAAQ,YAAV,CAA1B,EAAuDjC,WAAWyB,MAAX,CAAvD,EACAA,OAAS,gBAAT,CACH,CATM,IASA,CACHC,cAAgB1B,WAAWyB,MAAX,CAAhB,CACH,CAED,MAAO,CAAEA,aAAF,CAAUC,2BAAV,CAAP,CACH,CACJ,CAlED","file":"mapConfig.js","sourcesContent":["define(['util/requirejs/promise!./service/propertiesPromise'], function(config) {\n    'use strict';\n\n    return getTilePropsFromConfiguration;\n\n    function getTilePropsFromConfiguration() {\n        const getOptions = function(providerName) {\n            try {\n                var obj,\n                    prefix = `map.provider.${providerName}.`,\n                    options = _.chain(config)\n                    .pick((val, key) => key.indexOf(`map.provider.${providerName}.`) === 0)\n                    .tap(o => { obj = o })\n                    .pairs()\n                    .map(([key, value]) => {\n                        if (/^[\\d.-]+$/.test(value)) {\n                            value = parseFloat(value, 10);\n                        } else if ((/^(true|false)$/).test(value)) {\n                            value = value === 'true'\n                        } else if ((/^\\[[^\\]]+\\]$/).test(value) || (/^\\{[^\\}]+\\}$/).test(value)) {\n                            value = JSON.parse(value)\n                        }\n                        return [key.replace(prefix, ''), value]\n                    })\n                    .object()\n                    .value()\n                return options;\n            } catch(e) {\n                console.error(`${prefix} options could not be parsed. input:`, obj)\n                throw e;\n            }\n        };\n\n        var source = config['map.provider'] || 'osm';\n        var sourceOptions;\n\n        if (source === 'google') {\n            console.warn('google map.provider is no longer supported, switching to OpenStreetMap provider');\n            source = 'osm';\n        }\n\n        if (source === 'osm') {\n            // Legacy configs accepted csv urls, warn and pick first\n            var osmURL = config['map.provider.osm.url'];\n            if (osmURL && osmURL.indexOf(',') >= 0) {\n                console.warn('Comma-separated Urls not supported, using first url. Use urls with {a-c} for multiple CDNS');\n                console.warn('For Example: https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png');\n                config['map.provider.osm.url'] = osmURL.split(',')[0].trim().replace(/[$][{]/g, '{');\n            }\n            sourceOptions = getOptions('osm');\n            source = 'OSM';\n        } else if (source === 'ArcGIS93Rest') {\n            var urlKey = 'map.provider.ArcGIS93Rest.url';\n            // New OL3 ArcGIS Source will throw an error if url doesn't end\n            // with [Map|Image]Server\n            if (config[urlKey]) {\n                config[urlKey] = config[urlKey].replace(/\\/export(Image)?\\/?\\s*$/, '');\n            }\n            sourceOptions = { params: { layers: 'show:0,1,2' }, ...getOptions(source) };\n            source = 'TileArcGISRest'\n        } else {\n            sourceOptions = getOptions(source)\n        }\n\n        return { source, sourceOptions };\n    }\n});\n\n"]}
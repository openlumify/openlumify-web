{"version":3,"sources":["../../../../js/util/visibility/default/edit.js"],"names":["define","defineComponent","DefaultEditor","defaultAttrs","fieldSelector","placeholder","i18n","after","$node","html","$","attr","trim","_","isUndefined","value","prop","readonly","on","onClear","onChange","event","data","select","val","valid","checkValid","trigger","visibilities","replace","split","authorizations","openlumifyData","currentUser","length","difference"],"mappings":"AAAAA,OAAO,CACH,sBADG,CAAP,CAEG,SAASC,eAAT,CAA0B,CACzB,aAEA,MAAOA,iBAAgBC,aAAhB,CAAP,CAWA,QAASA,cAAT,EAAyB,CAErB,KAAKC,YAAL,CAAkB,CACdC,cAAe,OADD,CAEdC,YAAaC,KAAK,kBAAL,CAFC,CAAlB,EAKA,KAAKC,KAAL,CAAW,YAAX,CAAyB,UAAW,CAChC,KAAKC,KAAL,CAAWC,IAAX,CACIC,EAAE,SAAF,EACKC,IADL,CACU,aADV,CACyB,KAAKA,IAAL,CAAUN,WADnC,EAEKM,IAFL,CAEU,MAFV,CAEkB,MAFlB,EAGKA,IAHL,CAGU,OAHV,CAGmBD,EAAEE,IAAF,CAAOC,EAAEC,WAAF,CAAc,KAAKH,IAAL,CAAUI,KAAxB,EAAiC,EAAjC,CAAsC,KAAKJ,IAAL,CAAUI,KAAvD,CAHnB,EAIKC,IAJL,CAIU,UAJV,CAIsB,KAAKL,IAAL,CAAUM,QAJhC,CADJ,EAQA,KAAKC,EAAL,CAAQ,iBAAR,CAA2B,KAAKC,OAAhC,EACA,KAAKD,EAAL,CAAQ,oBAAR,CAA8B,CAC1Bd,cAAe,KAAKgB,QADM,CAA9B,EAIA,KAAKA,QAAL,GACH,CAfD,EAqBA,KAAKD,OAAL,CAAe,SAASE,KAAT,CAAgBC,IAAhB,CAAsB,CACjC,KAAKC,MAAL,CAAY,eAAZ,EAA6BC,GAA7B,CAAiC,EAAjC,EACH,CAFD,CAIA,KAAKJ,QAAL,CAAgB,SAASC,KAAT,CAAgBC,IAAhB,CAAsB,CAClC,GAAIP,OAAQL,EAAEE,IAAF,CAAO,KAAKW,MAAL,CAAY,eAAZ,EAA6BC,GAA7B,EAAP,CAAZ,CACA,GAAIC,OAAQ,KAAKC,UAAL,CAAgBX,KAAhB,CAAZ,CASA,KAAKY,OAAL,CAAa,kBAAb,CAAiC,CAC7BZ,MAAOA,KADsB,CAE7BU,MAAOA,KAFsB,CAAjC,EAIH,CAfD,CAiBA,KAAKC,UAAL,CAAkB,SAASX,KAAT,CAAgB,CAC9B,GAAIa,cAAeb,MAAMc,OAAN,CAAc,QAAd,CAAwB,EAAxB,EAA4BC,KAA5B,CAAkC,QAAlC,CAAnB,CACA,GAAIC,gBAAiBC,eAAeC,WAAf,CAA2BF,cAAhD,CAEA,MAAO,CAAChB,MAAMmB,MAAP,EAAiB,CAACrB,EAAEsB,UAAF,CAAaP,YAAb,CAA2BG,cAA3B,EAA2CG,MAApE,CACH,CALD,CAMH,CACJ,CAxED","file":"edit.js","sourcesContent":["define([\n    'flight/lib/component'\n], function(defineComponent) {\n    'use strict';\n\n    return defineComponent(DefaultEditor);\n\n    /**\n     * @typedef org.openlumify.visibility~Editor\n     * @property {string} [value] The visibility source to prepopulate the editor\n     * @property {string} [placeholder] The placeholder text to display when no\n     * value\n     * @property {string} [readonly] Show the form in read-only mode\n     * @listens org.openlumify.visibility#visibilityclear\n     * @fires org.openlumify.visibility#visibilitychange\n     */\n    function DefaultEditor() {\n\n        this.defaultAttrs({\n            fieldSelector: 'input',\n            placeholder: i18n('visibility.label')\n        })\n\n        this.after('initialize', function() {\n            this.$node.html(\n                $('<input>')\n                    .attr('placeholder', this.attr.placeholder)\n                    .attr('type', 'text')\n                    .attr('value', $.trim(_.isUndefined(this.attr.value) ? '' : this.attr.value))\n                    .prop('readonly', this.attr.readonly)\n            );\n\n            this.on('visibilityclear', this.onClear);\n            this.on('change keyup paste', {\n                fieldSelector: this.onChange\n            });\n\n            this.onChange();\n        });\n\n        /**\n         * Reset the form\n         * @event org.openlumify.visibility#visibilityclear\n         */\n        this.onClear = function(event, data) {\n            this.select('fieldSelector').val('');\n        };\n\n        this.onChange = function(event, data) {\n            var value = $.trim(this.select('fieldSelector').val());\n            var valid = this.checkValid(value);\n            /**\n             * The user has adjusted the visibility so notify\n             *\n             * @event org.openlumify.visibility#visibilitychange\n             * @param {object} data\n             * @param {string} data.value The new visibility value\n             * @param {boolean} data.valid Whether the value is valid\n             */\n            this.trigger('visibilitychange', {\n                value: value,\n                valid: valid\n            });\n        };\n\n        this.checkValid = function(value) {\n            var visibilities = value.replace(/\\(|\\)/g, '').split(/\\&|\\|/g);\n            var authorizations = openlumifyData.currentUser.authorizations;\n\n            return !value.length || !_.difference(visibilities, authorizations).length;\n        };\n    }\n});\n"]}
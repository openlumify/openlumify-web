{"version":3,"sources":["../../../../js/detail/text/popover/TermList.jsx"],"names":["define","createReactClass","PropTypes","Term","Alert","TermList","propTypes","terms","array","isRequired","render","props","selection","rest","transformed","map","termMentionFor","term","resolvedToEdgeId","resolvedToVertexId","resolved","type","order","sorted","_","sortBy","indexOf","splice","id","refId","length","onMouseLeave","onHoverTerm","i18n"],"mappings":"qaAAAA,OAAO,CACH,oBADG,CAEH,YAFG,CAGH,QAHG,CAIH,kBAJG,CAAP,CAKG,SAASC,gBAAT,CAA2BC,SAA3B,CAAsCC,IAAtC,CAA4CC,KAA5C,CAAmD,CAElD,GAAMC,UAAWJ,iBAAiB,wBAC9BK,UAAW,CACPC,MAAOL,UAAUM,KAAV,CAAgBC,UADhB,CADmB,CAI9BC,MAJ8B,kBAIrB,2BACiC,KAAKC,KADtC,CACGC,SADH,QACGA,SADH,CACcL,KADd,QACcA,KADd,CACwBM,IADxB,wDAGL,GAAMC,aAAcP,MAAMQ,GAAN,CAAU,cAAQ,IAC1BC,eAD0B,CAC+BC,IAD/B,CAC1BD,cAD0B,CACVE,gBADU,CAC+BD,IAD/B,CACVC,gBADU,CACQC,kBADR,CAC+BF,IAD/B,CACQE,kBADR,CAElC,GAAMC,UAAWD,oBAAsBD,gBAAvC,CACA,GAAIG,YAAJ,CACA,GAAID,QAAJ,CAAcC,KAAO,UAAP,CAAd,IACK,IAAIL,cAAJ,CAAoBK,KAAO,eAAP,CAApB,IACAA,MAAO,YAAP,CACL,mBAAYJ,IAAZ,EAAkBI,SAAlB,GACH,CARmB,CAApB,CASA,GAAMC,OAAQ,CAAC,UAAD,CAAa,YAAb,CAA2B,eAA3B,CAAd,CACA,GAAMC,QAASC,EAAEC,MAAF,CAASX,WAAT,CAAsB,kBAAGO,KAAH,MAAGA,IAAH,OAAcC,OAAMI,OAAN,CAAcL,IAAd,CAAd,EAAtB,CAAf,CAEA,GAAIT,SAAJ,CAAe,CACXW,OAAOI,MAAP,CAAc,CAAd,CAAiB,CAAjB,aACOf,SADP,EAEIS,KAAM,WAFV,CAGIO,GAAI,WAHR,CAIIC,MAAO,IAJX,IAMH,CAED,GAAIN,OAAOO,MAAX,CAAmB,CACf,MACI,2BAAI,aAAc,KAAKC,YAAvB,EACMR,OAAOR,GAAP,CAAW,qBAAQ,qBAAC,IAAD,WAAM,IAAKE,KAAKW,EAAhB,CAAoB,YAAa,MAAKI,WAAtC,CAAmD,KAAMf,IAAzD,EAAmEJ,IAAnE,EAAR,EAAX,CADN,CADJ,CAKH,CAED,MAAO,qBAAC,KAAD,EAAO,MAAOoB,KAAK,8BAAL,CAAd,EAAP,CACH,CArC6B,CAsC9BD,WAtC8B,sBAsClBJ,EAtCkB,CAsCd,CACZ,KAAKjB,KAAL,CAAWqB,WAAX,CAAuBJ,EAAvB,EACH,CAxC6B,CAyC9BG,YAzC8B,wBAyCf,CACX,KAAKpB,KAAL,CAAWqB,WAAX,GACH,CA3C6B,CAAjB,CAAjB,CA8CA,MAAO3B,SAAP,CACH,CAtDD","file":"TermList.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    './Term',\n    'components/Alert'\n], function(createReactClass, PropTypes, Term, Alert) {\n\n    const TermList = createReactClass({\n        propTypes: {\n            terms: PropTypes.array.isRequired\n        },\n        render() {\n            const { selection, terms, ...rest } = this.props;\n\n            const transformed = terms.map(term => {\n                const { termMentionFor, resolvedToEdgeId, resolvedToVertexId } = term;\n                const resolved = resolvedToVertexId && resolvedToEdgeId;\n                let type;\n                if (resolved) type = 'resolved';\n                else if (termMentionFor) type = 'justification';\n                else type = 'suggestion';\n                return { ...term, type };\n            })\n            const order = ['resolved', 'suggestion', 'justification'];\n            const sorted = _.sortBy(transformed, ({ type }) => order.indexOf(type));\n\n            if (selection) {\n                sorted.splice(0, 0, {\n                    ...selection,\n                    type: 'selection',\n                    id: 'selection',\n                    refId: null\n                })\n            }\n\n            if (sorted.length) {\n                return (\n                    <ul onMouseLeave={this.onMouseLeave}>\n                        { sorted.map(term => <Term key={term.id} onHoverTerm={this.onHoverTerm} term={term} {...rest} />) }\n                    </ul>\n                )\n            }\n\n            return <Alert error={i18n('detail.text.terms.list.error')}/>\n        },\n        onHoverTerm(id) {\n            this.props.onHoverTerm(id);\n        },\n        onMouseLeave() {\n            this.props.onHoverTerm();\n        }\n    });\n\n    return TermList;\n});\n"]}
{"version":3,"sources":["../../js/data/withDataRequestHandler.js"],"names":["define","CACHES","ontology","FAST_PASSED","withDataRequestHandler","fixParameter","obj","FileList","_","map","o","deferred","resolve","reject","promise","Promise","f","r","checkForFastPass","message","path","originalRequest","service","method","result","concepts","wrap","properties","relationships","paths","wrappedObj","Object","keys","forEach","defineProperty","key","get","latest","p","enumerable","after","on","handleDataRequest","handleDataRequestCancel","openlumifyData","readyForDataRequests","trigger","event","data","pick","parameters","l","localStorage","language","getItem","country","variant","push","type","fastPassNoWorker","worker","postMessage","dataRequestCompleted","dataRequestProgress","self","then","requestId","ontologyPath","existing","ontologyPromise","fulfill","onOntologyUpdated","off","completed","success","refreshOntology","dataRequestPromise","dr","dataRequestFastPassClear","ontologyCleared","indexOf","ontologyRequest"],"mappings":"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","file":"withDataRequestHandler.js","sourcesContent":["define([], function() {\n    'use strict';\n\n    var CACHES = {\n        ontology: null\n    };\n    var FAST_PASSED = {\n        'ontology/ontology': null,\n        'ontology/properties': null,\n        'ontology/relationships': null,\n        'config/properties': null,\n        'config/messages': null\n    };\n\n    return withDataRequestHandler;\n\n    function fixParameter(obj) {\n        if (obj instanceof FileList) {\n            return _.map(obj, function(o) {\n                return o;\n            });\n        }\n\n        return obj;\n    }\n\n    function deferred() {\n        var resolve, reject, promise = new Promise((f, r) => { resolve = f; reject = r; });\n        return { promise, resolve, reject };\n    }\n\n\n    function checkForFastPass(message) {\n        var path = message.originalRequest.service + '/' + message.originalRequest.method;\n        if (FAST_PASSED[path]) {\n\n            // Wrap ontology objects with getter that uses the latest ontology\n            if (path === 'ontology/ontology') {\n                CACHES.ontology = message.result;\n                message.result = {\n                    concepts: wrap(CACHES.ontology.concepts, 'ontology', 'concepts'),\n                    properties: wrap(CACHES.ontology.properties, 'ontology', 'properties'),\n                    relationships: wrap(CACHES.ontology.relationships, 'ontology', 'relationships')\n                };\n            }\n            FAST_PASSED[path].resolve(message);\n        }\n    }\n\n    function wrap(obj, ...paths) {\n        var wrappedObj = {};\n        Object.keys(obj).forEach(key => {\n            Object.defineProperty(wrappedObj, key, {\n                get: function() {\n                    var latest = CACHES;\n                    paths.forEach(p => {\n                        latest = latest[p];\n                    })\n                    return latest[key];\n                },\n                enumerable: true\n            });\n        })\n        return wrappedObj;\n    }\n\n    function withDataRequestHandler() {\n\n        this.after('initialize', function() {\n            this.on('dataRequest', this.handleDataRequest);\n            this.on('dataRequestCancel', this.handleDataRequestCancel);\n            this.openlumifyData.readyForDataRequests = true;\n            this.trigger('readyForDataRequests');\n        });\n\n        this.handleDataRequestCancel = function(event, data) {\n            // TODO\n            //this.worker.postMessage({\n                //type: 'cancelDataRequest',\n                //data: data\n            //});\n        };\n\n        this.handleDataRequest = function(event, data) {\n            this.trigger('dataRequestStarted', _.pick(data, 'requestId'));\n\n            if (data.parameters) {\n                data.parameters = _.map(data.parameters, fixParameter);\n            }\n            if (data && data.service === 'config') {\n                var l = {};\n                if (typeof localStorage !== 'undefined') {\n                    l.language = localStorage.getItem('language');\n                    l.country = localStorage.getItem('country');\n                    l.variant = localStorage.getItem('variant');\n                    data.parameters.push(l);\n                }\n            }\n            var message = { type: event.type, data };\n\n            if (!this.fastPassNoWorker(message)) {\n                this.worker.postMessage(message);\n            }\n        };\n\n        this.dataRequestCompleted = function(message) {\n            checkForFastPass(message);\n            this.trigger(message.type, message);\n        };\n\n        this.dataRequestProgress = function(message) {\n            this.trigger(message.type, message);\n        };\n\n        this.fastPassNoWorker = function(message) {\n            const self = this;\n            const path = message.data.service + '/' + message.data.method;\n            if (path in FAST_PASSED) {\n                if (FAST_PASSED[path]) {\n                   FAST_PASSED[path].promise.then(r => {\n                       this.trigger(r.type, { ...r, requestId: message.data.requestId });\n                   })\n                   return true;\n                } else {\n\n                    // Special case check for properties/relationship request and\n                    // resolve using ontology if already requested\n                    if (message.data.service === 'ontology' && (\n                    message.data.method === 'properties' || message.data.method === 'relationships'\n                    )) {\n                        const ontologyPath = 'ontology/ontology';\n                        const existing = FAST_PASSED[ontologyPath] && FAST_PASSED[ontologyPath].promise;\n                        let ontologyPromise;\n                        if (existing) {\n                            ontologyPromise = new Promise((fulfill) => {\n                                this.on('ontologyUpdated', onOntologyUpdated);\n\n                                Promise.resolve(existing).then(result => {\n                                    this.off('ontologyUpdated', onOntologyUpdated);\n                                    fulfill(result);\n                                });\n\n                                function onOntologyUpdated(event, data) {\n                                    self.off('ontologyUpdated', onOntologyUpdated);\n\n                                    const completed = {\n                                        success: true,\n                                        type: 'dataRequestCompleted',\n                                        result: data.ontology,\n                                        originalRequest: {\n                                            method: 'ontology',\n                                            service: 'ontology',\n                                            parameters: []\n                                        }\n                                    };\n\n                                    fulfill(completed);\n                                }\n                            })\n                        } else {\n                            ontologyPromise = this.refreshOntology();\n                        }\n\n                        Promise.resolve(ontologyPromise).then(r => {\n                            this.trigger(r.type, {\n                                ...r,\n                                result: r.result[message.data.method],\n                                requestId: message.data.requestId\n                            });\n                        })\n                        return true;\n                    }\n                    FAST_PASSED[path] = deferred();\n                }\n            }\n            return false;\n        }\n\n        this.refreshOntology = function() {\n            return this.dataRequestPromise\n                .then(dr => dr('ontology', 'ontology'))\n                .then(ontology => {\n                    return FAST_PASSED['ontology/ontology'].promise;\n                });\n        };\n\n        this.dataRequestFastPassClear = function(message) {\n            var ontologyCleared = false;\n            message.paths.forEach(function(path) {\n                ontologyCleared = ontologyCleared || (path.indexOf('ontology') === 0)\n                FAST_PASSED[path] = null;\n            })\n\n            if (ontologyCleared) {\n                this.refreshOntology().then(ontologyRequest => {\n                    /**\n                     * Triggered when the ontology is modified, either by changing the\n                     * case or something was published.\n                     *\n                     * Listen to this event to be notified and update views\n                     * that might be using the ontology.\n                     *\n                     * @global\n                     * @event ontologyUpdated\n                     * @property {object} data\n                     * @property {object} data.ontology\n                     * @example <caption>From Flight</caption>\n                     * this.on(document, 'ontologyUpdated', function(event, data) {\n                     *     console.log('Ontology:', data.ontology);\n                     * })\n                     * @example <caption>Anywhere</caption>\n                     * $(document).on('ontologyUpdated', function(event, data) {\n                     *     console.log('Ontology:', data.ontology);\n                     * })\n                     */\n                    this.trigger('ontologyUpdated', { ontology: ontologyRequest.result });\n                })\n            }\n        };\n\n    }\n});\n"]}
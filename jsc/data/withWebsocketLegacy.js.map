{"version":3,"sources":["../../js/data/withWebsocketLegacy.js"],"names":["define","withLegacyWebsocket","websocketNotSupportedInWorker","self","config","getAtmosphereConfiguration","atmospherePromise","Promise","all","require","fulfill","reject","openlumifyData","currentUser","on","then","result","atmosphere","shift","socket","subscribe","_","extend","onOpen","onError","request","websocketStateOnError","reason","reasonPhrase","error","onClose","websocketStateOnClose","onMessage","response","worker","postMessage","type","responseBody","trigger","around","push","message","string","JSON","stringify","sourceGuid","socketSourceGuid","websocketLegacyClose","close","websocketFromWorker","r","websocketUtils","pushDataToSocket"],"mappings":"AAAAA,OAAO,EAAP,CAAW,UAAW,CAClB,aAEA,MAAOC,oBAAP,CAEA,QAASA,oBAAT,EAA+B,CAE3B,KAAKC,6BAAL,CAAqC,UAAW,CAC5C,GAAIC,MAAO,IAAX,CACIC,OAAS,KAAKC,0BAAL,EADb,CAEIC,kBAAoBC,QAAQC,GAAR,CAAY,CAC5BD,QAAQE,OAAR,CAAgB,YAAhB,CAD4B,CAE5B,GAAIF,QAAJ,CAAY,SAASG,OAAT,CAAkBC,MAAlB,CAA0B,CAClC,GAAIC,eAAeC,WAAnB,CAAgC,MAAOH,UAAP,CAChCP,KAAKW,EAAL,CAAQ,mDAAR,CAA6DJ,OAA7D,EACH,CAHD,CAF4B,CAAZ,EAMjBK,IANiB,CAMZ,SAASC,MAAT,CAAiB,CACrB,GAAIC,YAAaD,OAAOE,KAAP,EAAjB,CACA,MAAO,IAAIX,QAAJ,CAAY,SAASG,OAAT,CAAkBC,MAAlB,CAA0B,CACzC,GAAIQ,QAASF,WAAWG,SAAX,CAAqBC,EAAEC,MAAF,CAASlB,MAAT,CAAiB,CAI/CmB,OAAQ,iBAAW,CACfb,QAAQS,MAAR,EACH,CAN8C,CAO/CK,QAAS,iBAASC,OAAT,CAAkB,CACvBtB,KAAKuB,qBAAL,CAA2B,CACvBC,OAAQF,QAAQG,YADO,CAEvBC,MAAOJ,QAAQI,KAFQ,CAA3B,EAIH,CAZ8C,CAa/CC,QAAS,iBAASL,OAAT,CAAkB,CACvBtB,KAAK4B,qBAAL,CAA2B,CACvBJ,OAAQF,QAAQG,YADO,CAEvBC,MAAOJ,QAAQI,KAFQ,CAA3B,EAIH,CAlB8C,CAmB/CG,UAAW,mBAASC,QAAT,CAAmB,CAC1B9B,KAAK+B,MAAL,CAAYC,WAAZ,CAAwB,CACpBC,KAAM,kBADc,CAEpBC,aAAcJ,SAASI,YAFH,CAAxB,EAIH,CAxB8C,CAAjB,CAArB,CAAb,CA0BH,CA3BM,CAAP,CA4BH,CApCmB,CAFxB,CAwCA,KAAKC,OAAL,CAAa,+BAAb,EAEA,KAAKC,MAAL,CAAY,YAAZ,CAA0B,SAASC,IAAT,CAAeC,OAAf,CAAwB,CAC9CnC,kBAAkBS,IAAlB,CAAuB,SAASI,MAAT,CAAiB,CACpC,GAAIuB,QAASC,KAAKC,SAAL,CAAevB,EAAEC,MAAF,CAAS,EAAT,CAAamB,OAAb,CAAsB,CAC9CI,WAAYjC,eAAekC,gBADmB,CAAtB,CAAf,CAAb,CAGA3B,OAAOqB,IAAP,CAAYE,MAAZ,EACH,CALD,EAMH,CAPD,EASA,KAAKK,oBAAL,CAA4B,UAAW,CACnCzC,kBAAkBS,IAAlB,CAAuB,SAASI,MAAT,CAAiB,CACpCA,OAAO6B,KAAP,GACH,CAFD,EAGH,CAJD,CAMA,KAAKC,mBAAL,CAA2B,SAASR,OAAT,CAAkB,CACzC,GAAIA,SAAWA,QAAQA,OAAvB,CAAgC,CAC5BlC,QAAQC,GAAR,CAAY,CACRF,iBADQ,CAERC,QAAQE,OAAR,CAAgB,gBAAhB,CAFQ,CAAZ,EAGGM,IAHH,CAGQ,SAASmC,CAAT,CAAY,CAChB,GAAI/B,QAAS+B,EAAE,CAAF,CAAb,CACIC,eAAiBD,EAAE,CAAF,CADrB,CAGAC,eAAeC,gBAAf,CAAgCjC,MAAhC,CAAwCP,eAAekC,gBAAvD,CAAyEL,QAAQA,OAAjF,EACH,CARD,EASH,CACJ,CAZD,CAaH,CAvED,CAyEH,CACJ,CAjFD","file":"withWebsocketLegacy.js","sourcesContent":["define([], function() {\n    'use strict';\n\n    return withLegacyWebsocket;\n\n    function withLegacyWebsocket() {\n\n        this.websocketNotSupportedInWorker = function() {\n            var self = this,\n                config = this.getAtmosphereConfiguration(),\n                atmospherePromise = Promise.all([\n                    Promise.require('atmosphere'),\n                    new Promise(function(fulfill, reject) {\n                        if (openlumifyData.currentUser) return fulfill();\n                        self.on('applicationReady currentUserOpenLumifyDataUpdated', fulfill);\n                    })\n                ]).then(function(result) {\n                    var atmosphere = result.shift();\n                    return new Promise(function(fulfill, reject) {\n                        var socket = atmosphere.subscribe(_.extend(config, {\n\n                            // Remember to also Change\n                            // web-worker/handlers/atmosphereConfiguration\n                            onOpen: function() {\n                                fulfill(socket);\n                            },\n                            onError: function(request) {\n                                self.websocketStateOnError({\n                                    reason: request.reasonPhrase,\n                                    error: request.error\n                                });\n                            },\n                            onClose: function(request) {\n                                self.websocketStateOnClose({\n                                    reason: request.reasonPhrase,\n                                    error: request.error\n                                });\n                            },\n                            onMessage: function(response) {\n                                self.worker.postMessage({\n                                    type: 'websocketMessage',\n                                    responseBody: response.responseBody\n                                });\n                            }\n                        }));\n                    });\n                });\n\n            this.trigger('websocketNotSupportedInWorker');\n\n            this.around('pushSocket', function(push, message) {\n                atmospherePromise.then(function(socket) {\n                    var string = JSON.stringify(_.extend({}, message, {\n                        sourceGuid: openlumifyData.socketSourceGuid\n                    }));\n                    socket.push(string);\n                })\n            });\n\n            this.websocketLegacyClose = function() {\n                atmospherePromise.then(function(socket) {\n                    socket.close();\n                });\n            };\n\n            this.websocketFromWorker = function(message) {\n                if (message && message.message) {\n                    Promise.all([\n                        atmospherePromise,\n                        Promise.require('util/websocket')\n                    ]).then(function(r) {\n                        var socket = r[0],\n                            websocketUtils = r[1];\n\n                        websocketUtils.pushDataToSocket(socket, openlumifyData.socketSourceGuid, message.message);\n                    });\n                }\n            }\n        }\n\n    }\n});\n"]}
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};define(['util/clipboardManager','util/promise'],function(ClipboardManager,Promise){'use strict';return withClipboard;function getObjectsFromClipboardData(data){return new Promise(function(fulfill){var objects={vertexIds:[],edgeIds:[]};if(data){require(['util/vertex/urlFormatters'],function(F){var p=F.vertexUrl.parametersInUrl(data);if(p&&p.vertexIds){fulfill(_extends({},p));}else{fulfill(objects);}});}else{fulfill(objects);}});}function formatVertexAction(action,vertices){var len=vertices.length;return i18n('element.clipboard.action.'+(len===1?'one':'some'),i18n('element.clipboard.action.'+action.toLowerCase()),len);}function withClipboard(){this.after('initialize',function(){ClipboardManager.attachTo(this.$node);this.on('clipboardPaste',this.onClipboardPaste);this.on('clipboardCut',this.onClipboardCut);});this.onClipboardCut=function(evt,data){var _this=this;var self=this;getObjectsFromClipboardData(data.data).then(function(elements){_this.trigger('elementsCut',elements);});};this.onClipboardPaste=function(evt,data){var _this2=this;var self=this;getObjectsFromClipboardData(data.data).then(function(elements){var vertexIds=elements.vertexIds,edgeIds=elements.edgeIds;if(elements&&!(_.isEmpty(vertexIds)&&_.isEmpty(edgeIds))){_this2.trigger('elementsPasted',elements);}else{_this2.trigger('genericPaste',data);}});};}});
//# sourceMappingURL=withClipboard.js.map

{"version":3,"sources":["../../js/data/withWebsocket.js"],"names":["define","websocketUtils","withWebsocket","overlayPromise","Promise","fulfill","reject","after","on","_","defer","require","done","bind","self","openlumifyData","socketSourceGuid","setPublicApi","generateSourceGuid","worker","postMessage","type","configuration","getAtmosphereConfiguration","close","window","onWebsocketDisconnect","off","DEBUG","pushSocket","message","rebroadcastEvent","trigger","eventName","data","url","location","origin","pathname","replace","transport","fallbackTransport","contentType","trackMessageLength","suspend","shared","pollingInterval","connectTimeout","enableProtocol","maxReconnectOnClose","maxStreamingLength","logLevel","websocketStateOnError","error","websocketStateOnClose","console","reasonPhrase","status","Overlay","delay","attachTo","document"],"mappings":"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","file":"withWebsocket.js","sourcesContent":["define(['util/websocket'], function(websocketUtils) {\n    'use strict';\n\n    return withWebsocket;\n\n    function withWebsocket() {\n\n        var overlayPromise = new Promise(function(fulfill, reject) {\n            this.after('initialize', function() {\n                this.on('applicationReady currentUserOpenLumifyDataUpdated', function() {\n                    _.defer(function() {\n                        Promise.require('util/offlineOverlay').done(fulfill);\n                    })\n                })\n            })\n        }.bind(this));\n\n        this.after('initialize', function() {\n            var self = this;\n            this.on('applicationReady currentUserOpenLumifyDataUpdated', function() {\n                if (!openlumifyData.socketSourceGuid) {\n                    self.setPublicApi('socketSourceGuid', websocketUtils.generateSourceGuid());\n                    self.worker.postMessage({\n                        type: 'atmosphereConfiguration',\n                        configuration: this.getAtmosphereConfiguration()\n                    })\n                }\n            });\n\n            this.on('willLogout', function() {\n                this.worker.postMessage({\n                    type: 'atmosphereConfiguration',\n                    close: true\n                })\n            })\n\n            this.on(window, 'offline', this.onWebsocketDisconnect);\n            this.on('websocketNotSupportedInWorker', () => {\n                this.off(window, 'offline', this.onWebsocketDisconnect);\n            });\n\n            if (window.DEBUG) {\n                DEBUG.pushSocket = this.pushSocket.bind(this);\n            }\n        });\n\n        this.pushSocket = function(message) {\n            this.worker.postMessage({\n                type: 'websocketSend',\n                message: message\n            });\n        };\n\n        this.rebroadcastEvent = function(message) {\n            this.trigger(message.eventName, message.data);\n        };\n\n        this.getAtmosphereConfiguration = function() {\n            // https://github.com/Atmosphere/atmosphere/wiki/atmosphere.js-API#attributes\n            return {\n                url: location.origin + location.pathname.replace(/jsc.*$/, '') + 'messaging',\n                transport: 'websocket',\n                fallbackTransport: 'long-polling',\n                contentType: 'application/json',\n                trackMessageLength: true,\n                suspend: true,\n                shared: false,\n                pollingInterval: 5000,\n                connectTimeout: -1,\n                enableProtocol: true,\n                maxReconnectOnClose: 2,\n                maxStreamingLength: 2000,\n                logLevel: 'warn'\n            };\n        };\n\n        this.websocketStateOnError = function(error) {\n            this.onWebsocketDisconnect();\n        };\n\n        this.websocketStateOnClose = function(message) {\n            if (message && message.error) {\n                console.error('Websocket closed', message.reasonPhrase, message.error);\n            } else {\n                console.error('Websocket closed', message.status)\n            }\n        };\n\n        this.onWebsocketDisconnect = function() {\n            overlayPromise.done(function(Overlay) {\n                // Might be closing because of browser refresh, delay\n                // so it only happens if server went down\n                _.delay(function() {\n                    Overlay.attachTo(document);\n                }, 1000);\n            });\n        };\n    }\n});\n"]}
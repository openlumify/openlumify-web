{"version":3,"sources":["../../../../../js/data/web-worker/store/ontology/actions-impl.js"],"names":["define","actions","ajax","protectFromMain","ACTION_UPDATE","ACTION_DELETE","anyNotEmpty","conceptIds","relationshipIds","propertyIds","_","any","isEmpty","l","add","type","listName","workspaceId","key","rest","obj","then","dispatch","api","partial","payload","title","iriCreated","iri","catch","iriFailed","error","message","get","invalidate","getState","state","workspace","currentId","user","current","currentWorkspaceId","Error","ontology","update","transform","result","workspaceIds","addConcept","addProperty","addRelationship","remove","concepts","relationships","properties","ontologyChange","action","idType","isPublishedChanged","ids","hasIds","requestWithIds","otherWorkspaces","Object","keys","without","workspaceInStore","indexBy"],"mappings":"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","file":"actions-impl.js","sourcesContent":["define(['../actions', '../../util/ajax'], function(actions, ajax) {\n    actions.protectFromMain();\n\n    const ACTION_UPDATE = 'Update';\n    const ACTION_DELETE = 'Delete';\n    const anyNotEmpty = ({ conceptIds, relationshipIds, propertyIds }) => _.any([conceptIds, relationshipIds, propertyIds], l => !_.isEmpty(l))\n    const add = (type, listName) => ({ workspaceId, key, ...rest }) => dispatch => {\n        const obj = rest[type];\n        return ajax('POST', `/ontology/${type}`, { workspaceId, ...obj })\n            .then(payload => {\n                dispatch(api.partial({ workspaceId, [listName]: { [payload.title]: payload }}))\n                if (key) {\n                    dispatch(api.iriCreated({ key, type, iri: payload.title }))\n                }\n            })\n            .catch(payload => {\n                if (key) {\n                    dispatch(api.iriFailed({ key, type, error: payload.message }))\n                }\n                throw payload;\n            })\n    };\n\n    const api = {\n        get: ({ workspaceId, invalidate = false }) => (dispatch, getState) => {\n            const state = getState();\n            if (!workspaceId) {\n                workspaceId = state.workspace.currentId ||\n                    (state.user.current && state.user.current.currentWorkspaceId)\n            }\n\n            if (!workspaceId) throw new Error('No workspace provided');\n\n            if (!state.ontology[workspaceId] || invalidate) {\n                return ajax('GET', '/ontology', { workspaceId })\n                    .then(result => {\n                        dispatch(api.update({ ...transform(result), workspaceId }))\n                    })\n            }\n        },\n\n        update: (payload) => ({\n            type: 'ONTOLOGY_UPDATE',\n            payload\n        }),\n\n        invalidate: ({ workspaceIds }) => ({\n            type: 'ONTOLOGY_INVALIDATE',\n            payload: {\n                workspaceIds\n            }\n        }),\n\n        partial: ({ workspaceId, ...ontology }) => (dispatch, getState) => {\n            if (!workspaceId) {\n                workspaceId = getState().workspace.currentId;\n            }\n\n            dispatch({\n                type: 'ONTOLOGY_PARTIAL_UPDATE',\n                payload: {\n                    workspaceId,\n                    ...transform(ontology)\n                }\n            })\n        },\n\n        addConcept: add('concept', 'concepts'),\n\n        addProperty: add('property', 'properties'),\n\n        addRelationship: add('relationship', 'relationships'),\n\n        iriCreated: ({ type, key, iri }) => ({\n            type: 'ONTOLOGY_IRI_CREATED',\n            payload: { type, key, iri }\n        }),\n\n        iriFailed: ({ type, key, error }) => ({\n            type: 'ONTOLOGY_IRI_CREATED',\n            payload: { type, key, error }\n        }),\n\n        remove: ({ workspaceId, concepts, relationships, properties }) => ({\n            type: 'ONTOLOGY_REMOVE_IRIS',\n            payload: { workspaceId, concepts, relationships, properties }\n        }),\n\n        ontologyChange: ({ workspaceId, action, idType, conceptIds, relationshipIds, propertyIds }) => (dispatch, getState) => {\n            const state = getState();\n            const isPublishedChanged = !workspaceId;\n            const ids = { conceptIds, relationshipIds, propertyIds };\n            const hasIds = anyNotEmpty(ids)\n            const currentWorkspaceId = state.workspace.currentId;\n            const requestWithIds = (workspaceId, ontology) => {\n                return ajax('GET', '/ontology/segment', { workspaceId, ...ontology })\n                    .then(payload => {\n                        dispatch(api.partial({ workspaceId, ...payload }))\n                    })\n            }\n\n            if (isPublishedChanged) {\n                if (action === ACTION_UPDATE) {\n                    let otherWorkspaces = Object.keys(state.ontology);\n                    if (currentWorkspaceId) {\n                        otherWorkspaces = _.without(otherWorkspaces, currentWorkspaceId);\n                    }\n                    dispatch(api.invalidate({ workspaceIds: otherWorkspaces }));\n                    if (currentWorkspaceId) {\n                        if (hasIds) {\n                            return requestWithIds(currentWorkspaceId, ids);\n                        } else {\n                            dispatch(api.get({ currentWorkspaceId, invalidate: true }));\n                        }\n                    }\n                } else throw new Error(`Published action: ${action} not supported`);\n            } else {\n                const workspaceInStore = workspaceId in state.ontology;\n                if (workspaceInStore) {\n                    if (hasIds) {\n                        if (action === ACTION_UPDATE) {\n                            return requestWithIds(workspaceId, ids);\n                        } else if (action === ACTION_DELETE) {\n                            dispatch(api.remove({\n                                workspaceId,\n                                concepts: conceptIds,\n                                relationships: relationshipIds,\n                                properties: propertyIds\n                            }));\n                        } else throw new Error(`Action: ${action} not supported`);\n                    } else {\n                        dispatch(api.get({ workspaceId, invalidate: true }))\n                    }\n                }\n            }\n        }\n    }\n\n    return api;\n\n\n    function transform(ontology) {\n        const concepts = _.indexBy(ontology.concepts, 'title');\n        const properties = _.indexBy(ontology.properties, 'title');\n        const relationships = _.indexBy(ontology.relationships, 'title');\n\n        return { concepts, properties, relationships };\n    }\n})\n\n"]}
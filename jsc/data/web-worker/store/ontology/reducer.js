function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['updeep'],function(u){'use strict';return function ontology(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _ref=arguments[1];var type=_ref.type,payload=_ref.payload;switch(type){case'ONTOLOGY_UPDATE':return update(state,payload);case'ONTOLOGY_PARTIAL_UPDATE':return updatePartial(state,payload);case'ONTOLOGY_IRI_CREATED':return updateIri(state,payload);case'ONTOLOGY_INVALIDATE':return invalidate(state,payload);case'ONTOLOGY_REMOVE_IRIS':return remove(state,payload);}return state;};function update(state,payload){var workspaceId=payload.workspaceId,ontology=_objectWithoutProperties(payload,['workspaceId']);return u(_defineProperty({},workspaceId,u.constant(ontology)),state);}function updatePartial(state,payload){var workspaceId=payload.workspaceId,_payload$concepts=payload.concepts,concepts=_payload$concepts===undefined?{}:_payload$concepts,_payload$relationship=payload.relationships,relationships=_payload$relationship===undefined?{}:_payload$relationship,_payload$properties=payload.properties,properties=_payload$properties===undefined?{}:_payload$properties;return u(_defineProperty({},workspaceId,{concepts:_.mapObject(concepts,function(o){return u.constant(o);}),relationships:_.mapObject(relationships,function(o){return u.constant(o);}),properties:_.mapObject(properties,function(o){return u.constant(o);})}),state);}function remove(state,payload){var workspaceId=payload.workspaceId,iris=_objectWithoutProperties(payload,['workspaceId']);var updates={};_.each(iris,function(list,type){if(_.isArray(list)&&list.length){updates[type]=u.omit(list);}});return u(_defineProperty({},workspaceId,updates),state);}function invalidate(state,_ref2){var _ref2$workspaceIds=_ref2.workspaceIds,workspaceIds=_ref2$workspaceIds===undefined?[]:_ref2$workspaceIds;return u(u.omit(workspaceIds),state);}function updateIri(state,_ref3){var type=_ref3.type,key=_ref3.key,error=_ref3.error,iri=_ref3.iri;if(iri){return u.updateIn('iris.'+type+'.'+key,iri,state);}return u.updateIn('iris.'+type+'.'+key+'.error',error,state);}});
//# sourceMappingURL=reducer.js.map

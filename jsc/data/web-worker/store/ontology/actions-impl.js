var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['../actions','../../util/ajax'],function(actions,ajax){actions.protectFromMain();var ACTION_UPDATE='Update';var ACTION_DELETE='Delete';var anyNotEmpty=function anyNotEmpty(_ref){var conceptIds=_ref.conceptIds,relationshipIds=_ref.relationshipIds,propertyIds=_ref.propertyIds;return _.any([conceptIds,relationshipIds,propertyIds],function(l){return!_.isEmpty(l);});};var add=function add(type,listName){return function(_ref2){var workspaceId=_ref2.workspaceId,key=_ref2.key,rest=_objectWithoutProperties(_ref2,['workspaceId','key']);return function(dispatch){var obj=rest[type];return ajax('POST','/ontology/'+type,_extends({workspaceId:workspaceId},obj)).then(function(payload){dispatch(api.partial(_defineProperty({workspaceId:workspaceId},listName,_defineProperty({},payload.title,payload))));if(key){dispatch(api.iriCreated({key:key,type:type,iri:payload.title}));}}).catch(function(payload){if(key){dispatch(api.iriFailed({key:key,type:type,error:payload.message}));}throw payload;});};};};var api={get:function get(_ref3){var workspaceId=_ref3.workspaceId,_ref3$invalidate=_ref3.invalidate,invalidate=_ref3$invalidate===undefined?false:_ref3$invalidate;return function(dispatch,getState){var state=getState();if(!workspaceId){workspaceId=state.workspace.currentId||state.user.current&&state.user.current.currentWorkspaceId;}if(!workspaceId)throw new Error('No workspace provided');if(!state.ontology[workspaceId]||invalidate){return ajax('GET','/ontology',{workspaceId:workspaceId}).then(function(result){dispatch(api.update(_extends({},transform(result),{workspaceId:workspaceId})));});}};},update:function update(payload){return{type:'ONTOLOGY_UPDATE',payload:payload};},invalidate:function invalidate(_ref4){var workspaceIds=_ref4.workspaceIds;return{type:'ONTOLOGY_INVALIDATE',payload:{workspaceIds:workspaceIds}};},partial:function partial(_ref5){var workspaceId=_ref5.workspaceId,ontology=_objectWithoutProperties(_ref5,['workspaceId']);return function(dispatch,getState){if(!workspaceId){workspaceId=getState().workspace.currentId;}dispatch({type:'ONTOLOGY_PARTIAL_UPDATE',payload:_extends({workspaceId:workspaceId},transform(ontology))});};},addConcept:add('concept','concepts'),addProperty:add('property','properties'),addRelationship:add('relationship','relationships'),iriCreated:function iriCreated(_ref6){var type=_ref6.type,key=_ref6.key,iri=_ref6.iri;return{type:'ONTOLOGY_IRI_CREATED',payload:{type:type,key:key,iri:iri}};},iriFailed:function iriFailed(_ref7){var type=_ref7.type,key=_ref7.key,error=_ref7.error;return{type:'ONTOLOGY_IRI_CREATED',payload:{type:type,key:key,error:error}};},remove:function remove(_ref8){var workspaceId=_ref8.workspaceId,concepts=_ref8.concepts,relationships=_ref8.relationships,properties=_ref8.properties;return{type:'ONTOLOGY_REMOVE_IRIS',payload:{workspaceId:workspaceId,concepts:concepts,relationships:relationships,properties:properties}};},ontologyChange:function ontologyChange(_ref9){var workspaceId=_ref9.workspaceId,action=_ref9.action,idType=_ref9.idType,conceptIds=_ref9.conceptIds,relationshipIds=_ref9.relationshipIds,propertyIds=_ref9.propertyIds;return function(dispatch,getState){var state=getState();var isPublishedChanged=!workspaceId;var ids={conceptIds:conceptIds,relationshipIds:relationshipIds,propertyIds:propertyIds};var hasIds=anyNotEmpty(ids);var currentWorkspaceId=state.workspace.currentId;var requestWithIds=function requestWithIds(workspaceId,ontology){return ajax('GET','/ontology/segment',_extends({workspaceId:workspaceId},ontology)).then(function(payload){dispatch(api.partial(_extends({workspaceId:workspaceId},payload)));});};if(isPublishedChanged){if(action===ACTION_UPDATE){var otherWorkspaces=Object.keys(state.ontology);if(currentWorkspaceId){otherWorkspaces=_.without(otherWorkspaces,currentWorkspaceId);}dispatch(api.invalidate({workspaceIds:otherWorkspaces}));if(currentWorkspaceId){if(hasIds){return requestWithIds(currentWorkspaceId,ids);}else{dispatch(api.get({currentWorkspaceId:currentWorkspaceId,invalidate:true}));}}}else throw new Error('Published action: '+action+' not supported');}else{var workspaceInStore=workspaceId in state.ontology;if(workspaceInStore){if(hasIds){if(action===ACTION_UPDATE){return requestWithIds(workspaceId,ids);}else if(action===ACTION_DELETE){dispatch(api.remove({workspaceId:workspaceId,concepts:conceptIds,relationships:relationshipIds,properties:propertyIds}));}else throw new Error('Action: '+action+' not supported');}else{dispatch(api.get({workspaceId:workspaceId,invalidate:true}));}}}};}};return api;function transform(ontology){var concepts=_.indexBy(ontology.concepts,'title');var properties=_.indexBy(ontology.properties,'title');var relationships=_.indexBy(ontology.relationships,'title');return{concepts:concepts,properties:properties,relationships:relationships};}});
//# sourceMappingURL=actions-impl.js.map

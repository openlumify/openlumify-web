{"version":3,"sources":["../../../../../js/data/web-worker/store/ontology/reducer.js"],"names":["define","u","ontology","state","type","payload","update","updatePartial","updateIri","invalidate","remove","workspaceId","constant","concepts","relationships","properties","_","mapObject","o","iris","updates","each","list","isArray","length","omit","workspaceIds","key","error","iri","updateIn"],"mappings":"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","file":"reducer.js","sourcesContent":["define(['updeep'], function(u) {\n    'use strict';\n\n    return function ontology(state = {}, { type, payload }) {\n\n        switch (type) {\n            case 'ONTOLOGY_UPDATE': return update(state, payload);\n            case 'ONTOLOGY_PARTIAL_UPDATE': return updatePartial(state, payload);\n            case 'ONTOLOGY_IRI_CREATED': return updateIri(state, payload);\n            case 'ONTOLOGY_INVALIDATE': return invalidate(state, payload);\n            case 'ONTOLOGY_REMOVE_IRIS': return remove(state, payload);\n        }\n\n        return state;\n    }\n\n    function update(state, payload) {\n        const { workspaceId, ...ontology } = payload;\n        return u({ [workspaceId]: u.constant(ontology) }, state);\n    }\n\n    function updatePartial(state, payload) {\n        const { workspaceId, concepts = {}, relationships = {}, properties = {} } = payload;\n        return u({\n            [workspaceId]: {\n                concepts: _.mapObject(concepts, o => u.constant(o)),\n                relationships: _.mapObject(relationships, o => u.constant(o)),\n                properties: _.mapObject(properties, o => u.constant(o)),\n            }\n        }, state)\n    }\n\n    function remove(state, payload) {\n        const { workspaceId, ...iris } = payload;\n        const updates = {}\n        _.each(iris, (list, type) => {\n            if (_.isArray(list) && list.length) {\n                updates[type] = u.omit(list);\n            }\n        })\n        return u({ [workspaceId]: updates }, state)\n    }\n\n    function invalidate(state, { workspaceIds = [] }) {\n        return u(u.omit(workspaceIds), state);\n    }\n\n    function updateIri(state, { type, key, error, iri }) {\n        if (iri) {\n            return u.updateIn(`iris.${type}.${key}`, iri, state);\n        }\n        return u.updateIn(`iris.${type}.${key}.error`, error, state);\n    }\n});\n\n"]}
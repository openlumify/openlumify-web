{"version":3,"sources":["../../../../../js/data/web-worker/store/ontology/selectors.js"],"names":["define","reselect","createSelector","THING","ROOT","EDGE_THING","_visible","item","options","rootItemsHidden","userVisible","id","displayName","_collectParents","concepts","parentKey","extraKeys","defaults","collecting","path","fullPath","properties","_","object","map","k","_collect","concept","override","each","v","newConcept","reverse","join","uniq","depth","length","fullDepth","forEach","push","concat","parent","_propertiesWithHeaders","lastGroup","reduce","property","propertyGroup","header","getWorkspace","state","workspace","currentId","getOntologyRoot","ontology","getConcepts","workspaceId","fn","glyphIconHref","mapObject","c","displayNameSub","getProperties","getRelationships","relationships","getSortedConcepts","chain","iris","iri","sortBy","value","omit","newR","r","domains","domainConceptIris","ranges","rangeConceptIris","domainGlyphIconHref","rangeGlyphIconHref","d","getVisibleRelationships","anyIrisVisible","isArray","any","relationshipConceptsVisible","filter","getVisibleRelationshipsByConcept","result","key","includes","title","getOtherConcepts","getRelationshipAncestors","byParent","groupBy","collectAncestors","list","skipFirst","parentIri","getRelationshipKeyIris","relationship","getConceptAncestors","parentConcept","getConceptDescendents","collectDescendents","inner","getConceptsList","getVisibleConceptsList","getConceptsByRelatedConcept","ancestors","otherConcepts","topConcept","other","getConceptKeyIris","getOntology","getPropertiesByConcept","pick","getConceptProperties","propertiesByConcept","conceptProperties","Object","keys","getPropertiesByRelationship","getRelationshipProperties","propertiesByRelationship","relationshipProperties","getPropertiesByDependentToCompound","dependentToCompounds","dependentPropertyIris","dIri","getPropertiesList","compareNameAndGroup","displayNameLC","toLowerCase","getVisiblePropertiesList","getPropertyKeyIris","getPropertiesWithHeaders","getVisiblePropertiesWithHeaders"],"mappings":"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","file":"selectors.js","sourcesContent":["define(['reselect'], function(reselect) {\n    const { createSelector } = reselect;\n\n    const THING = 'http://www.w3.org/2002/07/owl#Thing';\n    const ROOT = 'http://openlumify.org#root';\n    const EDGE_THING = 'http://www.w3.org/2002/07/owl#topObjectProperty';\n\n    const _visible = (item, options = {}) => {\n        const { rootItemsHidden = true } = options;\n        return item &&\n            item.userVisible !== false &&\n            (!rootItemsHidden || (item.id !== EDGE_THING && item.id !== THING && item.id !== ROOT)) &&\n            item.displayName;\n    };\n    const _collectParents = (concepts, { parentKey, extraKeys = [], defaults = {} } = {}) => concept => {\n        const collecting = {\n            path: [],\n            fullPath: [],\n            properties: [],\n            ...(_.object(extraKeys.map(k => [k, null])))\n        };\n        _collect(concept);\n        const {\n            path,\n            fullPath,\n            properties,\n            ...override } = collecting;\n        _.each(override, (v, k) => {\n            if (!v && defaults[k]) {\n                override[k] = defaults[k];\n            }\n        })\n        const newConcept = {\n            ...concept,\n            path: '/' + path.reverse().join('/'),\n            fullPath: '/' + fullPath.reverse().join('/'),\n            properties: _.uniq(properties),\n            depth: path.length - 1,\n            fullDepth: fullPath.length - 1,\n            ...override\n        };\n        return newConcept;\n\n        function _collect(concept) {\n            extraKeys.forEach(k => {\n                collecting[k] = collecting[k] || concept[k];\n            })\n            if (_visible(concept, { rootItemsHidden: false })) {\n                collecting.fullPath.push(concept.displayName)\n            }\n            if (_visible(concept)) {\n                collecting.path.push(concept.displayName)\n            }\n            collecting.properties = collecting.properties.concat(concept.properties);\n\n            if (concept[parentKey]) {\n                const parent = concepts[concept[parentKey]];\n                _collect(parent);\n            }\n        }\n    }\n\n    const _propertiesWithHeaders = (properties) => {\n        let lastGroup;\n        return properties.reduce(\n            (properties, property) => {\n                const { propertyGroup } = property;\n                if (propertyGroup && lastGroup !== propertyGroup) {\n                    lastGroup = propertyGroup;\n                    return [\n                        ...properties,\n                        {\n                            displayName: propertyGroup,\n                            header: true\n                        },\n                        property\n                    ];\n                }\n                return [...properties, property];\n            },\n            []\n        );\n    }\n\n    const getWorkspace = (state) => state.workspace.currentId;\n\n    const getOntologyRoot = (state) => state.ontology;\n\n    const getConcepts = createSelector([getWorkspace, getOntologyRoot], (workspaceId, ontology) => {\n        const concepts = ontology[workspaceId].concepts;\n        const fn = _collectParents(concepts, {\n            parentKey: 'parentConcept',\n            extraKeys: ['color', 'displayType', 'glyphIconHref', 'glyphIconSelectedHref', 'titleFormula', 'subtitleFormula', 'timeFormula', 'validationFormula'],\n            defaults: { glyphIconHref: 'img/glyphicons/glyphicons_194_circle_question_mark@2x.png' }\n        });\n        return _.mapObject(concepts, c => {\n            return { ...fn(c), displayNameSub: '' };\n        });\n    })\n\n    const getProperties = createSelector([getWorkspace, getOntologyRoot], (workspaceId, ontology) => {\n        return ontology[workspaceId].properties;\n    })\n\n    const getRelationships = createSelector([getWorkspace, getOntologyRoot, getConcepts], (workspaceId, ontology, concepts) => {\n        const relationships = ontology[workspaceId].relationships;\n        const getSortedConcepts = iris => _.chain(iris)\n            .map(iri => concepts[iri])\n            .sortBy('displayName')\n            .sortBy('depth')\n            .value();\n        const fn = _collectParents(relationships, { parentKey: 'parentIri' });\n        return _.omit(_.mapObject(relationships, r => {\n            const newR = fn(r);\n            const domains = getSortedConcepts(newR.domainConceptIris);\n            const ranges = getSortedConcepts(newR.rangeConceptIris);\n            if (domains.length === 0 && ranges.length === 0) return null;\n            const domainGlyphIconHref = domains[0].glyphIconHref;\n            const rangeGlyphIconHref = ranges[0].glyphIconHref;\n            const displayNameSub = domains.length === 1 ? ranges.map(r => domains[0].displayName + '→' + r.displayName).join('\\n') :\n                ranges.length === 1 ? domains.map(d => d.displayName + '→' + ranges[0].displayName).join('\\n') :\n                `(${domains.map(d => d.displayName).join(', ')}) → (${ranges.map(r => r.displayName).join(', ')})`\n            return { ...newR, domainGlyphIconHref, rangeGlyphIconHref, displayNameSub };\n        }), v => v === null);\n    })\n\n    const getVisibleRelationships = createSelector([getRelationships, getConcepts], (relationships, concepts) => {\n        const anyIrisVisible = iris => _.isArray(iris) && _.any(iris, iri => _visible(concepts[iri], { rootItemsHidden: false }))\n        const relationshipConceptsVisible = r => anyIrisVisible(r.rangeConceptIris) && anyIrisVisible(r.domainConceptIris);\n        return _.chain(relationships)\n            .map()\n            .filter(r => _visible(r) && relationshipConceptsVisible(r))\n            .sortBy('path')\n            .value()\n    })\n\n    const getVisibleRelationshipsByConcept = createSelector([getVisibleRelationships], relationships => {\n        const result = {};\n        relationships.forEach(r => {\n            ['domainConceptIris', 'rangeConceptIris'].forEach(key => {\n                r[key].forEach(iri => {\n                    if (!result[iri]) result[iri] = [];\n                    if (!result[iri].includes(r.title)) {\n                        result[iri].push(r.title);\n                    }\n                })\n            })\n        })\n        return result;\n    })\n\n    const getOtherConcepts = createSelector([getVisibleRelationships], relationships => {\n        const result = {};\n        relationships.forEach(r => {\n            r.domainConceptIris.forEach(d => {\n                if (!result[d]) result[d] = [];\n                result[d].push(...r.rangeConceptIris)\n            })\n            r.rangeConceptIris.forEach(d => {\n                if (!result[d]) result[d] = [];\n                result[d].push(...r.domainConceptIris)\n            })\n        })\n        return result;\n    })\n\n    const getRelationshipAncestors = createSelector([getRelationships], relationships => {\n        const byParent = _.groupBy(relationships, 'parentIri');\n        const collectAncestors = (list, r, skipFirst) => {\n            if (r) {\n                if (!skipFirst) list.push(r.title);\n                if (r.parentIri) {\n                    collectAncestors(list, relationships[r.parentIri]);\n                }\n            }\n            return _.uniq(list);\n        }\n        return _.mapObject(relationships, c => collectAncestors([], c, true));\n    })\n\n    const getRelationshipKeyIris = state => state.ontology.iris && state.ontology.iris.relationship;\n\n    const getConceptAncestors = createSelector([getConcepts], concepts => {\n        const byParent = _.groupBy(concepts, 'parentConcept');\n        const collectAncestors = (list, c, skipFirst) => {\n            if (c) {\n                if (!skipFirst) list.push(c.title);\n                if (c.parentConcept) {\n                    collectAncestors(list, concepts[c.parentConcept]);\n                }\n            }\n            return _.uniq(list);\n        }\n        return _.mapObject(concepts, c => collectAncestors([], c, true));\n    })\n\n    const getConceptDescendents = createSelector([getConcepts], concepts => {\n        const byParent = _.groupBy(concepts, 'parentConcept');\n        const collectDescendents = (list, c, skipFirst) => {\n            if (!skipFirst) list.push(c.title);\n            if (byParent[c.title]) {\n                byParent[c.title].forEach(inner => collectDescendents(list, inner));\n            }\n            return _.uniq(list);\n        }\n        return _.mapObject(concepts, c => collectDescendents([], c, true));\n    })\n\n    const getConceptsList = createSelector([getConcepts], concepts => {\n        return _.chain(concepts)\n            .sortBy('fullPath')\n            .value()\n    })\n\n    const getVisibleConceptsList = createSelector([getConcepts], concepts => {\n        return _.chain(concepts)\n            .filter(c => _visible(c))\n            .sortBy('path')\n            .value()\n    })\n\n    const getConceptsByRelatedConcept = createSelector([getVisibleConceptsList, getConceptAncestors, getOtherConcepts], (concepts, ancestors, otherConcepts) => {\n        return _.chain(concepts)\n            .map(topConcept => {\n                var concepts = [];\n                [topConcept.id, ...ancestors[topConcept.id]].forEach(iri => {\n                    const other = otherConcepts[iri];\n                    if (other) {\n                        concepts.push(..._.uniq(other));\n                    }\n                })\n                return [topConcept.id, concepts];\n            })\n            .object()\n            .value();\n    })\n\n    const getConceptKeyIris = state => state.ontology.iris && state.ontology.iris.concept\n\n    const getOntology = createSelector([getOntologyRoot, getWorkspace], (ontology, workspaceId) => ontology[workspaceId])\n\n    const getPropertiesByConcept = createSelector([getConcepts, getProperties], (concepts, properties) => {\n        return _.mapObject(concepts, r => {\n            return _.pick(properties, r.properties);\n        })\n    })\n\n    const getConceptProperties = createSelector([getPropertiesByConcept], (propertiesByConcept) => {\n        let conceptProperties = {};\n\n        return Object.keys(propertiesByConcept).reduce((properties, concept) => {\n            return { ...properties, ...propertiesByConcept[concept] }\n        }, conceptProperties);\n    })\n\n    const getPropertiesByRelationship = createSelector([getRelationships, getProperties], (relationships, properties) => {\n        return _.mapObject(relationships, r => {\n            return _.pick(properties, r.properties);\n        })\n    })\n\n    const getRelationshipProperties = createSelector([getPropertiesByRelationship], (propertiesByRelationship) => {\n        let relationshipProperties = {};\n\n        return Object.keys(propertiesByRelationship).reduce((properties, relationship) => {\n            return { ...properties, ...propertiesByRelationship[relationship] }\n        }, relationshipProperties);\n    })\n\n    const getPropertiesByDependentToCompound = createSelector([getProperties], properties => {\n        const dependentToCompounds = {};\n        Object.keys(properties).forEach(iri => {\n            const { dependentPropertyIris } = properties[iri];\n            if (dependentPropertyIris) {\n                dependentPropertyIris.forEach(dIri => {\n                    const list = dependentToCompounds[dIri] || (dependentToCompounds[dIri] = [])\n                    if (!list.includes(iri)) {\n                        list.push(iri)\n                    }\n                })\n            }\n        })\n\n        return dependentToCompounds;\n    })\n\n    const getPropertiesList = createSelector([getProperties], properties => {\n        const compareNameAndGroup = ({ displayName, propertyGroup }) => {\n            const displayNameLC = displayName.toLowerCase();\n            return propertyGroup ? `1${propertyGroup}${displayNameLC}` : `0${displayNameLC}`;\n        };\n\n        return _.chain(properties)\n            .sortBy(compareNameAndGroup)\n            .value()\n    })\n\n    const getVisiblePropertiesList = createSelector([getPropertiesList], properties => {\n        return _.filter(properties, _visible);\n    });\n\n    const getPropertyKeyIris = state => state.ontology.iris && state.ontology.iris.property;\n\n    const getPropertiesWithHeaders = createSelector([getPropertiesList], properties => {\n        return _propertiesWithHeaders(properties);\n\n    })\n\n    const getVisiblePropertiesWithHeaders = createSelector([getVisiblePropertiesList], properties => {\n        return _propertiesWithHeaders(properties);\n    });\n\n    return {\n        getOntology,\n\n        getConcepts,\n        getConceptKeyIris,\n        getConceptDescendents,\n        getConceptAncestors,\n        getConceptsList,\n        getConceptsByRelatedConcept,\n        getVisibleConceptsList,\n\n        getProperties,\n        getPropertyKeyIris,\n        getPropertiesByConcept,\n        getConceptProperties,\n        getPropertiesByRelationship,\n        getRelationshipProperties,\n        getPropertiesByDependentToCompound,\n        getPropertiesList,\n        getVisiblePropertiesList,\n        getPropertiesWithHeaders,\n        getVisiblePropertiesWithHeaders,\n\n        getRelationships,\n        getRelationshipAncestors,\n        getRelationshipKeyIris,\n        getVisibleRelationships,\n        getVisibleRelationshipsByConcept\n    }\n});\n"]}
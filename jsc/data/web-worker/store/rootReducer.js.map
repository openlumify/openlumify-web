{"version":3,"sources":["../../../../js/data/web-worker/store/rootReducer.js"],"names":["global","define","pluginsLoaded","promise","isFinished","console","error","registry","redux","pluginsFinished","reducers","markUndocumentedExtensionPoint","composeReducers","state","payload","reduce","previous","fn","returnedState","warn","reducerExtensions","extensionsForPoint","reducersByKey","_","groupBy","baseReducers","object","map","name","reducerFn","isUndefined","Error","pluck","splice","rootExtensions","undefined","rootReducerExtensions","reducerMap","combineReducers","mapObject","extensions","e","reducer","length"],"mappings":"wYACA,CAAC,SAASA,MAAT,CAAiB,CAClBC,OAAO,4BAAP,CAAqC,EAArC,CAAyC,UAAW,CAChD,MAAOD,QAAOE,aAAP,CAAqBC,OAA5B,CACH,CAFD,EAIA,GAAI,CAACH,OAAOE,aAAP,CAAqBE,UAArB,EAAL,CAAwC,CACpCC,QAAQC,KAAR,uYAcAD,QAAQC,KAAR,CAAc,iEAAd,EACH,CAEDL,OAAO,CACH,gCADG,CAEH,OAFG,CAGH,mDAHG,CAMH,yBANG,CAOH,mBAPG,CAQH,oBARG,CASH,iBATG,CAUH,mBAVG,CAWH,kBAXG,CAYH,qBAZG,CAaH,gBAbG,CAcH,gBAdG,CAeH,qBAfG,CAAP,CAkBG,SAASM,QAAT,CAAmBC,KAAnB,CAA0BC,eAA1B,CAAwD,+BAAVC,QAAU,iDAAVA,QAAU,0BAEvDH,SAASI,8BAAT,CAAwC,sBAAxC,EAEA,GAAMC,iBAAkB,QAAlBA,gBAAkB,CAACF,QAAD,CAAc,CAClC,MAAO,UAACG,KAAD,CAAQC,OAAR,CAAoB,CACvB,MAAOJ,UAASK,MAAT,CAAgB,SAACC,QAAD,CAAWC,EAAX,CAAkB,CACrC,GAAMC,eAAgBD,GAAGD,QAAH,CAAaF,OAAb,CAAtB,CACA,GAAI,CAACI,aAAL,CAAoB,CAChBb,QAAQc,IAAR,CAAa,0CAAb,CAAyDF,EAAzD,EACA,MAAOD,SAAP,CACH,CACD,MAAOE,cAAP,CACH,CAPM,CAOJL,KAPI,CAAP,CAQH,CATD,CAUH,CAXD,CAYA,GAAMO,mBAAoBb,SAASc,kBAAT,CAA4B,sBAA5B,CAA1B,CACA,GAAMC,eAAgBC,EAAEC,OAAF,CAAUJ,iBAAV,CAA6B,KAA7B,CAAtB,CACA,GAAMK,cAAeF,EAAEG,MAAF,CACjBhB,SAASiB,GAAT,CAAa,mBAAa,IACdC,KADc,CACLC,SADK,CACdD,IADc,CAEtB,GAAIL,EAAEO,WAAF,CAAcF,IAAd,CAAJ,CAAyB,CACrB,KAAM,IAAIG,MAAJ,CAAU,+BAAiCF,SAA3C,CAAN,CACH,CACD,GAAID,OAAQN,cAAZ,CAA2B,CACvB,GAAMZ,WAAWa,EAAES,KAAF,CAAQV,cAAcM,IAAd,CAAR,CAA6B,SAA7B,CAAjB,CACAlB,UAASuB,MAAT,CAAgB,CAAhB,CAAmB,CAAnB,CAAsBJ,SAAtB,EACA,MAAOP,eAAcM,IAAd,CAAP,CACA,MAAO,CAACA,IAAD,CAAOhB,gBAAgBF,SAAhB,CAAP,CAAP,CACH,CAED,MAAO,CAACkB,IAAD,CAAOC,SAAP,CAAP,CACH,CAbD,CADiB,CAArB,CAgBA,GAAMK,gBAAiBZ,cAAca,SAAd,CAAvB,CACA,GAAMC,uBAAwBF,eAAiBX,EAAES,KAAF,CAAQE,cAAR,CAAwB,SAAxB,CAAjB,CAAsD,EAApF,CACA,MAAOZ,eAAca,SAAd,CAAP,CAEA,GAAME,YAAa7B,MAAM8B,eAAN,aACZb,YADY,CAEZF,EAAEgB,SAAF,CAAYjB,aAAZ,CAA2B,oBAAc,CACxC,GAAMZ,UAAW8B,WAAWb,GAAX,CAAe,kBAAKc,GAAEC,OAAP,EAAf,CAAjB,CACA,MAAOhC,UAASiC,MAAT,GAAoB,CAApB,CAAwBjC,SAAS,CAAT,CAAxB,CAAsCE,gBAAgBF,QAAhB,CAA7C,CACH,CAHE,CAFY,EAAnB,CAQA,MAAOE,kBAAiByB,UAAjB,4BAAgCD,qBAAhC,GAAP,CACH,CAjED,EAkEC,CAzFD,EAyFG,IAzFH","file":"rootReducer.js","sourcesContent":["/*eslint strict:0 */\n(function(global) {\ndefine('wait-for-webworker-plugins', [], function() {\n    return global.pluginsLoaded.promise;\n})\n\nif (!global.pluginsLoaded.isFinished()) {\n    console.error(\n`Web worker plugins should not require the store using requirejs.  Please check any plugins that require \"data/web-worker/store\" and replace with \"publicData.storePromise\"\n\nFor example:\n\n    define([\n        'data/web-worker/store' //Remove this\n    ], function(store) {\n\n        // Add this\n        publicData.storePromise.then(store => {\n            ...\n        })\n    })`);\n    console.error('OpenLumify is deadlocked until circular dependency is resolved.')\n}\n\ndefine([\n    'configuration/plugins/registry',\n    'redux',\n    'util/requirejs/promise!wait-for-webworker-plugins',\n\n    // Reducers\n    './configuration/reducer',\n    './element/reducer',\n    './ontology/reducer',\n    './panel/reducer',\n    './product/reducer',\n    './screen/reducer',\n    './selection/reducer',\n    './undo/reducer',\n    './user/reducer',\n    './workspace/reducer'\n\n    // Add reducers above, the name of the function will be used as the key\n], function(registry, redux, pluginsFinished, ...reducers) {\n\n    registry.markUndocumentedExtensionPoint('org.openlumify.store');\n\n    const composeReducers = (reducers) => {\n        return (state, payload) => {\n            return reducers.reduce((previous, fn) => {\n                const returnedState = fn(previous, payload);\n                if (!returnedState) {\n                    console.warn('No state returned from reducer, ignoring', fn);\n                    return previous;\n                }\n                return returnedState;\n            }, state)\n        }\n    }\n    const reducerExtensions = registry.extensionsForPoint('org.openlumify.store');\n    const reducersByKey = _.groupBy(reducerExtensions, 'key');\n    const baseReducers = _.object(\n        reducers.map(reducerFn => {\n            const { name } = reducerFn;\n            if (_.isUndefined(name)) {\n                throw new Error('Undefined name for reducer: ' + reducerFn);\n            }\n            if (name in reducersByKey) {\n                const reducers = _.pluck(reducersByKey[name], 'reducer');\n                reducers.splice(0, 0, reducerFn);\n                delete reducersByKey[name];\n                return [name, composeReducers(reducers)]\n            }\n\n            return [name, reducerFn]\n        })\n    );\n    const rootExtensions = reducersByKey[undefined];\n    const rootReducerExtensions = rootExtensions ? _.pluck(rootExtensions, 'reducer') : [];\n    delete reducersByKey[undefined];\n\n    const reducerMap = redux.combineReducers({\n        ...baseReducers,\n        ..._.mapObject(reducersByKey, extensions => {\n            const reducers = extensions.map(e => e.reducer)\n            return reducers.length === 1 ? reducers[0] : composeReducers(reducers)\n        })\n    });\n\n    return composeReducers([reducerMap, ...rootReducerExtensions]);\n});\n})(this);\n"]}
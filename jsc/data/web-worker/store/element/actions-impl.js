var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['../actions','data/web-worker/util/ajax'],function(actions,ajax){actions.protectFromMain();var setFocusDebounce=_.debounce(function(dispatch,elementIds){dispatch({type:'ELEMENT_SET_FOCUS',payload:elementIds});},250);var getWorkspaceIds=function getWorkspaceIds(_ref){var element=_ref.element;var focusing=element.focusing,workspaces=_objectWithoutProperties(element,['focusing']);return Object.keys(workspaces);};var api={get:function get(_ref2){var workspaceId=_ref2.workspaceId,_ref2$vertexIds=_ref2.vertexIds,vertexIds=_ref2$vertexIds===undefined?[]:_ref2$vertexIds,_ref2$edgeIds=_ref2.edgeIds,edgeIds=_ref2$edgeIds===undefined?[]:_ref2$edgeIds,invalidate=_ref2.invalidate,includeAncillary=_ref2.includeAncillary;return function(dispatch,getState){if(vertexIds.length||edgeIds.length){var state=getState();if(!workspaceId){workspaceId=state.workspace.currentId;}var elements=state.element[workspaceId];var toRequest={vertexIds:vertexIds,edgeIds:edgeIds};if(invalidate!==true&&elements){if(elements.vertices)toRequest.vertexIds=_.reject(toRequest.vertexIds,function(vId){return vId in elements.vertices;});if(elements.edges)toRequest.edgeIds=_.reject(toRequest.edgeIds,function(eId){return eId in elements.edges;});}['vertex','edge'].forEach(function(type){var typeIds=type+'Ids';var resultType=type==='vertex'?'vertices':'edges';if(toRequest[typeIds].length){var _ajax;ajax('POST','/'+type+'/multiple',(_ajax={workspaceId:workspaceId},_defineProperty(_ajax,typeIds,toRequest[typeIds]),_defineProperty(_ajax,'includeAncillary',includeAncillary),_ajax)).then(function(result){var byId=_.indexBy(result[resultType],'id');var elements=toRequest[typeIds].map(function(id){if(id in byId){return byId[id];}return{id:id,_DELETED:true};});var updates=_extends({vertices:[],edges:[],workspaceId:workspaceId},_defineProperty({},resultType,elements));dispatch(api.update(updates));if(type==='edge'&&elements.length){dispatch(api.updateEdgeLabels({workspaceId:workspaceId,edges:elements}));}});}});}};},updateEdgeLabels:function updateEdgeLabels(_ref3){var workspaceId=_ref3.workspaceId,edges=_ref3.edges;return function(dispatch,getState){var state=getState();var elementState=state.element[workspaceId];if(!elementState)return;var vertices=elementState.vertices;var updates={};var addToUpdates=function addToUpdates(vertexId,label){if(vertices[vertexId]){var vertex=vertices[vertexId];if(vertex){var labels=vertex.edgeLabels||[];if(!labels.includes(label)){updates[vertexId]=[].concat(_toConsumableArray(labels),[label]);}}}};edges.forEach(function(edge){addToUpdates(edge.inVertexId,edge.label);addToUpdates(edge.outVertexId,edge.label);});if(!_.isEmpty(updates)){dispatch({type:'ELEMENT_UPDATE_EDGELABELS',payload:{workspaceId:workspaceId,vertexLabels:updates}});}};},setFocus:function setFocus(elementIds){return function(dispatch,getState){setFocusDebounce(dispatch,elementIds);};},update:function update(_ref4){var vertices=_ref4.vertices,edges=_ref4.edges,workspaceId=_ref4.workspaceId;return{type:'ELEMENT_UPDATE',payload:{vertices:vertices,edges:edges,workspaceId:workspaceId}};},updateElement:function updateElement(workspaceId,element){var _payload;return{type:'ELEMENT_UPDATE',payload:(_payload={},_defineProperty(_payload,element.type==='vertex'?'vertices':'edges',[element]),_defineProperty(_payload,'workspaceId',workspaceId),_payload)};},refreshElement:function refreshElement(_ref5){var workspaceId=_ref5.workspaceId,vertexId=_ref5.vertexId,edgeId=_ref5.edgeId;return function(dispatch,getState){if(!workspaceId){workspaceId=getState().workspace.currentId;}var params={},type;if(vertexId){params.graphVertexId=vertexId;type='vertex';}else if(edgeId){params.graphEdgeId=edgeId;type='edge';}ajax('GET','/'+type+'/properties',params).then(function(element){dispatch(api.updateElement(workspaceId,element));});};},ancillaryChange:function ancillaryChange(_ref6){var workspaceId=_ref6.workspaceId,id=_ref6.id;return function(dispatch,getState){var currentWorkspaceId=getState().workspace.currentId;if(currentWorkspaceId===workspaceId){dispatch(api.get({invalidate:true,includeAncillary:true,workspaceId:workspaceId,vertexIds:[id]}));}};},propertyChange:function propertyChange(change){return function(dispatch,getState){var graphEdgeId=change.graphEdgeId,graphVertexId=change.graphVertexId;var isEdge='graphEdgeId'in change;var isVertex='graphVertexId'in change;var state=getState();var workspaceIds=getWorkspaceIds(state);var updateOnWorkspace=function updateOnWorkspace(workspaceId){var vertexInStore=function vertexInStore(){for(var _len=arguments.length,ids=Array(_len),_key=0;_key<_len;_key++){ids[_key]=arguments[_key];}return _.all(ids,function(id){return workspaceId in state.element&&id in state.element[workspaceId].vertices;});};if(isVertex){if(vertexInStore(graphVertexId)){dispatch(api.get({workspaceId:workspaceId,vertexIds:[graphVertexId],invalidate:true}));}}else if(isEdge){var inVertexId=change.inVertexId,outVertexId=change.outVertexId;if(!inVertexId||!outVertexId||vertexInStore(inVertexId,outVertexId)){dispatch(api.get({workspaceId:workspaceId,edgeIds:[graphEdgeId],invalidate:true}));}}};workspaceIds.forEach(updateOnWorkspace);};},deleteElements:function deleteElements(_ref7){var vertexIds=_ref7.vertexIds,edgeIds=_ref7.edgeIds;return function(dispatch,getState){var state=getState();return Promise.map(getWorkspaceIds(state),function(workspaceId){if(!state.element[workspaceId]){return Promise.resolve();}var elementStore=state.element[workspaceId];var vertices=elementStore.vertices,edges=elementStore.edges;var update=function update(key,list,type,storeKey,otherStoreKey){var inStore=list.filter(function(id){return elementStore[storeKey][id];});if(inStore.length){return ajax('POST','/'+type+'/exists',_defineProperty({},key,inStore)).then(function(_ref8){var _api$update;var exists=_ref8.exists;var elements=[];_.map(exists,function(exists,id){if(!exists){elements.push({id:id,_DELETED:true});}});dispatch(api.update((_api$update={},_defineProperty(_api$update,storeKey,elements),_defineProperty(_api$update,otherStoreKey,[]),_defineProperty(_api$update,'workspaceId',workspaceId),_api$update)));});}};var updates=[];if(vertices&&vertexIds&&vertexIds.length){updates.push(update('vertexIds',vertexIds,'vertex','vertices','edges'));}if(edges&&edgeIds&&edgeIds.length){updates.push(update('edgeIds',edgeIds,'edge','edges','vertices'));}return Promise.all(updates);});};},putSearchResults:function putSearchResults(elements){return function(dispatch,getState){if(elements.length){var workspaceId=getState().workspace.currentId;var withoutScore=elements.map(function(element){var score=element.score,rest=_objectWithoutProperties(element,['score']);return rest;});var grouped=_.groupBy(withoutScore,'type');dispatch({type:'ELEMENT_UPDATE',payload:{workspaceId:workspaceId,vertices:grouped.vertex,edges:grouped.edge}});}};}};return api;});
//# sourceMappingURL=actions-impl.js.map

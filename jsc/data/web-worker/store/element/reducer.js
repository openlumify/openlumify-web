var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}define(['updeep'],function(u){'use strict';return function element(state,_ref){var type=_ref.type,payload=_ref.payload;if(!state)return{focusing:{vertexIds:{},edgeIds:{}}};if(payload){switch(type){case'ELEMENT_SET_FOCUS':return setFocusing(state,payload);case'ELEMENT_UPDATE':var workspaceId=payload.workspaceId;if(!workspaceId)throw new Error('WorkspaceId required');return _extends({},state,_defineProperty({},workspaceId,update(state[workspaceId],payload)));case'ELEMENT_UPDATE_EDGELABELS':return updateEdgeLabels(state,payload);}}return state;};function updateEdgeLabels(state,_ref2){var workspaceId=_ref2.workspaceId,vertexLabels=_ref2.vertexLabels;return u(_defineProperty({},workspaceId,{vertices:_extends({},_.mapObject(vertexLabels,function(labels){return{edgeLabels:u.constant(labels)};}))}),state);}function setFocusing(state,_ref3){var _ref3$vertexIds=_ref3.vertexIds,vertexIds=_ref3$vertexIds===undefined?[]:_ref3$vertexIds,_ref3$edgeIds=_ref3.edgeIds,edgeIds=_ref3$edgeIds===undefined?[]:_ref3$edgeIds,_ref3$elementIds=_ref3.elementIds,elementIds=_ref3$elementIds===undefined?[]:_ref3$elementIds;var updates={vertexIds:_.object(vertexIds.concat(elementIds).map(function(vertexId){return[vertexId,true];})),edgeIds:_.object(edgeIds.concat(elementIds).map(function(edgeId){return[edgeId,true];}))};return u({focusing:u.constant(updates)},state);}function update(previous,_ref4){var vertices=_ref4.vertices,edges=_ref4.edges;var updates={};var updater=function updater(e){if(e._DELETED){return null;}e.propertiesByName=e.propertiesByName?e.propertiesByName:_.groupBy(e.properties,'name');return u.constant(e);};if(vertices&&vertices.length){updates.vertices=_.mapObject(_.indexBy(vertices,'id'),updater);}else if(!previous||!previous.vertices)updates.vertices={};if(edges&&edges.length){updates.edges=_.mapObject(_.indexBy(edges,'id'),updater);}else if(!previous||!previous.edges)updates.edges={};return u(updates,previous);}});
//# sourceMappingURL=reducer.js.map

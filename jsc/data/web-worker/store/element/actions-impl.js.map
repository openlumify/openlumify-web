{"version":3,"sources":["../../../../../js/data/web-worker/store/element/actions-impl.js"],"names":["define","actions","ajax","protectFromMain","setFocusDebounce","_","debounce","dispatch","elementIds","type","payload","getWorkspaceIds","element","focusing","workspaces","Object","keys","api","get","workspaceId","vertexIds","edgeIds","invalidate","includeAncillary","getState","length","state","workspace","currentId","elements","toRequest","vertices","reject","vId","edges","eId","forEach","typeIds","resultType","then","result","byId","indexBy","map","id","_DELETED","updates","update","updateEdgeLabels","elementState","addToUpdates","vertexId","label","vertex","labels","edgeLabels","includes","edge","inVertexId","outVertexId","isEmpty","vertexLabels","setFocus","updateElement","refreshElement","edgeId","params","graphVertexId","graphEdgeId","ancillaryChange","currentWorkspaceId","propertyChange","change","isEdge","isVertex","workspaceIds","updateOnWorkspace","vertexInStore","ids","all","deleteElements","Promise","resolve","elementStore","key","list","storeKey","otherStoreKey","inStore","filter","exists","push","putSearchResults","withoutScore","score","rest","grouped","groupBy"],"mappings":"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","file":"actions-impl.js","sourcesContent":["define(['../actions', 'data/web-worker/util/ajax'], function(actions, ajax) {\n    actions.protectFromMain();\n\n\n    const setFocusDebounce = _.debounce((dispatch, elementIds) => {\n        dispatch({\n            type: 'ELEMENT_SET_FOCUS',\n            payload: elementIds\n        })\n    }, 250);\n    const getWorkspaceIds = ({ element }) => {\n        const { focusing, ...workspaces } = element;\n        return Object.keys(workspaces);\n    };\n\n\n    const api = {\n        get: ({ workspaceId, vertexIds = [], edgeIds = [], invalidate, includeAncillary}) => (dispatch, getState) => {\n            if (vertexIds.length || edgeIds.length) {\n                const state = getState();\n                if (!workspaceId) {\n                    workspaceId = state.workspace.currentId;\n                }\n                const elements = state.element[workspaceId]\n                const toRequest = { vertexIds, edgeIds };\n\n                if (invalidate !== true && elements) {\n                    if (elements.vertices) toRequest.vertexIds = _.reject(toRequest.vertexIds, vId => vId in elements.vertices);\n                    if (elements.edges) toRequest.edgeIds = _.reject(toRequest.edgeIds, eId => eId in elements.edges);\n                }\n\n                ['vertex', 'edge'].forEach(type => {\n                    const typeIds = type + 'Ids';\n                    const resultType = type === 'vertex' ? 'vertices' : 'edges';\n\n                    if (toRequest[typeIds].length) {\n                        ajax('POST', `/${type}/multiple`, { workspaceId, [typeIds]: toRequest[typeIds], includeAncillary })\n                            .then((result) => {\n                                const byId = _.indexBy(result[resultType], 'id');\n                                const elements = toRequest[typeIds].map(id => {\n                                    if (id in byId) {\n                                        return byId[id];\n                                    }\n                                    return { id, _DELETED: true };\n                                })\n                                const updates = {\n                                     vertices: [],\n                                    edges: [],\n                                    workspaceId,\n                                    ...{[resultType]:elements}\n                                };\n                                dispatch(api.update(updates));\n                                if (type === 'edge' && elements.length) {\n                                    dispatch(api.updateEdgeLabels({ workspaceId, edges: elements }));\n                                }\n                            })\n                    }\n                });\n            }\n        },\n\n        updateEdgeLabels: ({ workspaceId, edges }) => (dispatch, getState) => {\n            const state = getState();\n            const elementState = state.element[workspaceId];\n            if (!elementState) return;\n            const { vertices } = elementState;\n            const updates = {};\n            const addToUpdates = (vertexId, label) => {\n                if (vertices[vertexId]) {\n                    const vertex = vertices[vertexId];\n                    if (vertex) {\n                        const labels = vertex.edgeLabels || [];\n                        if (!labels.includes(label)) {\n                            updates[vertexId] = [...labels, label];\n                        }\n                    }\n                }\n            };\n\n            edges.forEach(edge => {\n                addToUpdates(edge.inVertexId, edge.label)\n                addToUpdates(edge.outVertexId, edge.label)\n            })\n\n            if (!_.isEmpty(updates)) {\n                dispatch({\n                    type: 'ELEMENT_UPDATE_EDGELABELS',\n                    payload: { workspaceId, vertexLabels: updates }\n                })\n            }\n        },\n\n        setFocus: (elementIds) => (dispatch, getState) => {\n            setFocusDebounce(dispatch, elementIds)\n        },\n\n        update: ({ vertices, edges, workspaceId }) => ({\n            type: 'ELEMENT_UPDATE',\n            payload: { vertices, edges, workspaceId }\n        }),\n\n        updateElement: (workspaceId, element) => ({\n            type: 'ELEMENT_UPDATE',\n            payload: {\n                [element.type === 'vertex' ? 'vertices' : 'edges']: [element],\n                workspaceId\n            }\n        }),\n\n        refreshElement: ({ workspaceId, vertexId, edgeId }) => (dispatch, getState) => {\n            if (!workspaceId) {\n                workspaceId = getState().workspace.currentId;\n            }\n\n            var params = {}, type;\n            if (vertexId) {\n                params.graphVertexId = vertexId;\n                type = 'vertex';\n            } else if (edgeId) {\n                params.graphEdgeId = edgeId;\n                type = 'edge';\n            }\n\n            ajax('GET', `/${type}/properties`, params).then(element => {\n                dispatch(api.updateElement(workspaceId, element));\n            });\n        },\n\n        ancillaryChange: ({ workspaceId, id }) => (dispatch, getState) => {\n            const currentWorkspaceId = getState().workspace.currentId;\n            if (currentWorkspaceId === workspaceId) {\n                dispatch(api.get({\n                    invalidate: true,\n                    includeAncillary: true,\n                    workspaceId,\n                    vertexIds: [id]\n                }));\n            }\n        },\n\n        propertyChange: (change) => (dispatch, getState) => {\n            const { graphEdgeId, graphVertexId } = change;\n            const isEdge = 'graphEdgeId' in change;\n            const isVertex = 'graphVertexId' in change;\n            const state = getState();\n            const workspaceIds = getWorkspaceIds(state);\n            const updateOnWorkspace = (workspaceId) => {\n                const vertexInStore = (...ids) => {\n                    return _.all(ids, id => workspaceId in state.element && (id in state.element[workspaceId].vertices));\n                }\n\n                if (isVertex) {\n                    if (vertexInStore(graphVertexId)) {\n                        dispatch(api.get({ workspaceId, vertexIds: [graphVertexId], invalidate: true }));\n                    }\n                } else if (isEdge) {\n                    const { inVertexId, outVertexId } = change;\n                    if (!inVertexId || !outVertexId || vertexInStore(inVertexId, outVertexId)) {\n                        dispatch(api.get({ workspaceId, edgeIds: [graphEdgeId], invalidate: true }));\n                    }\n                }\n            };\n\n            workspaceIds.forEach(updateOnWorkspace);\n        },\n\n        deleteElements: ({ vertexIds, edgeIds }) => (dispatch, getState) => {\n            const state = getState();\n\n            return Promise.map(getWorkspaceIds(state), (workspaceId) => {\n                if (!state.element[workspaceId]) {\n                    return Promise.resolve();\n                }\n                const elementStore = state.element[workspaceId];\n                const { vertices, edges } = elementStore;\n                const update = (key, list, type, storeKey, otherStoreKey) => {\n                    const inStore = list.filter(id => elementStore[storeKey][id]);\n                    if (inStore.length) {\n                        return ajax('POST', `/${type}/exists`, { [key]: inStore })\n                            .then(({ exists }) => {\n                                const elements = [];\n                                _.map(exists, (exists, id) => {\n                                    if (!exists) {\n                                        elements.push({ id, _DELETED: true })\n                                    }\n                                })\n                                dispatch(api.update({ [storeKey]: elements, [otherStoreKey]: [], workspaceId }));\n                            })\n                    }\n                };\n\n                const updates = [];\n                if (vertices && vertexIds && vertexIds.length) {\n                    updates.push(update('vertexIds', vertexIds, 'vertex', 'vertices', 'edges'));\n                }\n                if (edges && edgeIds && edgeIds.length) {\n                    updates.push(update('edgeIds', edgeIds, 'edge', 'edges', 'vertices'));\n                }\n\n                return Promise.all(updates);\n            });\n        },\n\n        putSearchResults: (elements) => (dispatch, getState) => {\n            if (elements.length) {\n                const workspaceId = getState().workspace.currentId;\n                const withoutScore = elements.map(element => {\n                    const {score, ...rest} = element;\n                    return rest;\n                });\n                const grouped = _.groupBy(withoutScore, 'type');\n\n                dispatch({\n                    type: 'ELEMENT_UPDATE',\n                    payload: {\n                        workspaceId,\n                        vertices: grouped.vertex,\n                        edges: grouped.edge\n                    }\n                });\n            }\n        }\n    }\n\n    return api;\n})\n\n"]}
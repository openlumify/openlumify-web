{"version":3,"sources":["../../../../../js/data/web-worker/store/middleware/actionRouter.js"],"names":["define","actions","getState","next","action","_","isFunction","type","payload","meta","workerImpl","name","require","worker","default","impl","result","console","error","Error"],"mappings":"AAOAA,OAAO,CAAC,YAAD,CAAP,CAAuB,SAASC,OAAT,CAAkB,CACrC,MAAO,mBAAGC,SAAH,MAAGA,QAAH,OAAkB,UAACC,IAAD,QAAU,UAACC,MAAD,CAAY,CAC3C,GAAIC,EAAEC,UAAF,CAAaF,MAAb,CAAJ,CAA0B,MAAOD,MAAKC,MAAL,CAAP,CADiB,GAGrCG,KAHqC,CAGbH,MAHa,CAGrCG,IAHqC,CAG/BC,OAH+B,CAGbJ,MAHa,CAG/BI,OAH+B,CAGtBC,IAHsB,CAGbL,MAHa,CAGtBK,IAHsB,CAI3C,GAAIF,OAAS,wBAAT,EAAqCE,IAAzC,CAA+C,IAErCC,WAFqC,CAEhBD,IAFgB,CAErCC,UAFqC,CAEzBC,IAFyB,CAEhBF,IAFgB,CAEzBE,IAFyB,CAI3C,GAAID,YAAcC,IAAlB,CAAwB,CACpBC,QAAQ,CAACF,UAAD,CAAR,CAAsB,SAASG,MAAT,CAAiB,CACnC,GAAI,WAAaA,OAAjB,CAAyB,CACrBA,OAASA,OAAOC,OAAhB,CACH,CACD,GAAIH,OAAQE,OAAZ,CAAoB,CAChB,GAAIE,MAAOF,OAAOF,IAAP,CAAX,CACA,GAAIN,EAAEC,UAAF,CAAaS,IAAb,CAAJ,CAAwB,CACpB,GAAIC,QAASD,KAAKP,OAAL,CAAb,CACA,GAAIQ,MAAJ,CAAY,CACRb,KAAKa,MAAL,EACH,CACJ,CALD,IAKO,CACHb,KAAKY,IAAL,EACH,CACJ,CAVD,IAUO,CACHE,QAAQC,KAAR,CAAcL,MAAd,EACA,KAAM,IAAIM,MAAJ,CAAU,mDAAqDR,IAArD,CAA4D,aAA5D,CAA4ED,UAAtF,CAAN,CACH,CACJ,CAlBD,CAkBG,SAASQ,KAAT,CAAgB,CACfD,QAAQC,KAAR,CAAc,gDAAd,CAAgEA,KAAhE,EACA,KAAMA,MAAN,CACH,CArBD,EAsBH,CAvBD,IAuBO,CACH,KAAM,IAAIC,MAAJ,CAAU,mDAAqDZ,IAA/D,CAAN,CACH,CACJ,CA9BD,IA8BO,CACH,MAAOJ,MAAKC,MAAL,CAAP,CACH,CACJ,CArCwB,EAAlB,EAAP,CAsCH,CAvCD","file":"actionRouter.js","sourcesContent":["/**\n * Route actions with type: ROUTE_TO_WORKER_ACTION,\n * to a method supplied in the module `meta.workerImpl`.\n *\n * Allows actions to be dispatched that have complex behavior\n * to be processed by redux-thunk/promise, etc.\n */\ndefine(['../actions'], function(actions) {\n    return ({ getState }) => (next) => (action) => {\n        if (_.isFunction(action)) return next(action);\n\n        var { type, payload, meta } = action;\n        if (type === 'ROUTE_TO_WORKER_ACTION' && meta) {\n\n            var { workerImpl, name } = meta;\n\n            if (workerImpl && name) {\n                require([workerImpl], function(worker) {\n                    if ('default' in worker) {\n                        worker = worker.default;\n                    }\n                    if (name in worker) {\n                        var impl = worker[name];\n                        if (_.isFunction(impl)) {\n                            var result = impl(payload);\n                            if (result) {\n                                next(result)\n                            }\n                        } else {\n                            next(impl)\n                        }\n                    } else {\n                        console.error(worker);\n                        throw new Error('Action dispatched with no matching worker impl: ' + name + ', worker = ' + workerImpl)\n                    }\n                }, function(error) {\n                    console.error('Action dispatched with worker that got error: ', error);\n                    throw error;\n                })\n            } else {\n                throw new Error('workerImpl and name required in meta for type = ' + type)\n            }\n        } else {\n            return next(action);\n        }\n    }\n})\n"]}
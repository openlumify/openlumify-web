{"version":3,"sources":["../../../js/data/web-worker/store.js"],"names":["global","define","registry","jsonpatch","redux","rootReducer","observe","middleware","store","getStore","createStore","compose","applyMiddleware","subscribe","stateChanged","getState","getOrWaitForNestedState","getterFn","waitForConditionFn","check","v","s","_","isUndefined","isEmpty","Promise","try","state","unsubscribe","newValue","done","initialState","previousState","storeSubscription","newState","diff","compare","length","dispatchMain","action","type","payload","meta","originator"],"mappings":"AAAA,CAAC,SAASA,MAAT,CAAiB,CACd,aAGAC,OAAO,CACH,gCADG,CAEH,iBAFG,CAGH,OAHG,CAIH,qBAJG,CAKH,0BALG,CAQH,iCARG,CASH,0BATG,CAUH,4BAVG,CAWH,yBAXG,CAYH,gCAZG,CAAP,CAcG,SAASC,QAAT,CAAmBC,SAAnB,CAA8BC,KAA9B,CAAqCC,WAArC,CAAkDC,OAAlD,CAA0E,+BAAZC,UAAY,iDAAZA,UAAY,0BACzE,GAAIC,MAAJ,CAEA,MAAO,CACHC,QADG,oBACQ,CACP,GAAI,CAACD,KAAL,CAAY,CACRA,MAAQJ,MAAMM,WAAN,CACJL,WADI,CAEJD,MAAMO,OAAN,CACIP,MAAMQ,eAAN,aAAyBL,UAAzB,CADJ,CAEID,OAFJ,CAFI,CAAR,CAOAE,MAAMK,SAAN,CAAgBC,aAAaN,MAAMO,QAAN,EAAb,CAAhB,EACH,CACD,MAAOP,MAAP,CACH,CAbE,CAeHQ,uBAfG,kCAeqBC,QAfrB,CAe+BC,kBAf/B,CAemD,CAClD,GAAMC,OAAQD,oBACT,WAAK,CACF,GAAME,GAAIH,SAASI,CAAT,CAAV,CACA,MAAO,CAACC,EAAEC,WAAF,CAAcH,CAAd,CAAD,EAAqB,CAACE,EAAEE,OAAF,CAAUJ,CAAV,CAA7B,CACH,CAJL,CAMA,MAAOK,SAAQC,GAAR,CAAY,UAAW,CAC1B,GAAIC,OAAQnB,MAAMO,QAAN,EAAZ,CACA,GAAII,MAAMQ,KAAN,CAAJ,CAAkB,CACd,MAAOV,UAASU,KAAT,CAAP,CACH,CAFD,IAEO,CACH,MAAO,IAAIF,QAAJ,CAAY,cAAQ,CACvB,GAAMG,aAAcpB,MAAMK,SAAN,CAAgB,UAAM,CACtC,GAAMc,OAAQnB,MAAMO,QAAN,EAAd,CACA,GAAII,MAAMQ,KAAN,CAAJ,CAAkB,CACd,GAAME,UAAWZ,SAAST,MAAMO,QAAN,EAAT,CAAjB,CACAa,cACAE,KAAKD,QAAL,EACH,CACJ,CAPmB,CAApB,CAQH,CATM,CAAP,CAUH,CACJ,CAhBM,CAAP,CAiBH,CAvCE,CAAP,CA2CA,QAASf,aAAT,CAAsBiB,YAAtB,CAAoC,CAChC,GAAIC,eAAgBD,YAApB,CACA,MAAO,SAASE,kBAAT,EAA6B,CAChC,GAAIC,UAAW1B,MAAMO,QAAN,EAAf,CACA,GAAImB,WAAaF,aAAjB,CAAgC,CAC5B,GAAIG,MAAOhC,UAAUiC,OAAV,CAAkBJ,aAAlB,CAAiCE,QAAjC,CAAX,CACA,GAAIC,MAAQA,KAAKE,MAAjB,CAAyB,CACrBL,cAAgBE,QAAhB,CACAI,aAAa,kBAAb,CAAiC,CAC7BC,OAAQ,CACJC,KAAM,kBADF,CAEJC,QAASN,IAFL,CAGJO,KAAM,CACFC,WAAY,WADV,CAHF,CADqB,CAAjC,EASH,CACJ,CACJ,CAjBD,CAkBH,CACJ,CAjFD,EAkFH,CAtFD,EAsFG,IAtFH","file":"store.js","sourcesContent":["(function(global) {\n    'use strict';\n\n\n    define([\n        'configuration/plugins/registry',\n        'fast-json-patch',\n        'redux',\n        './store/rootReducer',\n        './store/enhancer/observe',\n\n        // Middleware\n        './store/middleware/actionRouter',\n        './store/middleware/thunk',\n        './store/middleware/promise',\n        './store/middleware/undo',\n        './store/middleware/dataRequest',\n        //'./store/middleware/logger'\n    ], function(registry, jsonpatch, redux, rootReducer, observe, ...middleware) {\n        var store;\n\n        return {\n            getStore() {\n                if (!store) {\n                    store = redux.createStore(\n                        rootReducer,\n                        redux.compose(\n                            redux.applyMiddleware(...middleware),\n                            observe\n                        )\n                    );\n                    store.subscribe(stateChanged(store.getState()))\n                }\n                return store;\n            },\n\n            getOrWaitForNestedState(getterFn, waitForConditionFn) {\n                const check = waitForConditionFn ||\n                    (s => {\n                        const v = getterFn(s);\n                        return !_.isUndefined(v) && !_.isEmpty(v)\n                    });\n\n                return Promise.try(function() {\n                    var state = store.getState();\n                    if (check(state)) {\n                        return getterFn(state)\n                    } else {\n                        return new Promise(done => {\n                            const unsubscribe = store.subscribe(() => {\n                                const state = store.getState();\n                                if (check(state)) {\n                                    const newValue = getterFn(store.getState())\n                                    unsubscribe();\n                                    done(newValue);\n                                }\n                            })\n                        })\n                    }\n                })\n            }\n        };\n\n        // Send worker state changes to main thread as JSON-patches\n        function stateChanged(initialState) {\n            var previousState = initialState;\n            return function storeSubscription() {\n                var newState = store.getState();\n                if (newState !== previousState) {\n                    var diff = jsonpatch.compare(previousState, newState);\n                    if (diff && diff.length) {\n                        previousState = newState;\n                        dispatchMain('reduxStoreAction', {\n                            action: {\n                                type: 'STATE_APPLY_DIFF',\n                                payload: diff,\n                                meta: {\n                                    originator: 'webworker'\n                                }\n                            }\n                        })\n                    }\n                }\n            }\n        }\n    })\n})(this)\n"]}
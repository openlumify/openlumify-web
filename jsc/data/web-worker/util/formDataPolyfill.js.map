{"version":3,"sources":["../../../../js/data/web-worker/util/formDataPolyfill.js"],"names":["exports","FormData","boundary","Math","random","toString","internalData","data","__append","inp","i","len","length","push","charCodeAt","byteLength","Uint8Array","___send$rw","XMLHttpRequest","prototype","send","__endedMultipart","setRequestHeader","call","buffer","append","name","value","filename","arguments","SyntaxError","part","File","Blob","FileReaderSync","readAsArrayBuffer","replace","self"],"mappings":"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","file":"formDataPolyfill.js","sourcesContent":["/*\n * FormData for XMLHttpRequest 2  -  Polyfill for Web Worker\n * (c) 2014 Rob Wu <rob@robwu.nl>\n * License: MIT\n * - append(name, value[, filename])\n * - XMLHttpRequest.prototype.send(object FormData)\n *\n * Specification: http://www.w3.org/TR/XMLHttpRequest/#formdata\n *                http://www.w3.org/TR/XMLHttpRequest/#the-send-method\n * The .append() implementation also accepts Uint8Array and ArrayBuffer objects\n * Web Workers do not natively support FormData:\n *                http://dev.w3.org/html5/workers/#apis-available-to-workers\n * Originally released in 2012 as a part of http://stackoverflow.com/a/10002486.\n * Updates since initial release:\n * - Forward-compatibility by testing whether FormData exists before defining it.\n * - Increased robustness of .append.\n * - Allow any typed array in .append.\n * - Remove use of String.prototype.toString to work around a Firefox bug.\n * - Use typed array in xhr.send instead of arraybuffer to get rid of deprecation\n *   warnings.\n **/\n/*eslint no-use-before-define:0, eqeqeq:0, curly:0, no-undef:0 */\n(function(exports) {\n    'use strict';\n    if (exports.FormData) {\n        // Don't replace FormData if it already exists\n        return;\n    }\n    // Export variable to the global scope\n    exports.FormData = function() {\n        // Force a Constructor\n        if (!(this instanceof FormData)) return new FormData();\n        // Generate a random boundary - This must be unique with respect to the form's contents.\n        this.boundary = '------RWWorkerFormDataBoundary' + Math.random().toString(36);\n        var internalData = this.data = [];\n        this.__append = function(inp) {\n            var i = 0, len;\n            if (typeof inp == 'string') {\n                for (len = inp.length; i < len; ++i) {\n                    internalData.push(inp.charCodeAt(i) & 0xff);\n                }\n            } else if (inp && inp.byteLength) {/*If ArrayBuffer or typed array */\n                if (!('byteOffset' in inp))   /* If ArrayBuffer, wrap in view */\n                    inp = new Uint8Array(inp);\n                for (len = inp.byteLength; i < len; ++i) {\n                    internalData.push(inp[i] & 0xff);\n                }\n            }\n        };\n    }\n\n    var FormData = exports.FormData,\n        ___send$rw = XMLHttpRequest.prototype.send;\n    XMLHttpRequest.prototype.send = function(data) {\n        if (data instanceof FormData) {\n            if (!data.__endedMultipart) data.__append('--' + data.boundary + '--\\r\\n');\n            data.__endedMultipart = true;\n            this.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + data.boundary);\n            data = new Uint8Array(data.data);\n        }\n        // Invoke original XHR.send\n        return ___send$rw.call(this, (data && data.buffer) || data);\n    };\n\n    /**\n    * @param name     String                                   Key name\n    * @param value    String|Blob|File|typed array|ArrayBuffer Value\n    * @param filename String                                   Optional File name (when value is not a string).\n    **/\n    FormData.prototype.append = function(name, value, filename) {\n        if (this.__endedMultipart) {\n            // Truncate the closing boundary\n            this.data.length -= this.boundary.length + 6;\n            this.__endedMultipart = false;\n        }\n        if (arguments.length < 2) {\n            throw new SyntaxError('Not enough arguments');\n        }\n        var part = '--' + this.boundary + '\\r\\n' +\n                'Content-Disposition: form-data; name=\"' + name + '\"';\n\n        if (value instanceof File || value instanceof Blob) {\n            return this.append(name,\n                            new Uint8Array(new FileReaderSync().readAsArrayBuffer(value)),\n                            filename || value.name);\n        } else if (typeof value.byteLength == 'number') {\n            // Duck-typed typed array or array buffer\n            part += '; filename=\"' + (filename || 'blob').replace(/\"/g, '%22') + '\"\\r\\n';\n            part += 'Content-Type: application/octet-stream\\r\\n\\r\\n';\n            this.__append(part);\n            this.__append(value);\n            part = '\\r\\n';\n        } else {\n            part += '\\r\\n\\r\\n' + value + '\\r\\n';\n        }\n        this.__append(part);\n    };\n})(this || self);\n"]}
{"version":3,"sources":["../../../../js/data/web-worker/services/edge.js"],"names":["define","ajax","storeHelper","require","api","create","options","edgeId","exists","edgeIds","length","properties","graphEdgeId","propertyDetails","propertyName","propertyKey","visibilitySource","setPropertyVisibility","property","newVisibilitySource","oldVisibilitySource","key","name","setProperty","optionalWorkspaceId","url","edgePropertyUrl","_","tap","value","params","sourceInfo","JSON","stringify","justificationText","isUndefined","metadata","workspaceId","updateElement","deleteProperty","details","history","withVisibility","propertyHistory","extend","multiple","createStoreAccessorOrDownloader","store","setVisibility"],"mappings":"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","file":"edge.js","sourcesContent":["/**\n * Routes for edges\n *\n * @module services/edge\n * @see module:dataRequest\n */\ndefine([\n    '../util/ajax',\n    './storeHelper',\n    'require'\n], function(ajax, storeHelper, require) {\n    'use strict';\n\n    /**\n     * @alias module:services/edge\n     */\n    var api = {\n\n        /**\n         * Create an edge\n         *\n         * @param {object} options\n         */\n        create: function(options) {\n            return ajax('POST', '/edge/create', options);\n        },\n\n        /**\n         * Delete an edge (sandboxed)\n         *\n         * @param {string} edgeId\n         */\n        'delete': function(edgeId) {\n            return ajax('DELETE', '/edge', {\n                edgeId: edgeId\n            });\n        },\n\n        /**\n         * Check if the edge(s) exists (in current workspace)\n         *\n         * @param {Array.<string>} edgeIds\n         */\n        exists: function(edgeIds) {\n            return ajax(edgeIds.length > 1 ? 'POST' : 'GET', '/edge/exists', {\n                edgeIds: edgeIds\n            });\n        },\n\n        /**\n         * Get edge properties\n         *\n         * @param {string} edgeId\n         */\n        properties: function(edgeId) {\n            return ajax('GET', '/edge/properties', {\n                graphEdgeId: edgeId\n            });\n        },\n\n        propertyDetails: function(edgeId, propertyName, propertyKey, visibilitySource = '') {\n            return ajax('GET', '/edge/property/details', {\n                edgeId,\n                propertyName,\n                propertyKey,\n                visibilitySource\n            });\n        },\n\n        /**\n         * Set visibility on a property\n         *\n         * @param {string} edgeId\n         * @param {object} property\n         * @param {string} property.visibilitySource\n         * @param {string} property.oldVisibilitySource\n         * @param {string} property.key\n         * @param {string} property.name\n         */\n        setPropertyVisibility: function(edgeId, property) {\n            return ajax('POST', '/edge/property/visibility', {\n                graphEdgeId: edgeId,\n                newVisibilitySource: property.visibilitySource,\n                oldVisibilitySource: property.oldVisibilitySource,\n                propertyKey: property.key,\n                propertyName: property.name\n            })\n        },\n\n        /**\n         * Change/add property\n         *\n         * @param {string} edgeId\n         * @param {object} property\n         * @param {string} property.visibilitySource\n         * @param {string} property.justificationText\n         * @param {string} property.value\n         * @param {string} property.name\n         * @param {string} [property.key]\n         * @param {object} [property.metadata]\n         * @param {object} [property.sourceInfo]\n         * @param {string} [workspaceId]\n         */\n        setProperty: function(edgeId, property, optionalWorkspaceId) {\n            var url = storeHelper.edgePropertyUrl(property);\n            return ajax('POST', url, _.tap({\n                 edgeId: edgeId,\n                 propertyName: property.name,\n                 value: property.value,\n                 visibilitySource: property.visibilitySource,\n                 oldVisibilitySource: property.oldVisibilitySource\n            }, function(params) {\n                if (property.sourceInfo) {\n                    params.sourceInfo = JSON.stringify(property.sourceInfo);\n                } else if (property.justificationText) {\n                    params.justificationText = property.justificationText;\n                }\n                if (!_.isUndefined(property.key)) {\n                    params.propertyKey = property.key;\n                }\n                if (property.metadata) {\n                    params.metadata = JSON.stringify(property.metadata)\n                }\n                if (optionalWorkspaceId) {\n                    params.workspaceId = optionalWorkspaceId;\n                }\n            })).tap(storeHelper.updateElement);\n        },\n\n        /**\n         * Delete a property\n         *\n         * @param {string} edgeId\n         * @param {object} property\n         * @param {string} property.name\n         * @param {string} property.key\n         */\n        deleteProperty: function(edgeId, property) {\n            var url = storeHelper.edgePropertyUrl(property);\n            return ajax('DELETE', url, {\n                edgeId: edgeId,\n                propertyName: property.name,\n                propertyKey: property.key\n            })\n        },\n\n        details: function(edgeId) {\n            return ajax('GET', '/edge/details', { edgeId: edgeId });\n        },\n\n        /**\n         * Get history of edge (property changes, etc)\n         *\n         * @param {string} edgeId\n         * @param {boolean} withVisibility\n         */\n        history: function(edgeId, withVisibility) {\n            return ajax('GET', '/edge/history', {\n                graphEdgeId: edgeId,\n                withVisibility: withVisibility\n            });\n        },\n\n        /**\n         * Get history for single property\n         *\n         * @param {string} edgeId\n         * @param {object} property\n         * @param {string} property.name\n         * @param {string} property.key\n         * @param {object} [options]\n         */\n        propertyHistory: function(edgeId, property, options) {\n            return ajax('GET', '/edge/property/history', _.extend(\n                {},\n                options || {},\n                {\n                    graphEdgeId: edgeId,\n                    propertyName: property.name,\n                    propertyKey: property.key\n                }\n            ));\n        },\n\n        /**\n         * @see module:services/edge.store\n         * @function\n         */\n        multiple: storeHelper.createStoreAccessorOrDownloader('edge'),\n\n        /**\n         * Get the edgeIds from the cache or request multiple edges\n         * if they aren't yet cached.\n         *\n         * @function\n         * @param {object} obj\n         * @param {Array.<string>} obj.edgeIds\n         * @return {Array.<object>} edges\n         * @example\n         * dataRequest('edge', 'store', {\n         *    edgeIds: ['e1', 'e2']\n         * }).then(function(edges) {\n         *     // ...\n         * })\n         */\n        store: function(options) {\n            return api.multiple(options);\n        },\n\n        /**\n         * Set visibility on an edge\n         *\n         * @param {string} edgeId\n         * @param {string} visibilitySource\n         */\n        setVisibility: function(edgeId, visibilitySource) {\n            return ajax('POST', '/edge/visibility', {\n                graphEdgeId: edgeId,\n                visibilitySource: visibilitySource\n            }).tap(storeHelper.updateElement);\n        }\n    };\n\n    return api;\n});\n"]}
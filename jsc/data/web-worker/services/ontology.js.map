{"version":3,"sources":["../../../../js/data/web-worker/services/ontology.js"],"names":["define","ajax","store","registry","documentExtensionPoint","e","_","isArray","ignoreColorWarnings","PARENT_CONCEPT","ROOT_CONCEPT","ontologyReady","s","ontology","publicData","currentWorkspaceId","isEmpty","concepts","properties","relationships","warnOnce","memoize","console","warn","apply","arguments","length","subscribeToClear","once","_store","getStore","selectOntology","state","workspace","currentId","observe","current","previous","defer","api","clearMemoizedValues","getOntology","getOrWaitForNestedState","JSON","parse","stringify","extensions","extensionsForPoint","Object","keys","forEach","key","obj","isFunction","cache","dispatchMain","paths","Promise","all","then","results","shift","list","sortBy","values","byTitle","byDataType","groupBy","byDependentToCompound","chain","filter","p","map","dependentPropertyIris","iri","title","flatten","object","value","propertiesByDomainType","type","pluck","compact","uniq","propertyName","error","items","propertiesByRelationship","relationshipId","propertyIds","collectPropertyIds","rId","relation","byId","parentId","parentIri","push","pId","pick","propertiesByConceptId","conceptId","concept","parentConceptId","parentConcept","clsIndex","entityConcept","buildTree","forAdmin","onlyEntityConcepts","bind","addFlattenedTitles","indexBy","byClassName","root","groupedByParent","unique","findChildrenForNode","node","className","children","id","child","glyphIconHref","glyphIconSelectedHref","userVisible","displayName","color","openlumifyEnvironment","dev","contains","conceptsById","includeThing","currentParentConcept","parents","reverse","leadingSlashIfNeeded","flattenedDisplayName","join","indent","replace","extend","ancestors","conceptIriIsVisible","r","some","domainConceptIris","rangeConceptIris","out","groupedByRelated","groupedBySourceDestConcepts","conceptGrouping","groupedByRelatedConcept","groups","addToAllSourceDestChildrenGroups","source","dest","genSourceDestKey","destConcept","c","sourceConcept","mapObject","relationshipsBetween"],"mappings":"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","file":"ontology.js","sourcesContent":["\n/**\n * Get the current ontology. Includes:\n *\n * * Concepts: Vertex types\n * * Properties: Properties for elements\n * * Relationships: Edges\n *\n * @module services/ontology\n * @see module:dataRequest\n */\ndefine([\n    '../util/ajax',\n    '../store',\n    'configuration/plugins/registry'\n], function(ajax, store, registry) {\n    'use strict';\n\n    /**\n     * @undocumented\n     */\n    registry.documentExtensionPoint('org.openlumify.ontology',\n        'Ignore some ontology warnings',\n        function(e) {\n            return _.isArray(e.ignoreColorWarnings);\n        }\n    );\n\n    var PARENT_CONCEPT = 'http://www.w3.org/2002/07/owl#Thing';\n    var ROOT_CONCEPT = 'http://openlumify.org#root';\n    var ontologyReady = function(s) {\n        return s &&\n        s.ontology &&\n        publicData.currentWorkspaceId &&\n        s.ontology[publicData.currentWorkspaceId] &&\n        !_.isEmpty(s.ontology[publicData.currentWorkspaceId].concepts) &&\n        !_.isEmpty(s.ontology[publicData.currentWorkspaceId].properties) &&\n        !_.isEmpty(s.ontology[publicData.currentWorkspaceId].relationships);\n    };\n    var warnOnce = _.memoize(function() {\n        console.warn.apply(console, arguments);\n    }, function() {\n        return arguments.length === 2 ? arguments[1] : arguments[0];\n    });\n    var subscribeToClear = _.once(function() {\n        var _store = store.getStore();\n        var selectOntology = function(state) {\n            return state.workspace.currentId && state.ontology && state.ontology[state.workspace.currentId];\n        };\n\n        _store.observe(selectOntology, function(current, previous) {\n            if (previous && current) {\n                _.defer(api.clearMemoizedValues);\n            }\n        });\n    });\n    var getOntology = function() {\n        return store.getOrWaitForNestedState(function(s) {\n            subscribeToClear();\n            return JSON.parse(JSON.stringify(s.ontology[publicData.currentWorkspaceId]));\n        }, ontologyReady)\n    }\n    var extensions = registry.extensionsForPoint('org.openlumify.ontology');\n\n    /**\n     * @alias module:services/ontology\n     */\n    var api = {\n\n            clearMemoizedValues: function() {\n                Object.keys(api).forEach(function(key) {\n                    var obj = api[key];\n                    if (_.isFunction(obj) && 'cache' in obj) {\n                        obj.cache = {};\n                    }\n                });\n                dispatchMain('dataRequestFastPassClear', {\n                    paths: [\n                        'ontology/ontology',\n                        'ontology/properties',\n                        'ontology/relationships'\n                    ]\n                })\n\n            },\n\n            /**\n             * All ontology objects: concepts, properties, relationships\n             *\n             * The result is cached so only first call makes a request to server.\n             *\n             * @function\n             */\n            ontology: _.memoize(function() {\n                return Promise.all([\n                    api.concepts(),\n                    api.properties(),\n                    api.relationships()\n                ]).then(function(results) {\n                    var concepts = results.shift(),\n                        properties = results.shift(),\n                        relationships = results.shift();\n\n                    return {\n                        concepts: concepts,\n                        properties: properties,\n                        relationships: relationships\n                    };\n                })\n            }),\n\n            /**\n             * Ontology properties\n             *\n             * @function\n             */\n            properties: _.memoize(function() {\n\n                return getOntology()\n                    .then(function(ontology) {\n                        return {\n                            list: _.sortBy(_.values(ontology.properties), 'displayName'),\n                            byTitle: ontology.properties,\n                            byDataType: _.groupBy(ontology.properties, 'dataType'),\n                            byDependentToCompound: _.chain(ontology.properties)\n                                .filter(function(p) {\n                                    return 'dependentPropertyIris' in p;\n                                })\n                                .map(function(p) {\n                                    return p.dependentPropertyIris.map(function(iri) {\n                                        return [iri, p.title];\n                                    })\n                                })\n                                .flatten(true)\n                                .object()\n                                .value()\n                        };\n                    })\n            }),\n\n            /**\n             * Return properties by element type\n             *\n             * @function\n             * @param {string} type Either 'vertex' or 'edge'\n             * @returns {Array.<object>}\n             */\n            propertiesByDomainType: _.memoize(function(type) {\n                return getOntology()\n                    .then(function(ontology) {\n                        if (type === 'extended-data') {\n                            return _.chain(ontology.properties)\n                                .pluck('tablePropertyIris')\n                                .compact()\n                                .flatten()\n                                .uniq()\n                                .map(function(propertyName) {\n                                    if (!ontology.properties[propertyName]) {\n                                        console.error('could not find extended-data property: ' + propertyName);\n                                        return null;\n                                    }\n                                    return ontology.properties[propertyName];\n                                })\n                                .compact()\n                                .value();\n                        }\n\n                        var items = (type === 'concept' || type === 'vertex') ? ontology.concepts : ontology.relationships;\n\n                        return _.chain(items)\n                            .pluck('properties')\n                            .compact()\n                            .flatten()\n                            .uniq()\n                            .map(function(propertyName) {\n                                return ontology.properties[propertyName]\n                            })\n                            .value();\n                    });\n            }),\n\n            /**\n             * Properties given edgeId\n             *\n             * @function\n             * @param {string} id\n             */\n            propertiesByRelationship: _.memoize(function(relationshipId) {\n                return api.ontology()\n                    .then(function(ontology) {\n                        var propertyIds = [],\n                            collectPropertyIds = function(rId) {\n                                var relation = ontology.relationships.byId[rId],\n                                properties = relation && relation.properties,\n                                parentId = relation && relation.parentIri;\n\n                                if (properties && properties.length) {\n                                    propertyIds.push.apply(propertyIds, properties);\n                                }\n                                if (parentId) {\n                                    collectPropertyIds(parentId);\n                                }\n                            };\n\n                        collectPropertyIds(relationshipId);\n\n                        var properties = _.chain(propertyIds)\n                            .uniq()\n                            .map(function(pId) {\n                                return ontology.properties.byTitle[pId];\n                            })\n                            .value();\n\n                        return {\n                            list: _.sortBy(properties, 'displayName'),\n                            byTitle: _.pick(ontology.properties, propertyIds)\n                        };\n                    });\n            }),\n\n            /**\n             * Properties given conceptId\n             *\n             * @function\n             * @param {string} id\n             */\n            propertiesByConceptId: _.memoize(function(conceptId) {\n                return getOntology()\n                    .then(function(ontology) {\n                        var propertyIds = [],\n                            collectPropertyIds = function(conceptId) {\n                                var concept = ontology.concepts[conceptId],\n                                properties = concept && concept.properties,\n                                parentConceptId = concept && concept.parentConcept;\n\n                                if (properties && properties.length) {\n                                    propertyIds.push.apply(propertyIds, properties);\n                                }\n                                if (parentConceptId) {\n                                    collectPropertyIds(parentConceptId);\n                                }\n                            };\n\n                        collectPropertyIds(conceptId);\n\n                        var properties = _.chain(propertyIds)\n                            .uniq()\n                            .map(function(pId) {\n                                return ontology.properties[pId];\n                            })\n                            .value();\n\n                        return {\n                            list: _.sortBy(properties, 'displayName'),\n                            byTitle: _.pick(ontology.properties, propertyIds)\n                        };\n                    });\n            }),\n\n            /**\n             * Ontology concepts\n             *\n             * @function\n             */\n            concepts: _.memoize(function() {\n                var clsIndex = 0;\n\n                return getOntology()\n                    .then(function(ontology) {\n                        return {\n                            entityConcept: buildTree(\n                                ontology.concepts,\n                                ontology.concepts[PARENT_CONCEPT]\n                            ),\n                            forAdmin: _.chain(ontology.concepts)\n                                .filter(onlyEntityConcepts.bind(null, ontology.concepts, true))\n                                .map(addFlattenedTitles.bind(null, ontology.concepts, true))\n                                .sortBy('flattenedDisplayName')\n                                .value(),\n                            byId: _.chain(ontology.concepts)\n                                .map(addFlattenedTitles.bind(null, ontology.concepts, false))\n                                .indexBy('id')\n                                .value(),\n                            byClassName: _.indexBy(ontology.concepts, 'className'),\n                            byTitle: _.chain(ontology.concepts)\n                                .filter(onlyEntityConcepts.bind(null, ontology.concepts, false))\n                                .map(addFlattenedTitles.bind(null, ontology.concepts, false))\n                                .sortBy('flattenedDisplayName')\n                                .value()\n                        };\n                    });\n\n                function buildTree(concepts, root) {\n                    var groupedByParent = _.groupBy(concepts, 'parentConcept'),\n                        ignoreColorWarnings = _.chain(extensions)\n                            .pluck('ignoreColorWarnings')\n                            .flatten()\n                            .unique()\n                            .value(),\n                        findChildrenForNode = function(node) {\n                            node.className = 'conceptId-' + (clsIndex++);\n                            node.children = groupedByParent[node.id] || [];\n                            node.children = node.children.map(function(child) {\n                                if (!child.glyphIconHref) {\n                                    child.glyphIconHref = node.glyphIconHref;\n                                }\n                                if (!child.glyphIconSelectedHref) {\n                                    child.glyphIconSelectedHref = node.glyphIconSelectedHref;\n                                }\n                                if (child.userVisible !== false && child.id === child.displayName) {\n                                    warnOnce('Concept displayName is same as IRI', child.id)\n                                }\n                                if (!child.color) {\n                                    if (node.color) {\n                                        child.color = node.color;\n                                    } else {\n                                        if (openlumifyEnvironment.dev && !_.contains(ignoreColorWarnings, child.id) && child.userVisible !== false) {\n                                            warnOnce( 'No color specified in concept hierarchy for conceptType:', child.id);\n                                        }\n                                        child.color = 'rgb(0, 0, 0)';\n                                    }\n                                }\n                                return findChildrenForNode(child);\n                            });\n                            return node;\n                        };\n\n                    return findChildrenForNode(root);\n                }\n\n                function onlyEntityConcepts(conceptsById, includeThing, concept) {\n                    var parentConceptId = concept.parentConcept,\n                        currentParentConcept = null;\n\n                    while (parentConceptId) {\n                        currentParentConcept = conceptsById[parentConceptId];\n                        if (!currentParentConcept) {\n                            console.error('Could not trace concept\\'s lineage to ' + PARENT_CONCEPT +\n                                ' could not find ' + parentConceptId, concept);\n                            return false;\n                        }\n                        if (currentParentConcept.id === PARENT_CONCEPT) {\n                            return true;\n                        }\n                        parentConceptId = currentParentConcept.parentConcept;\n                    }\n\n                    return includeThing && concept.id === PARENT_CONCEPT;\n                }\n\n                function addFlattenedTitles(conceptsById, includeThing, concept) {\n                    var parentConceptId = concept.parentConcept,\n                        currentParentConcept = null,\n                        parents = [];\n\n                    while (parentConceptId) {\n                        currentParentConcept = conceptsById[parentConceptId];\n                        if (includeThing) {\n                            if (currentParentConcept.id === ROOT_CONCEPT) break;\n                        } else {\n                            if (currentParentConcept.id === PARENT_CONCEPT) break;\n                        }\n                        parents.push(currentParentConcept);\n                        parentConceptId = currentParentConcept.parentConcept;\n                    }\n\n                    parents.reverse();\n                    var leadingSlashIfNeeded = parents.length ? '/' : '',\n                        flattenedDisplayName = _.pluck(parents, 'displayName')\n                            .join('/') + leadingSlashIfNeeded + concept.displayName,\n                        indent = flattenedDisplayName\n                            .replace(/[^\\/]/g, '')\n                            .replace(/\\//g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n\n                    return _.extend({}, concept, {\n                        flattenedDisplayName: flattenedDisplayName,\n                        ancestors: _.pluck(parents, 'id'),\n                        indent: indent\n                    });\n                }\n            }),\n\n            /**\n             * Ontology relationships\n             *\n             * @function\n             */\n            relationships: _.memoize(function() {\n                return Promise.all([api.concepts(), getOntology()])\n                    .then(function(results) {\n                        var concepts = results.shift(),\n                            ontology = results.shift(),\n                            conceptIriIsVisible = function(iri) {\n                                var concept = concepts.byId[iri];\n                                return concept && concept.userVisible !== false;\n                            },\n                            list = _.chain(ontology.relationships)\n                                .filter(function(r) {\n                                    return _.some(r.domainConceptIris, conceptIriIsVisible) &&\n                                        _.some(r.rangeConceptIris, conceptIriIsVisible)\n                                })\n                                .sortBy('displayName')\n                                .value(),\n                            out = { groupedByRelated: {} };\n\n                        return {\n                            list: list,\n                            byId: ontology.relationships,\n                            byTitle: ontology.relationships,\n                            groupedBySourceDestConcepts: conceptGrouping(concepts, list, out),\n                            groupedByRelatedConcept: out.groupedByRelated\n                        };\n                    });\n\n                // Calculates cache with all possible mappings from source->dest\n                // including all possible combinations of source->children and\n                // dest->children\n                function conceptGrouping(concepts, relationships, out) {\n                    var groupedByRelated = out.groupedByRelated;\n                    var groups = {},\n                        addToAllSourceDestChildrenGroups = function(r, source, dest) {\n                            if (source.userVisible === false || dest.userVisible === false) {\n                                return;\n                            }\n\n                            var key = genSourceDestKey(source, dest);\n\n                            if (!groups[key]) {\n                                groups[key] = [];\n                            }\n                            if (!groupedByRelated[source]) {\n                                groupedByRelated[source] = {}\n                            }\n                            if (!groupedByRelated[dest]) {\n                                groupedByRelated[dest] = {}\n                            }\n\n                            groups[key].push(r);\n                            groupedByRelated[source][dest] = true;\n                            groupedByRelated[dest][source] = true;\n\n                            var destConcept = concepts.byId[dest]\n                            if (destConcept && destConcept.children) {\n                                destConcept.children.forEach(function(c) {\n                                    if (c.userVisible !== false) {\n                                        addToAllSourceDestChildrenGroups(r, source, c.id);\n                                    }\n                                })\n                            }\n\n                            var sourceConcept = concepts.byId[source]\n                            if (sourceConcept && sourceConcept.children) {\n                                sourceConcept.children.forEach(function(c) {\n                                    if (c.userVisible !== false) {\n                                        addToAllSourceDestChildrenGroups(r, c.id, dest);\n                                    }\n                                });\n                            }\n                        };\n\n                    relationships.forEach(function(r) {\n                        if (r.userVisible !== false) {\n                            r.domainConceptIris.forEach(function(source) {\n                                r.rangeConceptIris.forEach(function(dest) {\n                                    addToAllSourceDestChildrenGroups(r, source, dest);\n                                });\n                            });\n                        }\n                    });\n\n                    out.groupedByRelated = _.mapObject(groupedByRelated, function(obj, key) {\n                        return _.keys(obj);\n                    });\n\n                    return groups;\n                }\n            }),\n\n            /**\n             * Get the valid relationships between concepts\n             *\n             * @function\n             * @param {string} source Source concept IRI\n             * @param {string} target Target concept IRI\n             */\n            relationshipsBetween: _.memoize(function(source, dest) {\n                return api.relationships()\n                    .then(function(relationships) {\n                        var key = genSourceDestKey(source, dest);\n\n                        return _.chain(relationships.groupedBySourceDestConcepts[key] || [])\n                            .uniq(function(r) {\n                                return r.title\n                            })\n                            .sortBy('displayName')\n                            .value()\n                    });\n            }, genSourceDestKey)\n        };\n\n    return api;\n\n    function genSourceDestKey(source, dest) {\n        return [source, dest].join('>');\n    }\n});\n"]}
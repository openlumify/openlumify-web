{"version":3,"sources":["../../../../js/data/web-worker/services/search.js"],"names":["define","ajax","api","all","urlFilter","openlumifyFilter","then","result","_","chain","searches","filter","search","test","url","sortBy","name","toLowerCase","value","save","query","toFix","params","parameters","each","isArray","push","forEach","delete","queryId","id","get","run","otherParams","extend"],"mappings":"AAMAA,OAAO,CAAC,cAAD,CAAP,CAAyB,SAASC,IAAT,CAAe,CACpC,aAKA,GAAIC,KAAM,CAQNC,IAAK,aAASC,SAAT,CAAoB,CACrB,GAAIC,kBAAmB,qCAAvB,CACA,MAAOJ,MAAK,KAAL,CAAY,aAAZ,EACFK,IADE,CACG,SAASC,MAAT,CAAiB,CACnB,MAAOC,GAAEC,KAAF,CAAQF,OAAOG,QAAf,EACFC,MADE,CACK,SAASC,MAAT,CAAiB,CACrB,GAAIR,SAAJ,CAAe,CACX,GAAIC,iBAAiBQ,IAAjB,CAAsBT,SAAtB,CAAJ,CAAsC,CAClC,MAAOC,kBAAiBQ,IAAjB,CAAsBD,OAAOE,GAA7B,CAAP,CACH,CACD,MAAOF,QAAOE,GAAP,GAAeV,SAAtB,CACH,CACD,MAAO,KAAP,CACH,CATE,EAUFW,MAVE,CAUK,SAASH,MAAT,CAAiB,CACrB,MAAOA,QAAOI,IAAP,CAAYC,WAAZ,EAAP,CACH,CAZE,EAaFC,KAbE,EAAP,CAcH,CAhBE,CAAP,CAiBH,CA3BK,CAiDNC,KAAM,cAASC,KAAT,CAAgB,CAClB,GAAIC,OAAQ,EAAZ,CACIC,OAASF,MAAMG,UADnB,CAGA,GAAID,MAAJ,CAAY,CACRd,EAAEgB,IAAF,CAAOF,MAAP,CAAe,SAASJ,KAAT,CAAgBF,IAAhB,CAAsB,CACjC,GAAIR,EAAEiB,OAAF,CAAUP,KAAV,CAAJ,CAAsB,CAClBG,MAAMK,IAAN,CAAWV,IAAX,EACH,CACJ,CAJD,EAKAK,MAAMM,OAAN,CAAc,SAASX,IAAT,CAAe,CACzB,GAAI,CAAE,OAAD,CAAUH,IAAV,CAAeG,IAAf,CAAL,CAA2B,CACvBM,OAAON,KAAO,IAAd,EAAsBM,OAAON,IAAP,CAAtB,CACA,MAAOM,QAAON,IAAP,CAAP,CACH,CACJ,CALD,EAMH,CACD,MAAOf,MAAK,MAAL,CAAa,cAAb,CAA6BmB,KAA7B,CAAP,CACH,CAnEK,CA0ENQ,OAAQ,iBAASC,OAAT,CAAkB,CACtB,MAAO5B,MAAK,cAAL,CAAqB,SAArB,CAAgC,CACnC6B,GAAID,OAD+B,CAAhC,CAAP,CAGH,CA9EK,CAqFNE,IAAK,aAASF,OAAT,CAAkB,CACnB,MAAO5B,MAAK,KAAL,CAAY,SAAZ,CAAuB,CAC1B6B,GAAID,OADsB,CAAvB,CAAP,CAGH,CAzFK,CAqGNG,IAAK,aAASH,OAAT,CAAkBI,WAAlB,CAA+B,CAChC,MAAOhC,MAAK,KAAL,CAAY,aAAZ,CAA2BO,EAAE0B,MAAF,CAAS,EAAT,CAAaD,aAAe,EAA5B,CAAgC,CAC9DH,GAAID,OAD0D,CAAhC,CAA3B,CAAP,CAGH,CAzGK,CAAV,CA6GA,MAAO3B,IAAP,CACH,CApHD","file":"search.js","sourcesContent":["/**\n * Routes for running searches, and saved searches.\n *\n * @module services/search\n * @see module:dataRequest\n */\ndefine(['../util/ajax'], function(ajax) {\n    'use strict';\n\n    /**\n     * @alias module:services/search\n     */\n    var api = {\n\n        /**\n         * Get saved searches optionally filtered\n         * by search url\n         *\n         * @param {string} urlFilter Limit searches to those of this URL\n         */\n        all: function(urlFilter) {\n            var openlumifyFilter = /^\\/(?:vertex|element|edge)\\/search$/;\n            return ajax('GET', '/search/all')\n                .then(function(result) {\n                    return _.chain(result.searches)\n                        .filter(function(search) {\n                            if (urlFilter) {\n                                if (openlumifyFilter.test(urlFilter)) {\n                                    return openlumifyFilter.test(search.url);\n                                }\n                                return search.url === urlFilter;\n                            }\n                            return true;\n                        })\n                        .sortBy(function(search) {\n                            return search.name.toLowerCase();\n                        })\n                        .value();\n                })\n        },\n\n        /**\n         * Save a search\n         *\n         * @param {object} query\n         * @param {string} query.url The url to invoke for saved search\n         * @param {object} query.parameters The search parameters valid for the\n         * url\n         * @param {object} [query.id] If updating previous\n         * @param {object} [query.name] The name of search\n         * @param {boolean} [query.global=false] If this is global search\n         * _Requires special privilege_\n         * @example\n         * dataRequest('search', 'save', {\n         *     url: 'element/search',\n         *     name: 'My new Search',\n         *     parameters: {\n         *         q: 'Search text'\n         *     }\n         * }).then(function(s) { console.log('saved'); })\n         */\n        save: function(query) {\n            var toFix = [],\n                params = query.parameters;\n\n            if (params) {\n                _.each(params, function(value, name) {\n                    if (_.isArray(value)) {\n                        toFix.push(name);\n                    }\n                });\n                toFix.forEach(function(name) {\n                    if (!(/\\[\\]$/).test(name)) {\n                        params[name + '[]'] = params[name];\n                        delete params[name];\n                    }\n                });\n            }\n            return ajax('POST', '/search/save', query);\n        },\n\n        /**\n         * Delete a search\n         *\n         * @param {string} id\n         */\n        delete: function(queryId) {\n            return ajax('DELETE->HTML', '/search', {\n                id: queryId\n            });\n        },\n\n        /**\n         * Get search object\n         *\n         * @param {string} id\n         */\n        get: function(queryId) {\n            return ajax('GET', '/search', {\n                id: queryId\n            });\n        },\n\n        /**\n         * Execute a search and get results\n         *\n         * Optionally accepts new parameters that take precedent over saved\n         * ones.\n         *\n         * @param {string} id\n         * @param {object} [overrideSearchParameters={}] Allows overriding or\n         * adding criteria to saved search\n         */\n        run: function(queryId, otherParams) {\n            return ajax('GET', '/search/run', _.extend({}, otherParams || {}, {\n                id: queryId\n            }));\n        }\n\n    };\n\n    return api;\n});\n"]}
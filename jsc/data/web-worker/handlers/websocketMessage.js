define(['require','configuration/plugins/registry','../store'],function(require,registry,store){'use strict';var NOOP=function NOOP(){},socketHandlers={workspaceChange:function workspaceChange(data,json){require(['../store/workspace/actions-impl'],function(actions){store.getStore().dispatch(actions.update({workspace:data}));});},workspaceDelete:function workspaceDelete(data){require(['../store/workspace/actions-impl'],function(actions){store.getStore().dispatch(actions.deleteWorkspace({workspaceId:data.workspaceId}));});},ontologyChange:function ontologyChange(data){require(['../store/ontology/actions-impl'],function(actions){store.getStore().dispatch(actions.ontologyChange(data));});},workProductPreviewChange:function workProductPreviewChange(data){var id=data.id,workspaceId=data.workspaceId,md5=data.md5;require(['../store/product/actions-impl'],function(actions){store.getStore().dispatch(actions.previewChanged({productId:id,workspaceId:workspaceId,md5:md5}));});},workProductChange:function workProductChange(data){var id=data.id,workspaceId=data.workspaceId;require(['../store/product/actions-impl'],function(actions){store.getStore().dispatch(actions.changedOnServer({productId:id,workspaceId:workspaceId}));});},workProductDelete:function workProductDelete(data){require(['../store/product/actions-impl'],function(actions){store.getStore().dispatch(actions.remove(data.id));});},workProductAncillaryChange:function workProductAncillaryChange(_ref){var workspaceId=_ref.workspaceId,productId=_ref.productId,id=_ref.id;require(['../store/element/actions-impl','../store/product/actions-impl'],function(elementActions,productActions){var dispatch=store.getStore().dispatch;dispatch(elementActions.ancillaryChange({workspaceId:workspaceId,id:id}));dispatch(productActions.get({productId:productId,invalidate:true}));});},userAccessChange:function userAccessChange(user){require(['../store/user/actions-impl'],function(actions){store.getStore().dispatch(actions.putUser({user:user}));});},userWorkspaceChange:NOOP,publish:function publish(data){if(data.objectType!=='property'||data.publishType!=='undo'){socketHandlers.propertyChange(data);}},propertyChange:function propertyChange(data){require(['../store/element/actions-impl'],function(actions){store.getStore().dispatch(actions.propertyChange(data));});},verticesDeleted:function verticesDeleted(data){require(['../store/element/actions-impl'],function(actions){store.getStore().dispatch(actions.deleteElements({vertexIds:data.vertexIds}));});},edgeDeletion:function edgeDeletion(data){require(['../store/element/actions-impl'],function(actions){store.getStore().dispatch(actions.deleteElements({edgeIds:[data.edgeId]}));});},textUpdated:function textUpdated(data){if(data.graphVertexId&&(!data.workspaceId||data.workspaceId===publicData.currentWorkspaceId)){dispatchMain('rebroadcastEvent',{eventName:'textUpdated',data:{vertexId:data.graphVertexId}});}},longRunningProcessDeleted:function longRunningProcessDeleted(data){dispatchMain('rebroadcastEvent',{eventName:'longRunningProcessDeleted',data:{processId:data.processId}});},longRunningProcessChange:function longRunningProcessChange(process){dispatchMain('rebroadcastEvent',{eventName:'longRunningProcessChanged',data:{process:process}});},entityImageUpdated:function entityImageUpdated(data){if(data&&data.graphVertexId){socketHandlers.propertyChange(data);}},notification:function notification(data){dispatchMain('rebroadcastEvent',{eventName:'notificationActive',data:data});},systemNotificationUpdated:function systemNotificationUpdated(data){dispatchMain('rebroadcastEvent',{eventName:'notificationUpdated',data:data});},systemNotificationEnded:function systemNotificationEnded(data){dispatchMain('rebroadcastEvent',{eventName:'notificationDeleted',data:data});}},callHandlersForName=function callHandlersForName(name,data){var extensions=_.where(registry.extensionsForPoint('org.openlumify.websocket.message'),{name:name});if(extensions.length){extensions.forEach(function(e){e.handler(data);});return true;}};return function(data){var body=data.responseBody,json=JSON.parse(body);if(isBatchMessage(json)){var filtered=_.reject(json.data,messageFromUs);if(filtered.length){console.groupCollapsed('Socket Batch ('+filtered.length+')');filtered.forEach(process);console.groupEnd();}}else if(!messageFromUs(json)){process(json);}};function process(json){console.debug('%cSocket: %s %O','color:#999;font-style:italics',json.type,json.data||json);if(json.type in socketHandlers){socketHandlers[json.type]('data'in json?json.data:json,json);callHandlersForName(json.type,json.data);}else if(!callHandlersForName(json.type,json.data)){console.warn('Unhandled socket message type:'+json.type,'message:',json);}}function messageFromUs(json){var data=json.data;if(!_.isObject(data)){return false;}var sourceGuid=data.sourceGuid;if(!sourceGuid){return false;}return sourceGuid===publicData.socketSourceGuid;}function isBatchMessage(json){return json.type==='batch'&&_.isArray(json.data);}});
//# sourceMappingURL=websocketMessage.js.map

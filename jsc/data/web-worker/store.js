(function(global){'use strict';define(['configuration/plugins/registry','fast-json-patch','redux','./store/rootReducer','./store/enhancer/observe','./store/middleware/actionRouter','./store/middleware/thunk','./store/middleware/promise','./store/middleware/undo','./store/middleware/dataRequest'],function(registry,jsonpatch,redux,rootReducer,observe){for(var _len=arguments.length,middleware=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++){middleware[_key-5]=arguments[_key];}var store;return{getStore:function getStore(){if(!store){store=redux.createStore(rootReducer,redux.compose(redux.applyMiddleware.apply(redux,middleware),observe));store.subscribe(stateChanged(store.getState()));}return store;},getOrWaitForNestedState:function getOrWaitForNestedState(getterFn,waitForConditionFn){var check=waitForConditionFn||function(s){var v=getterFn(s);return!_.isUndefined(v)&&!_.isEmpty(v);};return Promise.try(function(){var state=store.getState();if(check(state)){return getterFn(state);}else{return new Promise(function(done){var unsubscribe=store.subscribe(function(){var state=store.getState();if(check(state)){var newValue=getterFn(store.getState());unsubscribe();done(newValue);}});});}});}};function stateChanged(initialState){var previousState=initialState;return function storeSubscription(){var newState=store.getState();if(newState!==previousState){var diff=jsonpatch.compare(previousState,newState);if(diff&&diff.length){previousState=newState;dispatchMain('reduxStoreAction',{action:{type:'STATE_APPLY_DIFF',payload:diff,meta:{originator:'webworker'}}});}}};}});})(this);
//# sourceMappingURL=store.js.map

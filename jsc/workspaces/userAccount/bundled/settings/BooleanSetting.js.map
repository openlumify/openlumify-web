{"version":3,"sources":["../../../../../js/workspaces/userAccount/bundled/settings/BooleanSetting.jsx"],"names":["define","createReactClass","PropTypes","registry","withDataRequest","P","BooleanSetting","getInitialState","disabled","value","componentWillMount","props","setting","uiPreferenceName","setState","bool","parse","openlumifyData","currentUser","uiPreferences","getInitialValue","Promise","resolve","then","console","error","handleCheckboxChange","evt","checked","target","handleChange","newValue","onChange","toString","dataRequest","render","i18n","displayName","state"],"mappings":"AAAAA,OAAO,CACH,oBADG,CAEH,YAFG,CAGH,gCAHG,CAIH,sBAJG,CAKH,cALG,CAAP,CAMG,SAAUC,gBAAV,CAA4BC,SAA5B,CAAuCC,QAAvC,CAAiDC,eAAjD,CAAkEC,CAAlE,CAAqE,CACpE,aAEA,GAAMC,gBAAiBL,iBAAiB,8BACpCM,eADoC,2BAClB,CACd,MAAO,CACHC,SAAU,IADP,CAEHC,MAAO,KAFJ,CAAP,CAIH,CANmC,CAQpCC,kBARoC,8BAQf,gBACjB,GAAI,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,gBAAvB,CAAyC,CACrC,KAAKC,QAAL,CAAc,CACVN,SAAU,KADA,CAEVC,MAAOJ,EAAEU,IAAF,CAAOC,KAAP,CAAaC,eAAeC,WAAf,CAA2BC,aAA3B,CAAyC,KAAKR,KAAL,CAAWC,OAAX,CAAmBC,gBAA5D,CAAb,CAA4F,KAA5F,CAFG,CAAd,EAIH,CALD,IAKO,IAAI,KAAKF,KAAL,CAAWC,OAAX,CAAmBQ,eAAvB,CAAwC,CAC3CC,QAAQC,OAAR,CAAgB,KAAKX,KAAL,CAAWC,OAAX,CAAmBQ,eAAnB,EAAhB,EACKG,IADL,CACU,eAAS,CACX,MAAKT,QAAL,CAAc,CACVN,SAAU,KADA,CAEVC,MAAOJ,EAAEU,IAAF,CAAOC,KAAP,CAAaP,KAAb,CAFG,CAAd,EAIH,CANL,EAOH,CARM,IAQA,CACHe,QAAQC,KAAR,CAAc,sEAAd,EACH,CACJ,CAzBmC,CA2BpCC,oBA3BoC,+BA2BfC,GA3Be,CA2BV,iBACtB,GAAMC,SAAUD,IAAIE,MAAJ,CAAWD,OAA3B,CACA,KAAKd,QAAL,CAAc,CACVN,SAAU,IADA,CAAd,EAGA,KAAKsB,YAAL,CAAkBF,OAAlB,EACKL,IADL,CACU,kBAAY,CACd,OAAKT,QAAL,CAAc,CACVN,SAAU,KADA,CAEVC,MAAOJ,EAAEU,IAAF,CAAOC,KAAP,CAAae,QAAb,CAFG,CAAd,EAIH,CANL,EAOH,CAvCmC,CAyCpCD,YAzCoC,uBAyCvBrB,KAzCuB,CAyChB,iBAChB,GAAMuB,UAAW,KAAKrB,KAAL,CAAWC,OAAX,CAAmBoB,QAAnB,EAA+BX,QAAQC,OAAxD,CACA,MAAOU,UAASvB,KAAT,EACFc,IADE,CACG,eAAS,CACX,GAAI,OAAKZ,KAAL,CAAWC,OAAX,CAAmBC,gBAAvB,CAAyC,CACrCJ,MAAQA,MAAMwB,QAAN,EAAR,CACA,MAAO7B,iBAAgB8B,WAAhB,CAA4B,MAA5B,CAAoC,YAApC,CAAkD,OAAKvB,KAAL,CAAWC,OAAX,CAAmBC,gBAArE,CAAuFJ,KAAvF,EACFc,IADE,CACG,UAAM,CACRN,eAAeC,WAAf,CAA2BC,aAA3B,CAAyC,OAAKR,KAAL,CAAWC,OAAX,CAAmBC,gBAA5D,EAAgFJ,KAAhF,CACA,MAAOA,MAAP,CACH,CAJE,CAAP,CAKH,CAPD,IAOO,CACH,MAAOA,MAAP,CACH,CACJ,CAZE,CAAP,CAaH,CAxDmC,CA0DpC0B,MA1DoC,kBA0D3B,CACL,MAAQ,kCACJ,2BAAK,UAAU,cAAf,EAA+BC,KAAK,KAAKzB,KAAL,CAAWC,OAAX,CAAmByB,WAAxB,CAA/B,CADI,CAEJ,6BAAO,KAAK,UAAZ,CAAuB,SAAU,KAAKC,KAAL,CAAW9B,QAA5C,CAAsD,QAAS,KAAK8B,KAAL,CAAW7B,KAA1E,CACO,SAAU,KAAKiB,oBADtB,EAFI,CAAR,CAKH,CAhEmC,CAAjB,CAAvB,CAmEA,MAAOpB,eAAP,CACH,CA7ED","file":"BooleanSetting.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'configuration/plugins/registry',\n    'util/withDataRequest',\n    'util/parsers'\n], function (createReactClass, PropTypes, registry, withDataRequest, P) {\n    'use strict';\n\n    const BooleanSetting = createReactClass({\n        getInitialState() {\n            return {\n                disabled: true,\n                value: false\n            }\n        },\n\n        componentWillMount() {\n            if (this.props.setting.uiPreferenceName) {\n                this.setState({\n                    disabled: false,\n                    value: P.bool.parse(openlumifyData.currentUser.uiPreferences[this.props.setting.uiPreferenceName], false)\n                });\n            } else if (this.props.setting.getInitialValue) {\n                Promise.resolve(this.props.setting.getInitialValue())\n                    .then(value => {\n                        this.setState({\n                            disabled: false,\n                            value: P.bool.parse(value)\n                        });\n                    });\n            } else {\n                console.error('boolean properties require a \"uiPreferenceName\" or \"getInitialValue\"');\n            }\n        },\n\n        handleCheckboxChange(evt) {\n            const checked = evt.target.checked;\n            this.setState({\n                disabled: true\n            });\n            this.handleChange(checked)\n                .then(newValue => {\n                    this.setState({\n                        disabled: false,\n                        value: P.bool.parse(newValue)\n                    });\n                });\n        },\n\n        handleChange(value) {\n            const onChange = this.props.setting.onChange || Promise.resolve;\n            return onChange(value)\n                .then(value => {\n                    if (this.props.setting.uiPreferenceName) {\n                        value = value.toString();\n                        return withDataRequest.dataRequest('user', 'preference', this.props.setting.uiPreferenceName, value)\n                            .then(() => {\n                                openlumifyData.currentUser.uiPreferences[this.props.setting.uiPreferenceName] = value;\n                                return value;\n                            });\n                    } else {\n                        return value;\n                    }\n                });\n        },\n\n        render() {\n            return (<label>\n                <div className=\"display-name\">{i18n(this.props.setting.displayName)}</div>\n                <input type=\"checkbox\" disabled={this.state.disabled} checked={this.state.value}\n                       onChange={this.handleCheckboxChange}/>\n            </label>);\n        }\n    });\n\n    return BooleanSetting;\n});\n"]}
define(['create-react-class','prop-types','configuration/plugins/registry','./BooleanSetting'],function(createReactClass,PropTypes,registry,BooleanSetting){'use strict';registry.documentExtensionPoint('org.openlumify.user.account.page.setting','Add new settings to the general settings page',function(e){if(!('identifier'in e&&'group'in e&&'displayName'in e&&'type'in e)){return false;}switch(e.type){case'boolean':return'uiPreferenceName'in e||'getInitialValue'in e&&'onChange'in e;case'custom':return'componentPath'in e;default:return false;}},'http://docs.openlumify.org/extension-points/front-end/userAccount');var TIMEZONE_SETTING={identifier:'org.openlumify.user.account.page.setting.timezone',group:'useraccount.page.settings.setting.group.locale',displayName:'org.openlumify.user.account.page.setting.timezone.displayName',type:'custom',componentPath:'workspaces/userAccount/bundled/settings/TimeZoneSetting'};var SettingsSetting=createReactClass({displayName:'SettingsSetting',getInitialState:function getInitialState(){return{component:null};},componentWillMount:function componentWillMount(){this.update(this.props);},componentWillReceiveProps:function componentWillReceiveProps(nextProps){this.update(nextProps);},update:function update(props){var _this=this;if(props.setting){var setting=props.setting;switch(setting.type){case'boolean':this.setState({component:BooleanSetting});break;case'custom':if(setting.componentPath){require([setting.componentPath],function(component){_this.setState({component:component});});}else{console.error('custom settings must include "componentPath"');}break;default:console.error('invalid setting type "'+setting.type+'"');break;}}},render:function render(){return React.createElement('li',{className:'setting'},this.state.component?React.createElement(this.state.component,{setting:this.props.setting}):React.createElement('div',null));}});var SettingsGroup=createReactClass({displayName:'SettingsGroup',render:function render(){var settings=_.sortBy(this.props.settings,function(s){return i18n(s.displayName);});return React.createElement('li',null,React.createElement('h4',{className:'settings-group-title'},i18n(this.props.groupKey)),React.createElement('ul',{className:'settings-group'},settings.map(function(setting){return React.createElement(SettingsSetting,{key:setting.identifier,setting:setting});})));}});var Settings=createReactClass({displayName:'Settings',getSettingsExtensions:function getSettingsExtensions(){var settings=registry.extensionsForPoint('org.openlumify.user.account.page.setting');if(!_.findWhere(settings,{identifier:TIMEZONE_SETTING.identifier})){registry.registerExtension('org.openlumify.user.account.page.setting',TIMEZONE_SETTING);settings.push(TIMEZONE_SETTING);}return settings;},render:function render(){var settings=this.getSettingsExtensions();var groups=_.groupBy(settings,function(s){return s.group;});var groupKeys=_.sortBy(Object.keys(groups),function(key){return i18n(key);});return React.createElement('ul',{className:'general-settings'},groupKeys.map(function(groupKey){return React.createElement(SettingsGroup,{key:groupKey,groupKey:groupKey,settings:groups[groupKey]});}));}});return Settings;});
//# sourceMappingURL=Settings.js.map

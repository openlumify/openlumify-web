{"version":3,"sources":["../../../../../js/workspaces/userAccount/bundled/settings/Settings.jsx"],"names":["define","createReactClass","PropTypes","registry","BooleanSetting","documentExtensionPoint","e","type","TIMEZONE_SETTING","identifier","group","displayName","componentPath","SettingsSetting","getInitialState","component","componentWillMount","update","props","componentWillReceiveProps","nextProps","setting","setState","require","console","error","render","state","SettingsGroup","settings","_","sortBy","i18n","s","groupKey","map","Settings","getSettingsExtensions","extensionsForPoint","findWhere","registerExtension","push","groups","groupBy","groupKeys","Object","keys","key"],"mappings":"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","file":"Settings.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'configuration/plugins/registry',\n    './BooleanSetting'\n], function(createReactClass, PropTypes, registry, BooleanSetting) {\n    'use strict';\n\n    /**\n     * Adds new settings to the general settings page\n     *\n     * @param {string} identifier Unique identifier for this setting\n     * @param {string} group The group i18n message id\n     * @param {string} displayName The display name i18n message id\n     * @param {string} type One of 'boolean', 'custom'\n     * @param {string=} componentPath Required when type=custom\n     * @param {string=} uiPreferenceName Required when type=boolean, if getInitialValue and onChange are not provided\n     * @param {string=} getInitialValue Required when type=boolean, if uiPreferenceName is not provided\n     * @param {string=} onChange Required when type=boolean, if uiPreferenceName is not provided\n     */\n    registry.documentExtensionPoint('org.openlumify.user.account.page.setting',\n        'Add new settings to the general settings page',\n        function(e) {\n            if (!(('identifier' in e) && ('group' in e) && ('displayName' in e) && ('type' in e))) {\n                return false;\n            }\n            switch (e.type) {\n                case 'boolean':\n                    return ('uiPreferenceName' in e) || (('getInitialValue' in e) && ('onChange' in e));\n\n                case 'custom':\n                    return ('componentPath' in e);\n\n                default:\n                    return false;\n            }\n        },\n        'http://docs.openlumify.org/extension-points/front-end/userAccount'\n    );\n\n    const TIMEZONE_SETTING = {\n        identifier: 'org.openlumify.user.account.page.setting.timezone',\n        group: 'useraccount.page.settings.setting.group.locale',\n        displayName: 'org.openlumify.user.account.page.setting.timezone.displayName',\n        type: 'custom',\n        componentPath: 'workspaces/userAccount/bundled/settings/TimeZoneSetting'\n    };\n\n    const SettingsSetting = createReactClass({\n        getInitialState() {\n            return {\n                component: null\n            };\n        },\n\n        componentWillMount() {\n            this.update(this.props);\n        },\n\n        componentWillReceiveProps(nextProps) {\n            this.update(nextProps);\n        },\n\n        update(props) {\n            if (props.setting) {\n                const setting = props.setting;\n                switch (setting.type) {\n                    case 'boolean':\n                        this.setState({\n                            component: BooleanSetting\n                        });\n                        break;\n\n                    case 'custom':\n                        if (setting.componentPath) {\n                            require([setting.componentPath], component => {\n                                this.setState({\n                                    component: component\n                                });\n                            });\n                        } else {\n                            console.error('custom settings must include \"componentPath\"');\n                        }\n                        break;\n\n                    default:\n                        console.error(`invalid setting type \"${setting.type}\"`);\n                        break;\n                }\n            }\n        },\n\n        render() {\n            return (<li className=\"setting\">\n                {this.state.component ? (<this.state.component setting={this.props.setting}/>) : (<div></div>)}\n            </li>);\n        }\n    });\n\n    const SettingsGroup = createReactClass({\n        render() {\n            const settings = _.sortBy(this.props.settings, s => i18n(s.displayName));\n\n            return (<li>\n                <h4 className=\"settings-group-title\">{i18n(this.props.groupKey)}</h4>\n                <ul className=\"settings-group\">\n                    {settings.map(setting => {\n                        return (<SettingsSetting key={setting.identifier} setting={setting}/>);\n                    })}\n                </ul>\n            </li>);\n        }\n    });\n\n    const Settings = createReactClass({\n        getSettingsExtensions() {\n            const settings = registry.extensionsForPoint('org.openlumify.user.account.page.setting');\n\n            if (!_.findWhere(settings, {identifier: TIMEZONE_SETTING.identifier})) {\n                registry.registerExtension('org.openlumify.user.account.page.setting', TIMEZONE_SETTING);\n                settings.push(TIMEZONE_SETTING);\n            }\n\n            return settings;\n        },\n\n        render() {\n            const settings = this.getSettingsExtensions();\n            const groups = _.groupBy(settings, s => s.group);\n            const groupKeys = _.sortBy(Object.keys(groups), key => i18n(key));\n\n            return (\n                <ul className=\"general-settings\">\n                    {groupKeys.map(groupKey => {\n                        return (<SettingsGroup key={groupKey} groupKey={groupKey} settings={groups[groupKey]}/>);\n                    })}\n                </ul>\n            );\n        }\n    });\n\n    return Settings;\n});\n"]}
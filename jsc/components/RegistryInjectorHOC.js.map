{"version":3,"sources":["../../js/components/RegistryInjectorHOC.jsx"],"names":["define","createReactClass","registry","RegistryInjectorHOC","WrappedComponent","identifiers","_","isArray","Error","WithRegistry","displayName","componentDidMount","length","console","warn","$","document","on","event","extensionPoint","includes","forceUpdate","componentWillUnmount","off","render","props","extensionsForPoints"],"mappings":"gOAAAA,OAAO,CACH,oBADG,CAEH,gCAFG,CAAP,CAGG,SAASC,gBAAT,CAA2BC,QAA3B,CAAqC,CACpC,aAEA,GAAMC,qBAAsB,QAAtBA,oBAAsB,CAACC,gBAAD,CAAmBC,WAAnB,CAAmC,CAC3D,GAAI,CAACC,EAAEC,OAAF,CAAUF,WAAV,CAAL,CAA6B,KAAM,IAAIG,MAAJ,CAAU,8BAAV,CAAN,CAE7B,GAAMC,cAAeR,iBAAiB,CAClCS,oCAAoCN,iBAAiBM,WAAjB,EAAgC,WAApE,KADkC,CAElCC,iBAFkC,6BAEd,gBAChB,GAAIN,YAAYO,MAAZ,GAAuB,CAA3B,CAA8B,CAC1BC,QAAQC,IAAR,CAAa,iDAAb,EACH,CACDC,EAAEC,QAAF,EAAYC,EAAZ,CAAe,oCAAf,CAAqD,SAACC,KAAD,MAA6B,IAApBC,eAAoB,MAApBA,cAAoB,CAC9E,GAAId,YAAYe,QAAZ,CAAqBD,cAArB,CAAJ,CAA0C,CACtC,MAAKE,WAAL,GACH,CACJ,CAJD,EAKH,CAXiC,CAYlCC,oBAZkC,gCAYX,CACnBP,EAAEC,QAAF,EAAYO,GAAZ,CAAgB,oCAAhB,EACH,CAdiC,CAelCC,MAfkC,kBAezB,CAEL,MAAQ,qBAAC,gBAAD,WAAkB,IAAI,SAAtB,EAAoC,KAAKC,KAAzC,EAAgD,SAAUvB,SAASwB,mBAAT,CAA6BrB,WAA7B,CAA1D,GAAR,CACH,CAlBiC,CAAjB,CAArB,CAqBA,MAAOI,aAAP,CACH,CAzBD,CA2BAN,oBAAoBD,QAApB,CAA+BA,QAA/B,CAEA,MAAOC,oBAAP,CACH,CApCD","file":"RegistryInjectorHOC.js","sourcesContent":["define([\n    'create-react-class',\n    'configuration/plugins/registry'\n], function(createReactClass, registry) {\n    'use strict';\n\n    const RegistryInjectorHOC = (WrappedComponent, identifiers) => {\n        if (!_.isArray(identifiers)) throw new Error('identifiers must be an array');\n\n        const WithRegistry = createReactClass({\n            displayName: `RegistryInjectorHOC(${WrappedComponent.displayName || 'Component'})`,\n            componentDidMount() {\n                if (identifiers.length === 0) {\n                    console.warn('RegistryInjectorHOC invoked with no identifiers')\n                }\n                $(document).on('extensionsChanged.registryInjector', (event, {extensionPoint}) => {\n                    if (identifiers.includes(extensionPoint)) {\n                        this.forceUpdate();\n                    }\n                });\n            },\n            componentWillUnmount() {\n                $(document).off('extensionsChanged.registryInjector');\n            },\n            render() {\n                // Ref used by DroppableHOC\n                return (<WrappedComponent ref=\"wrapped\" {...this.props} registry={registry.extensionsForPoints(identifiers)} />);\n            }\n        })\n\n        return WithRegistry;\n    };\n\n    RegistryInjectorHOC.registry = registry;\n\n    return RegistryInjectorHOC;\n});\n"]}
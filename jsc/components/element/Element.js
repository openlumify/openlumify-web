var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['create-react-class','prop-types','react-redux','util/vertex/formatters','util/vertex/urlFormatters','util/dnd','data/web-worker/store/element/selectors','data/web-worker/store/element/actions','data/web-worker/store/ontology/selectors','data/web-worker/store/selection/actions'],function(createReactClass,PropTypes,redux,F,_ref,dnd,elementSelectors,elementActions,ontologySelectors,selectionActions){var vertexUrl=_ref.vertexUrl;var ClassName='org-openlumify-element';var ClassNameLoading='org-openlumify-element-loading';var Vertex=function Vertex(props){var vertex=props.vertex,rest=_objectWithoutProperties(props,['vertex']);var title=F.vertex.title(vertex);var concept=F.vertex.concept(vertex);var url=vertexUrl.url([vertex]);return React.createElement('a',_extends({href:url,className:ClassName,title:title+' \n'+i18n('element.draghelp'),style:{borderBottomColor:concept.color||'#000'}},rest),title);};var Edge=function Edge(props){var edge=props.edge,inVertex=props.inVertex,outVertex=props.outVertex,relationshipLabel=props.relationshipLabel,rest=_objectWithoutProperties(props,['edge','inVertex','outVertex','relationshipLabel']);var title=i18n('openlumify.loading');var titleStr=title;if(relationshipLabel&&inVertex&&outVertex){var outTitle=F.vertex.title(outVertex);var inTitle=F.vertex.title(inVertex);var label=relationshipLabel.displayName;title=React.createElement('span',null,outTitle,' ',React.createElement('span',{className:'rel-label'},label),' ',inTitle);titleStr=outTitle+' \n'+label+' \n'+inTitle;}var url=vertexUrl.url([edge]);return React.createElement('a',_extends({href:url,className:ClassName,title:titleStr+' \n'+i18n('element.draghelp')},rest),title);};var Element=createReactClass({displayName:'Element',propTypes:{element:PropTypes.shape({id:PropTypes.string.isRequired,properties:PropTypes.array.isRequired})},componentDidMount:function componentDidMount(){this._loadEdgeVertices(this.props);},componentWillReceiveProps:function componentWillReceiveProps(nextProps){this._loadEdgeVertices(nextProps);},render:function render(){var _props=this.props,element=_props.element,relationshipLabel=_props.relationshipLabel,inVertex=_props.inVertex,outVertex=_props.outVertex,rest=_objectWithoutProperties(_props,['element','relationshipLabel','inVertex','outVertex']);if(element){if(element.type==='vertex')return React.createElement(Vertex,{vertex:element,onMouseEnter:this.onMouseEnter,onMouseLeave:this.onMouseLeave,onDragStart:this.onDragStart,onClick:this.onClick,onDoubleClick:this.onDoubleClick,draggable:true});if(element.type==='edge')return React.createElement(Edge,{edge:element,onMouseEnter:this.onMouseEnter,onMouseLeave:this.onMouseLeave,onDragStart:this.onDragStart,onClick:this.onClick,onDoubleClick:this.onDoubleClick,inVertex:inVertex,outVertex:outVertex,relationshipLabel:relationshipLabel,draggable:true});throw new Error('Unknown element type: '+element.type);}else if(element===null){return React.createElement('span',{className:ClassNameLoading},i18n('element.not_found'));}return React.createElement('span',{className:ClassNameLoading},'Loading\u2026');},onMouseEnter:function onMouseEnter(event){var _props2=this.props,element=_props2.element,onFocusElements=_props2.onFocusElements;var id=element.id;onFocusElements({vertexIds:[id]});},onMouseLeave:function onMouseLeave(event){this.props.onFocusElements({});},onClick:function onClick(event){event.preventDefault();},onDoubleClick:function onDoubleClick(event){event.preventDefault();window.open(event.target.href);},onDragStart:function onDragStart(event){var element=this.props.element;if(element){var data={elements:[element]};dnd.setDataTransferWithElements(event.dataTransfer,data);}},_loadEdgeVertices:function _loadEdgeVertices(props){var _this=this;var element=props.element;if(!element||element.type!=='edge')return;var outVertexId=element.outVertexId,inVertexId=element.inVertexId;if(!this._loadedEdgeVertexIds)this._loadedEdgeVertexIds={};var vertexIds=[inVertexId,outVertexId].filter(function(id){var requested=_this._loadedEdgeVertexIds[id];_this._loadedEdgeVertexIds[id]=true;return!requested;});if(vertexIds.length){this.props.onLoadElements({vertexIds:vertexIds});}}});return redux.connect(function(state,props){var element=props.element;var inVertex=void 0,outVertex=void 0,relationshipLabel=void 0;if(element&&element.type==='edge'){var outVertexId=element.outVertexId,inVertexId=element.inVertexId;var vertices=elementSelectors.getVertices(state);inVertex=vertices[inVertexId];outVertex=vertices[outVertexId];relationshipLabel=ontologySelectors.getRelationships(state)[element.label];}return _extends({inVertex:inVertex,outVertex:outVertex,relationshipLabel:relationshipLabel},props);},function(dispatch,props){return{onFocusElements:function onFocusElements(elements){dispatch(elementActions.setFocus(elements));},onLoadElements:function onLoadElements(elements){dispatch(elementActions.get(elements));}};})(Element);});
//# sourceMappingURL=Element.js.map

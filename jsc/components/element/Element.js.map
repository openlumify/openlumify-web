{"version":3,"sources":["../../../js/components/element/Element.jsx"],"names":["define","createReactClass","PropTypes","redux","F","dnd","elementSelectors","elementActions","ontologySelectors","selectionActions","vertexUrl","ClassName","ClassNameLoading","Vertex","props","vertex","rest","title","concept","url","i18n","borderBottomColor","color","Edge","edge","inVertex","outVertex","relationshipLabel","titleStr","outTitle","inTitle","label","displayName","Element","propTypes","element","shape","id","string","isRequired","properties","array","componentDidMount","_loadEdgeVertices","componentWillReceiveProps","nextProps","render","type","onMouseEnter","onMouseLeave","onDragStart","onClick","onDoubleClick","Error","event","onFocusElements","vertexIds","preventDefault","window","open","target","href","data","elements","setDataTransferWithElements","dataTransfer","outVertexId","inVertexId","_loadedEdgeVertexIds","filter","requested","length","onLoadElements","connect","state","vertices","getVertices","getRelationships","dispatch","setFocus","get"],"mappings":"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","file":"Element.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    'util/vertex/formatters',\n    'util/vertex/urlFormatters',\n    'util/dnd',\n    'data/web-worker/store/element/selectors',\n    'data/web-worker/store/element/actions',\n    'data/web-worker/store/ontology/selectors',\n    'data/web-worker/store/selection/actions'\n], function(\n    createReactClass,\n    PropTypes,\n    redux,\n    F,\n    {vertexUrl},\n    dnd,\n    elementSelectors,\n    elementActions,\n    ontologySelectors,\n    selectionActions) {\n\n    const ClassName = 'org-openlumify-element';\n    const ClassNameLoading = 'org-openlumify-element-loading';\n\n    const Vertex = function(props) {\n        const { vertex, ...rest } = props;\n\n        const title = F.vertex.title(vertex);\n        const concept = F.vertex.concept(vertex);\n        const url = vertexUrl.url([vertex]);\n\n        return (\n            <a href={url}\n                className={ClassName}\n                title={`${title} \\n${i18n('element.draghelp')}`}\n                style={{borderBottomColor: concept.color || '#000'}}\n                {...rest}\n                >{title}</a>\n        );\n    };\n\n    const Edge = function(props) {\n        const { edge, inVertex, outVertex, relationshipLabel, ...rest } = props;\n        let title = i18n('openlumify.loading');\n        let titleStr = title;\n\n        if (relationshipLabel && inVertex && outVertex) {\n            const outTitle = F.vertex.title(outVertex);\n            const inTitle = F.vertex.title(inVertex);\n            const label = relationshipLabel.displayName;\n            title = (\n                <span>\n                    {outTitle} <span className=\"rel-label\">{label}</span> {inTitle}\n                </span>\n            );\n            titleStr = `${outTitle} \\n${label} \\n${inTitle}`;\n        }\n\n        const url = vertexUrl.url([edge]);\n        return (\n            <a href={url}\n                className={ClassName}\n                title={`${titleStr} \\n${i18n('element.draghelp')}`}\n                {...rest}\n                >{title}</a>\n        );\n    };\n\n    const Element = createReactClass({\n        propTypes: {\n            element: PropTypes.shape({\n                id: PropTypes.string.isRequired,\n                properties: PropTypes.array.isRequired\n            })\n        },\n        componentDidMount() {\n            this._loadEdgeVertices(this.props);\n        },\n        componentWillReceiveProps(nextProps) {\n            this._loadEdgeVertices(nextProps);\n        },\n        render() {\n            const { element, relationshipLabel, inVertex, outVertex, ...rest } = this.props;\n\n            if (element) {\n                if (element.type === 'vertex') return (\n                    <Vertex vertex={element}\n                        onMouseEnter={this.onMouseEnter}\n                        onMouseLeave={this.onMouseLeave}\n                        onDragStart={this.onDragStart}\n                        onClick={this.onClick}\n                        onDoubleClick={this.onDoubleClick}\n                        draggable />\n                );\n                if (element.type === 'edge') return (\n                    <Edge edge={element}\n                        onMouseEnter={this.onMouseEnter}\n                        onMouseLeave={this.onMouseLeave}\n                        onDragStart={this.onDragStart}\n                        onClick={this.onClick}\n                        onDoubleClick={this.onDoubleClick}\n                        inVertex={inVertex}\n                        outVertex={outVertex}\n                        relationshipLabel={relationshipLabel}\n                        draggable />\n                );\n\n                throw new Error('Unknown element type: ' + element.type)\n            } else if (element === null) {\n                return (<span className={ClassNameLoading}>{i18n('element.not_found')}</span>)\n            }\n\n            return (<span className={ClassNameLoading}>Loadingâ€¦</span>)\n        },\n        onMouseEnter(event) {\n            const { element, onFocusElements } = this.props;\n            const { id } = element;\n            onFocusElements({ vertexIds: [id] });\n        },\n        onMouseLeave(event) {\n            this.props.onFocusElements({});\n        },\n        onClick(event) {\n            event.preventDefault();\n        },\n        onDoubleClick(event) {\n            event.preventDefault();\n            window.open(event.target.href);\n        },\n        onDragStart(event) {\n            const { element } = this.props;\n            if (element) {\n                const data = { elements: [element] }\n                dnd.setDataTransferWithElements(event.dataTransfer, data);\n            }\n        },\n        _loadEdgeVertices(props) {\n            const { element } = props;\n            if (!element || element.type !== 'edge') return;\n\n            const { outVertexId, inVertexId } = element;\n            if (!this._loadedEdgeVertexIds) this._loadedEdgeVertexIds = {};\n\n            const vertexIds = [inVertexId, outVertexId].filter(id => {\n                const requested = this._loadedEdgeVertexIds[id]\n                this._loadedEdgeVertexIds[id] = true;\n                return !requested;\n            });\n            if (vertexIds.length) {\n                this.props.onLoadElements({ vertexIds });\n            }\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            const { element } = props;\n            let inVertex, outVertex, relationshipLabel;\n            if (element && element.type === 'edge') {\n                const { outVertexId, inVertexId } = element;\n                const vertices = elementSelectors.getVertices(state);\n                inVertex = vertices[inVertexId];\n                outVertex = vertices[outVertexId];\n                relationshipLabel = ontologySelectors.getRelationships(state)[element.label];\n            }\n            return {\n                inVertex,\n                outVertex,\n                relationshipLabel,\n                ...props\n            };\n        },\n\n        (dispatch, props) => ({\n            onFocusElements(elements) {\n                dispatch(elementActions.setFocus(elements));\n            },\n            onLoadElements(elements) {\n                dispatch(elementActions.get(elements));\n            }\n        })\n    )(Element);\n});\n"]}
{"version":3,"sources":["../../../js/components/field/NumberRange.jsx"],"names":["define","createReactClass","PropTypes","classNames","NumberRange","propTypes","value","number","min","max","step","editable","bool","displayTooltip","labelRenderer","func","onChange","isRequired","getDefaultProps","render","props","percent","calculatePercent","hasValue","undefined","input","r","e","Number","parseFloat","left","marginLeft","transform","background","range","Math","abs","rangeValue"],"mappings":"AAAAA,OAAO,CACH,oBADG,CAEH,YAFG,CAGH,YAHG,CAAP,CAIG,SAASC,gBAAT,CAA2BC,SAA3B,CAAsCC,UAAtC,CAAkD,CACjD,aAEA,GAAMC,aAAcH,iBAAiB,2BACjCI,UAAW,CACPC,MAAOJ,UAAUK,MADV,CAEPC,IAAKN,UAAUK,MAFR,CAGPE,IAAKP,UAAUK,MAHR,CAIPG,KAAMR,UAAUK,MAJT,CAKPI,SAAUT,UAAUU,IALb,CAMPC,eAAgBX,UAAUU,IANnB,CAOPE,cAAeZ,UAAUa,IAPlB,CAQPC,SAAUd,UAAUa,IAAV,CAAeE,UARlB,CADsB,CAYjCC,eAZiC,2BAYf,CACd,MAAO,CACHV,IAAK,CADF,CAEHC,IAAK,CAFF,CAGHC,KAAM,GAHH,CAIHC,SAAU,IAJP,CAKHE,eAAgB,IALb,CAMHC,cAAe,oCAASR,MAAT,EANZ,CAAP,CAQH,CArBgC,CAuBjCa,MAvBiC,kBAuBxB,2BACgF,KAAKC,KADrF,CACGd,KADH,QACGA,KADH,CACUE,GADV,QACUA,GADV,CACeC,GADf,QACeA,GADf,CACoBC,IADpB,QACoBA,IADpB,CAC0BC,QAD1B,QAC0BA,QAD1B,CACoCE,cADpC,QACoCA,cADpC,CACoDC,aADpD,QACoDA,aADpD,CACmEE,SADnE,QACmEA,QADnE,CAEL,GAAMK,SAAUC,iBAAiBd,GAAjB,CAAsBC,GAAtB,CAA2BH,KAA3B,CAAhB,CACA,GAAMiB,UAAWjB,QAAUkB,SAAV,EAAuBlB,QAAU,IAAlD,CAEA,MACI,4BAAK,UAAWH,WAAW,sBAAX,CAAmC,CAAE,QAAS,CAACoB,QAAZ,CAAnC,CAAhB,EACI,6BACI,IAAK,eAAK,CAAE,MAAKE,KAAL,CAAaC,CAAb,CAAgB,CADhC,CAEI,UAAU,oBAFd,CAGI,KAAK,OAHT,CAII,SAAU,CAACf,QAJf,CAKI,IAAKH,GALT,CAMI,IAAKC,GANT,CAOI,KAAMC,IAPV,CAQI,aAAcJ,KARlB,CASI,SAAU,kBAACqB,CAAD,CAAO,CAAEX,UAASY,OAAOC,UAAP,CAAkB,MAAKJ,KAAL,CAAWnB,KAA7B,CAAT,EAAgD,CATvE,EADJ,CAYKO,eACG,2BAAK,UAAU,gBAAf,CAAgC,MAAO,CACnCiB,KAAMT,QAAU,GAAV,CAAgB,GADa,CAEnCU,WAAa,CAAC,EAAIV,OAAL,GAAiB,GAAK,CAAtB,EAA2B,EAA5B,CAAkC,IAFX,CAGnCW,UAAW,sBAHwB,CAAvC,EAKI,2BAAK,UAAU,eAAf,EALJ,CAMI,2BAAK,MAAO,CAAEC,WAAY,OAAd,CAAZ,CAAqC,UAAU,eAA/C,EACMV,SAAWT,cAAcR,KAAd,CAAX,CAAkC,IADxC,CANJ,CADH,CAWC,IAvBN,CADJ,CA2BH,CAvDgC,CAAjB,CAApB,CA2DA,QAASgB,iBAAT,CAA0Bd,GAA1B,CAA+BC,GAA/B,CAAoCH,KAApC,CAA2C,CACvC,GAAIA,QAAU,IAAV,EAAkBA,QAAUkB,SAAhC,CAA2C,CACvC,GAAMU,OAAQC,KAAKC,GAAL,CAAS3B,IAAMD,GAAf,CAAd,CACA,GAAM6B,YAAa5B,IAAMD,GAAN,CAAY2B,KAAKC,GAAL,CAAS9B,MAAQE,GAAjB,CAAZ,CAAoC2B,KAAKC,GAAL,CAAS5B,IAAMF,KAAf,CAAvD,CACA,MAAO+B,YAAaH,KAApB,CACH,CAJD,IAIO,CACH,MAAO,EAAP,CACH,CACJ,CAED,MAAO9B,YAAP,CACH,CA7ED","file":"NumberRange.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'classnames'\n], function(createReactClass, PropTypes, classNames) {\n    'use strict';\n\n    const NumberRange = createReactClass({\n        propTypes: {\n            value: PropTypes.number,\n            min: PropTypes.number,\n            max: PropTypes.number,\n            step: PropTypes.number,\n            editable: PropTypes.bool,\n            displayTooltip: PropTypes.bool,\n            labelRenderer: PropTypes.func,\n            onChange: PropTypes.func.isRequired,\n        },\n\n        getDefaultProps() {\n            return {\n                min: 0,\n                max: 1,\n                step: 0.1,\n                editable: true,\n                displayTooltip: true,\n                labelRenderer: value => value\n            };\n        },\n\n        render() {\n            const { value, min, max, step, editable, displayTooltip, labelRenderer, onChange } = this.props;\n            const percent = calculatePercent(min, max, value);\n            const hasValue = value !== undefined && value !== null;\n\n            return (\n                <div className={classNames('number-range-wrapper', { 'empty': !hasValue })}>\n                    <input\n                        ref={r => { this.input = r }}\n                        className=\"number-range-input\"\n                        type=\"range\"\n                        disabled={!editable}\n                        min={min}\n                        max={max}\n                        step={step}\n                        defaultValue={value}\n                        onChange={(e) => { onChange(Number.parseFloat(this.input.value)); }}\n                    />\n                    {displayTooltip ?\n                        <div className=\"tooltip bottom\" style={{\n                            left: percent * 100 + '%',\n                            marginLeft: ((1 - percent) * (25 * 2) - 25) + 'px',\n                            transform: 'translate(-50%, 0px)'\n                        }}>\n                            <div className=\"tooltip-arrow\"></div>\n                            <div style={{ background: 'black' }} className=\"tooltip-inner\">\n                                { hasValue ? labelRenderer(value) : null }\n                            </div>\n                        </div>\n                    : null}\n                </div>\n            );\n        }\n\n    });\n\n    function calculatePercent(min, max, value) {\n        if (value !== null && value !== undefined) {\n            const range = Math.abs(max - min);\n            const rangeValue = max > min ? Math.abs(value - min) : Math.abs(min - value);\n            return rangeValue / range;\n        } else {\n            return 1;\n        }\n    }\n\n    return NumberRange;\n});\n"]}
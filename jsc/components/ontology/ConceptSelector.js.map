{"version":3,"sources":["../../../js/components/ontology/ConceptSelector.jsx"],"names":["define","createReactClass","PropTypes","redux","BaseSelect","userSelectors","ontologySelectors","ontologyActions","ConceptsSelector","propTypes","filter","shape","conceptId","string","relatedToConceptId","showAncestors","bool","userVisible","searchable","conceptAncestors","object","isRequired","concepts","array","privileges","placeholder","value","getDefaultProps","creatable","i18n","render","props","conceptsToConcepts","rest","options","o","id","includes","undefined","Boolean","ONTOLOGY_ADD","connect","state","otherFilters","getVisibleConceptsList","depthKey","pathKey","showAdmin","getConceptsList","getConceptsByRelatedConcept","getPrivileges","getConceptAncestors","iriKeys","getConceptKeyIris","dispatch","onCreate","concept","addConcept"],"mappings":"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","file":"ConceptSelector.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    './BaseSelect',\n    'data/web-worker/store/user/selectors',\n    'data/web-worker/store/ontology/selectors',\n    'data/web-worker/store/ontology/actions'\n], function(\n    createReactClass,\n    PropTypes,\n    redux,\n    BaseSelect,\n    userSelectors,\n    ontologySelectors,\n    ontologyActions) {\n\n    const ConceptsSelector = createReactClass({\n        propTypes: {\n            filter: PropTypes.shape({\n                conceptId: PropTypes.string,\n                relatedToConceptId: PropTypes.string,\n                showAncestors: PropTypes.bool,\n                userVisible: PropTypes.bool,\n                searchable: PropTypes.bool\n            }),\n            conceptAncestors: PropTypes.object.isRequired,\n            concepts: PropTypes.array.isRequired,\n            privileges: PropTypes.object.isRequired,\n            placeholder: PropTypes.string,\n            value: PropTypes.string\n        },\n        getDefaultProps() {\n            return { creatable: true, placeholder: i18n('concept.field.placeholder') }\n        },\n        render() {\n            const {\n                conceptAncestors,\n                concepts,\n                conceptsToConcepts,\n                filter,\n                privileges,\n                creatable,\n                ...rest\n            } = this.props;\n\n            var options = concepts;\n            if (filter) {\n                options = concepts.filter(o => {\n                    return (\n                        filter.conceptId ?\n                            (o.id === filter.conceptId ||\n                            (!filter.showAncestors || conceptAncestors[filter.conceptId].includes(o.id))) : true\n                    ) && (\n                        filter.userVisible === undefined || filter.userVisible === true ?\n                            o.userVisible !== false : true\n                    ) && (\n                        filter.searchable === true ?\n                            o.searchable !== false : true\n                    ) && (\n                        filter.relatedToConceptId ?\n                            (\n                                conceptsToConcepts[filter.relatedToConceptId] &&\n                                conceptsToConcepts[filter.relatedToConceptId].includes(o.id)\n                            ) : true\n                    );\n                })\n            }\n            return (\n                <BaseSelect\n                    createForm={'components/ontology/ConceptForm'}\n                    options={options}\n                    creatable={creatable && Boolean(privileges.ONTOLOGY_ADD)}\n                    {...rest} />\n            );\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            var otherFilters = props.filter;\n            var concepts = ontologySelectors.getVisibleConceptsList(state);\n            var conceptsToConcepts;\n            var depthKey = 'depth';\n            var pathKey = 'path';\n\n            if (otherFilters) {\n                const { userVisible, ...rest } = otherFilters;\n                otherFilters = rest;\n                const showAdmin = userVisible === null;\n                if (showAdmin) {\n                    concepts = ontologySelectors.getConceptsList(state);\n                    depthKey = 'fullDepth';\n                    pathKey = 'fullPath';\n                }\n                if (otherFilters.relatedToConceptId) {\n                    conceptsToConcepts = ontologySelectors.getConceptsByRelatedConcept(state);\n                }\n            }\n            return {\n                privileges: userSelectors.getPrivileges(state),\n                concepts,\n                conceptAncestors: ontologySelectors.getConceptAncestors(state),\n                iriKeys: ontologySelectors.getConceptKeyIris(state),\n                filter: otherFilters,\n                conceptsToConcepts,\n                depthKey,\n                pathKey,\n                ...props\n            };\n        },\n\n        (dispatch, props) => ({\n            onCreate: (concept, options) => {\n                dispatch(ontologyActions.addConcept(concept, options));\n            }\n        })\n    )(ConceptsSelector);\n});\n"]}
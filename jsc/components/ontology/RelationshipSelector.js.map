{"version":3,"sources":["../../../js/components/ontology/RelationshipSelector.jsx"],"names":["define","createReactClass","PropTypes","redux","BaseSelect","userSelectors","ontologySelectors","ontologyActions","filterList","conceptDescendents","relationships","relationshipKeys","filter","domainRanges","_","flatten","map","r","k","any","iri","includes","RelationshipSelector","propTypes","object","isRequired","array","shape","sourceId","string","targetId","conceptId","relationshipId","placeholder","getDefaultProps","creatable","i18n","render","props","relationshipAncestors","privileges","rest","formProps","options","Error","o","title","Boolean","ONTOLOGY_ADD","connect","state","getPrivileges","getConceptDescendents","getRelationshipAncestors","getVisibleRelationships","iriKeys","getRelationshipKeyIris","dispatch","onCreate","relationship","addRelationship"],"mappings":"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","file":"RelationshipSelector.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    './BaseSelect',\n    'data/web-worker/store/user/selectors',\n    'data/web-worker/store/ontology/selectors',\n    'data/web-worker/store/ontology/actions'\n], function(\n    createReactClass,\n    PropTypes,\n    redux,\n    BaseSelect,\n    userSelectors,\n    ontologySelectors,\n    ontologyActions) {\n\n    const filterList = (conceptDescendents, relationships, relationshipKeys, filter) => relationships.filter(r => {\n        const domainRanges = _.flatten(relationshipKeys.map(k => r[k]));\n        return _.any(domainRanges, iri => {\n            return (\n                filter === iri ||\n                (conceptDescendents[iri] && conceptDescendents[iri].includes(filter))\n            );\n        });\n    });\n    const RelationshipSelector = createReactClass({\n        propTypes: {\n            conceptDescendents: PropTypes.object.isRequired,\n            relationships: PropTypes.array.isRequired,\n            filter: PropTypes.shape({\n                sourceId: PropTypes.string,\n                targetId: PropTypes.string,\n                conceptId: PropTypes.string,\n                relationshipId: PropTypes.string\n            }),\n            placeholder: PropTypes.string\n        },\n        getDefaultProps() {\n            return { creatable: true, placeholder: i18n('relationship.field.placeholder') }\n        },\n        render() {\n            const {\n                conceptDescendents,\n                relationshipAncestors,\n                privileges,\n                relationships,\n                filter,\n                creatable,\n                ...rest\n            } = this.props;\n            const formProps = { ...filter };\n\n            var options = relationships;\n\n            if (filter) {\n                const { conceptId, sourceId, targetId, relationshipId } = filter;\n                if (conceptId && (sourceId || targetId)) {\n                    throw new Error('only one of conceptId or source/target can be sent');\n                }\n                if (relationshipId) {\n                    options = options.filter(o => o.title === relationshipId || relationshipAncestors[relationshipId].includes(o.title));\n                }\n                if (conceptId) {\n                    options = filterList(conceptDescendents, options, ['domainConceptIris', 'rangeConceptIris'], conceptId);\n                } else {\n                    if (sourceId) {\n                        options = filterList(conceptDescendents, options, ['domainConceptIris'], sourceId);\n                    }\n                    if (targetId) {\n                        options = filterList(conceptDescendents, options, ['rangeConceptIris'], targetId);\n                    }\n                }\n            }\n\n            return (\n                <BaseSelect\n                    createForm={'components/ontology/RelationshipForm'}\n                    formProps={formProps}\n                    options={options}\n                    creatable={creatable && Boolean(privileges.ONTOLOGY_ADD)}\n                    {...rest} />\n            );\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            return {\n                privileges: userSelectors.getPrivileges(state),\n                conceptDescendents: ontologySelectors.getConceptDescendents(state),\n                relationshipAncestors: ontologySelectors.getRelationshipAncestors(state),\n                relationships: ontologySelectors.getVisibleRelationships(state),\n                iriKeys: ontologySelectors.getRelationshipKeyIris(state),\n                ...props\n            };\n        },\n\n        (dispatch, props) => ({\n            onCreate: (relationship, options) => {\n                dispatch(ontologyActions.addRelationship(relationship, options));\n            }\n        })\n    )(RelationshipSelector);\n});\n\n"]}
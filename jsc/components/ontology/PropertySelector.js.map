{"version":3,"sources":["../../../js/components/ontology/PropertySelector.jsx"],"names":["define","createReactClass","PropTypes","redux","BaseSelect","userSelectors","ontologySelectors","ontologyActions","FilterProps","FilterPropDefaults","userVisible","PropertySelector","propTypes","filter","shape","properties","Array","conceptId","oneOfType","string","array","relationshipId","hideCompound","bool","dataType","dataTypes","domainType","addable","searchable","deleteable","sortable","updateable","value","isRequired","propertiesByConcept","object","propertiesByRelationship","conceptProperties","relationshipProperties","privileges","placeholder","getDefaultProps","creatable","i18n","render","props","rest","formProps","dependentPropertyIris","filterByDomainType","options","p","i","list","header","test","title","_","isArray","length","includes","domainTypeProperties","startsWith","conceptIris","belongsToConcepts","some","conceptProps","concept","isString","domain","relationshipIris","belongsToRelationships","relationshipProps","relationship","rollupCompound","push","forEach","fp","undefined","uniqueIris","map","iri","o","removeEmptyHeaders","usesLegacyFilterProperties","console","warn","Boolean","ONTOLOGY_ADD","connect","state","otherFilters","showAdmin","getPropertiesWithHeaders","getVisiblePropertiesWithHeaders","getPrivileges","getPropertiesByConcept","getPropertiesByRelationship","getConceptProperties","getRelationshipProperties","iriKeys","getPropertyKeyIris","dispatch","onCreate","displayName","displayType","property","addProperty","removeHeaderIndices","lastHeaderIndex","reverse","splice"],"mappings":"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","file":"PropertySelector.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    './BaseSelect',\n    'data/web-worker/store/user/selectors',\n    'data/web-worker/store/ontology/selectors',\n    'data/web-worker/store/ontology/actions'\n], function(\n    createReactClass,\n    PropTypes,\n    redux,\n    BaseSelect,\n    userSelectors,\n    ontologySelectors,\n    ontologyActions) {\n\n    const FilterProps = ['dataType', 'deleteable', 'searchable', 'sortable', 'updateable', 'userVisible', 'addable'];\n    const FilterPropDefaults = {\n        userVisible: true\n    };\n\n    const PropertySelector = createReactClass({\n        propTypes: {\n            /**\n             * Property select list filters\n             *\n             * @typedef {object} module:components/PropertySelect#filters\n             *\n             * @property {Array.<object>} properties Override the array of properties to use, any other filters defined will still be applied to this array\n             * @property {string|Array.<string>} [conceptId] Filter to only properties attached to this concept, or any of the concepts if given an array\n             * @property {string|Array.<string>} [relationshipId] Filter to only properties attached to this relationship, or any of the relationships if given an array\n             * @property {boolean} [hideCompound] Exclude compound properties\n             * @property {string} [dataType] Include properties of only this data type\n             * @property {Array.<string>} [dataTypes] Include properties of only these data types\n             * @property {string} [domainType] `concept` or `relationship`, include properties that are attached to an element type\n             * @property {boolean} [addable] Include properties whose `addable` value matches the value provided, if `addable` is not defined on the property it will return true\n             * @property {boolean} [userVisible=true] Include properties whose `userVisible` value matches the value provided, if `userVisible` is not defined on the property it will return true\n             * @property {boolean} [searchable] Include properties whose `searchable` value matches the value provided, if `searchable` is not defined on the property it will return true\n             * @property {boolean} [deleteable] Include properties whose `deleteable` value matches the value provided, if `deleteable` is not defined on the property it will return true\n             * @property {boolean} [sortable] Include properties whose `sortable` value matches the value provided, if `sortable` is not defined on the property it will return true\n             * @property {boolean} [updateable] Include properties whose `updateable` value matches the value provided, if `updateable` is not defined on the property it will return true\n             *\n             */\n            filter: PropTypes.shape({\n                properties: PropTypes.Array,\n                conceptId: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n                relationshipId: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n                hideCompound: PropTypes.bool,\n                dataType: PropTypes.string,\n                dataTypes: PropTypes.array,\n                domainType: PropTypes.string,\n                addable: PropTypes.bool,\n                userVisible: PropTypes.bool,\n                searchable: PropTypes.bool,\n                deleteable: PropTypes.bool,\n                sortable: PropTypes.bool,\n                updateable: PropTypes.bool\n            }),\n            value: PropTypes.string,\n            properties: PropTypes.array.isRequired,\n            propertiesByConcept: PropTypes.object.isRequired,\n            propertiesByRelationship: PropTypes.object.isRequired,\n            conceptProperties: PropTypes.object.isRequired,\n            relationshipProperties: PropTypes.object.isRequired,\n            privileges: PropTypes.object.isRequired,\n            placeholder: PropTypes.string\n        },\n        getDefaultProps() {\n            return { creatable: true, placeholder: i18n('property.field.placeholder') }\n        },\n        render() {\n            const {\n                properties,\n                conceptProperties,\n                relationshipProperties,\n                propertiesByConcept,\n                propertiesByRelationship,\n                filter,\n                privileges, creatable, ...rest } = this.props;\n            const formProps = { ...(filter || {}) };\n            const dependentPropertyIris = [];\n            const filterByDomainType = filter.domainType && !filter.conceptId && !filter.relationshipId;\n            let options = properties.filter((p, i, list) => {\n                if (p.header) {\n                    return true;\n                }\n\n                let test = true;\n                if (filter && filter.properties) {\n                    test = test && p.title in filter.properties;\n                }\n\n                if (test && filter && _.isArray(filter.dataTypes) && filter.dataTypes.length) {\n                    test = test && filter.dataTypes.includes(p.dataType)\n                }\n\n                if (test && filter && filterByDomainType) {\n                    let domainTypeProperties;\n                    if (filterByDomainType) {\n                        if (filter.domainType === 'concept') {\n                            domainTypeProperties = conceptProperties;\n                        } else if (filter.domainType === 'relationship') {\n                            domainTypeProperties = relationshipProperties;\n                        }\n                    }\n                    test = test && ((!filterByDomainType || domainTypeProperties[p.title]) || p.title.startsWith('dataType:'));\n                }\n\n                if (test && filter && filter.conceptId) {\n                    const conceptIris = _.isArray(filter.conceptId) ? filter.conceptId : [ filter.conceptId ];\n                    const belongsToConcepts = conceptIris.some(concept => {\n                        const conceptProps = propertiesByConcept[concept];\n                        return conceptProps && conceptProps[p.title];\n                    });\n\n                    if (_.isString(filter.conceptId) || filter.conceptId.length === 1) {\n                        formProps.domain = _.isArray(filter.conceptId) ? filter.conceptId[0] : filter.conceptId;\n                    }\n\n                    test = test && (belongsToConcepts || p.title.startsWith('dataType:'));\n                }\n\n                if (test && filter && filter.relationshipId) {\n                    const relationshipIris = _.isArray(filter.relationshipId) ? filter.relationshipId : [ filter.relationshipId ];\n                    const belongsToRelationships = relationshipIris.some(relationship => {\n                        const relationshipProps = propertiesByRelationship[relationship];\n                        return relationshipProps && relationshipProps[p.title];\n                    });\n\n                    if (_.isString(filter.relationshipId) || filter.relationshipId.length === 1) {\n                        formProps.domain = _.isArray(filter.relationshipId) ? filter.relationshipId[0] : filter.relationshipId;\n                    }\n\n                    test = test && (belongsToRelationships || p.title.startsWith('dataType:'));\n\n                }\n\n                if (test && filter && filter.hideCompound) {\n                    test = test && !p.dependentPropertyIris;\n                }\n\n                if (test && filter && filter.rollupCompound && p.dependentPropertyIris) {\n                    dependentPropertyIris.push(...p.dependentPropertyIris);\n                }\n\n                if (test && !p.title.startsWith('dataType:')) {\n                    FilterProps.forEach(fp => {\n                        if (filter && fp in filter) {\n                            // otherwise any value is valid\n                            if (filter[fp] !== undefined && filter[fp] !== null) {\n                                test = test && p[fp] === filter[fp];\n                            }\n                        }\n                    })\n                }\n                return test;\n            });\n\n            if (filter && filter.rollupCompound) {\n                const uniqueIris = _.object(dependentPropertyIris.map(iri => [iri, true]))\n                options = options.filter(o => !uniqueIris[o.title]);\n            }\n\n            removeEmptyHeaders(options)\n\n            let usesLegacyFilterProperties = false;\n            if (creatable && filter && filter.properties) {\n                console.warn('Creating properties when using old filter syntax (passing properties) is not supported');\n                usesLegacyFilterProperties = true;\n            }\n\n            return (\n                <BaseSelect\n                    createForm={'components/ontology/PropertyForm'}\n                    formProps={formProps}\n                    options={options}\n                    creatable={creatable && !usesLegacyFilterProperties && Boolean(privileges.ONTOLOGY_ADD)}\n                    {...rest} />\n            );\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            let otherFilters = props.filter;\n            const showAdmin = otherFilters && otherFilters.userVisible === null;\n\n            let properties = props.properties || (showAdmin\n                ? ontologySelectors.getPropertiesWithHeaders(state)\n                : ontologySelectors.getVisiblePropertiesWithHeaders(state)\n            );\n\n            return {\n                privileges: userSelectors.getPrivileges(state),\n                propertiesByConcept: ontologySelectors.getPropertiesByConcept(state),\n                propertiesByRelationship: ontologySelectors.getPropertiesByRelationship(state),\n                conceptProperties: ontologySelectors.getConceptProperties(state),\n                relationshipProperties: ontologySelectors.getRelationshipProperties(state),\n                iriKeys: ontologySelectors.getPropertyKeyIris(state),\n                ...props,\n                properties\n            };\n        },\n\n        (dispatch, props) => ({\n            onCreate: ({ displayName, dataType, displayType, domain }, options) => {\n                let property = {\n                    displayName,\n                    dataType,\n                    displayType,\n                    ...domain,\n                };\n                if (!property.displayType) {\n                    delete property.displayType;\n                }\n                dispatch(ontologyActions.addProperty(property, options));\n            }\n        })\n    )(PropertySelector);\n\n    function removeEmptyHeaders(options) {\n        const removeHeaderIndices = [];\n        let lastHeaderIndex = -1;\n        options.forEach((o, i, list) => {\n            if (o.header) {\n                if (i > 0 && lastHeaderIndex === (i - 1)) {\n                    removeHeaderIndices.push(lastHeaderIndex)\n                }\n                if (i === (list.length - 1)) {\n                    removeHeaderIndices.push(i)\n                }\n                lastHeaderIndex = i;\n            }\n        })\n        removeHeaderIndices.reverse().forEach(i => {\n            options.splice(i, 1);\n        })\n    }\n});\n"]}
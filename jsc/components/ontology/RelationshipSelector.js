var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['create-react-class','prop-types','react-redux','./BaseSelect','data/web-worker/store/user/selectors','data/web-worker/store/ontology/selectors','data/web-worker/store/ontology/actions'],function(createReactClass,PropTypes,redux,BaseSelect,userSelectors,ontologySelectors,ontologyActions){var filterList=function filterList(conceptDescendents,relationships,relationshipKeys,filter){return relationships.filter(function(r){var domainRanges=_.flatten(relationshipKeys.map(function(k){return r[k];}));return _.any(domainRanges,function(iri){return filter===iri||conceptDescendents[iri]&&conceptDescendents[iri].includes(filter);});});};var RelationshipSelector=createReactClass({displayName:'RelationshipSelector',propTypes:{conceptDescendents:PropTypes.object.isRequired,relationships:PropTypes.array.isRequired,filter:PropTypes.shape({sourceId:PropTypes.string,targetId:PropTypes.string,conceptId:PropTypes.string,relationshipId:PropTypes.string}),placeholder:PropTypes.string},getDefaultProps:function getDefaultProps(){return{creatable:true,placeholder:i18n('relationship.field.placeholder')};},render:function render(){var _props=this.props,conceptDescendents=_props.conceptDescendents,relationshipAncestors=_props.relationshipAncestors,privileges=_props.privileges,relationships=_props.relationships,filter=_props.filter,creatable=_props.creatable,rest=_objectWithoutProperties(_props,['conceptDescendents','relationshipAncestors','privileges','relationships','filter','creatable']);var formProps=_extends({},filter);var options=relationships;if(filter){var conceptId=filter.conceptId,sourceId=filter.sourceId,targetId=filter.targetId,relationshipId=filter.relationshipId;if(conceptId&&(sourceId||targetId)){throw new Error('only one of conceptId or source/target can be sent');}if(relationshipId){options=options.filter(function(o){return o.title===relationshipId||relationshipAncestors[relationshipId].includes(o.title);});}if(conceptId){options=filterList(conceptDescendents,options,['domainConceptIris','rangeConceptIris'],conceptId);}else{if(sourceId){options=filterList(conceptDescendents,options,['domainConceptIris'],sourceId);}if(targetId){options=filterList(conceptDescendents,options,['rangeConceptIris'],targetId);}}}return React.createElement(BaseSelect,_extends({createForm:'components/ontology/RelationshipForm',formProps:formProps,options:options,creatable:creatable&&Boolean(privileges.ONTOLOGY_ADD)},rest));}});return redux.connect(function(state,props){return _extends({privileges:userSelectors.getPrivileges(state),conceptDescendents:ontologySelectors.getConceptDescendents(state),relationshipAncestors:ontologySelectors.getRelationshipAncestors(state),relationships:ontologySelectors.getVisibleRelationships(state),iriKeys:ontologySelectors.getRelationshipKeyIris(state)},props);},function(dispatch,props){return{onCreate:function onCreate(relationship,options){dispatch(ontologyActions.addRelationship(relationship,options));}};})(RelationshipSelector);});
//# sourceMappingURL=RelationshipSelector.js.map

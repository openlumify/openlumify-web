var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['create-react-class','prop-types','react-redux','./BaseSelect','data/web-worker/store/user/selectors','data/web-worker/store/ontology/selectors','data/web-worker/store/ontology/actions'],function(createReactClass,PropTypes,redux,BaseSelect,userSelectors,ontologySelectors,ontologyActions){var ConceptsSelector=createReactClass({displayName:'ConceptsSelector',propTypes:{filter:PropTypes.shape({conceptId:PropTypes.string,relatedToConceptId:PropTypes.string,showAncestors:PropTypes.bool,userVisible:PropTypes.bool,searchable:PropTypes.bool}),conceptAncestors:PropTypes.object.isRequired,concepts:PropTypes.array.isRequired,privileges:PropTypes.object.isRequired,placeholder:PropTypes.string,value:PropTypes.string},getDefaultProps:function getDefaultProps(){return{creatable:true,placeholder:i18n('concept.field.placeholder')};},render:function render(){var _props=this.props,conceptAncestors=_props.conceptAncestors,concepts=_props.concepts,conceptsToConcepts=_props.conceptsToConcepts,filter=_props.filter,privileges=_props.privileges,creatable=_props.creatable,rest=_objectWithoutProperties(_props,['conceptAncestors','concepts','conceptsToConcepts','filter','privileges','creatable']);var options=concepts;if(filter){options=concepts.filter(function(o){return(filter.conceptId?o.id===filter.conceptId||!filter.showAncestors||conceptAncestors[filter.conceptId].includes(o.id):true)&&(filter.userVisible===undefined||filter.userVisible===true?o.userVisible!==false:true)&&(filter.searchable===true?o.searchable!==false:true)&&(filter.relatedToConceptId?conceptsToConcepts[filter.relatedToConceptId]&&conceptsToConcepts[filter.relatedToConceptId].includes(o.id):true);});}return React.createElement(BaseSelect,_extends({createForm:'components/ontology/ConceptForm',options:options,creatable:creatable&&Boolean(privileges.ONTOLOGY_ADD)},rest));}});return redux.connect(function(state,props){var otherFilters=props.filter;var concepts=ontologySelectors.getVisibleConceptsList(state);var conceptsToConcepts;var depthKey='depth';var pathKey='path';if(otherFilters){var _otherFilters=otherFilters,userVisible=_otherFilters.userVisible,rest=_objectWithoutProperties(_otherFilters,['userVisible']);otherFilters=rest;var showAdmin=userVisible===null;if(showAdmin){concepts=ontologySelectors.getConceptsList(state);depthKey='fullDepth';pathKey='fullPath';}if(otherFilters.relatedToConceptId){conceptsToConcepts=ontologySelectors.getConceptsByRelatedConcept(state);}}return _extends({privileges:userSelectors.getPrivileges(state),concepts:concepts,conceptAncestors:ontologySelectors.getConceptAncestors(state),iriKeys:ontologySelectors.getConceptKeyIris(state),filter:otherFilters,conceptsToConcepts:conceptsToConcepts,depthKey:depthKey,pathKey:pathKey},props);},function(dispatch,props){return{onCreate:function onCreate(concept,options){dispatch(ontologyActions.addConcept(concept,options));}};})(ConceptsSelector);});
//# sourceMappingURL=ConceptSelector.js.map

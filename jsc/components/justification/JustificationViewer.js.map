{"version":3,"sources":["../../../js/components/justification/JustificationViewer.jsx"],"names":["define","createReactClass","PropTypes","redux","F","elementSelectors","elementActions","selectionActions","JustificationViewer","propTypes","value","shape","justificationText","string","sourceInfo","object","componentDidMount","_checkForTitle","props","componentWillReceiveProps","nextProps","render","renderJustificationText","renderSourceInfo","sourceInfoVertex","linkToSource","snippet","title","vertex","i18n","__html","onClick","event","preventDefault","stopPropagation","openSourceInfo","loadVertex","vertexId","_toRequest","connect","state","vertices","getVertices","dispatch","textPropertyKey","textPropertyName","offsets","startOffset","endOffset","set","options","focus","id","get","vertexIds"],"mappings":"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","file":"JustificationViewer.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    'util/vertex/formatters',\n    'data/web-worker/store/element/selectors',\n    'data/web-worker/store/element/actions',\n    'data/web-worker/store/selection/actions'\n], function(createReactClass, PropTypes, redux, F, elementSelectors, elementActions, selectionActions) {\n\n    const JustificationViewer = createReactClass({\n        propTypes: {\n            value: PropTypes.shape({\n                justificationText: PropTypes.string,\n                sourceInfo: PropTypes.object\n            })\n        },\n        componentDidMount() {\n            this._checkForTitle(this.props);\n        },\n        componentWillReceiveProps(nextProps) {\n            this._checkForTitle(nextProps);\n        },\n        render() {\n            const { value } = this.props;\n            const { justificationText, sourceInfo } = value;\n\n            if (justificationText) {\n                return this.renderJustificationText(justificationText);\n            }\n            if (sourceInfo) {\n                return this.renderSourceInfo(sourceInfo);\n            }\n\n            return null;\n        },\n        renderJustificationText(justificationText) {\n            return (\n                <div className=\"viewing\">\n                    <div className=\"text\"><div className=\"text-inner\">{justificationText}</div></div>\n                </div>\n            );\n        },\n        renderSourceInfo(sourceInfo) {\n            const { sourceInfoVertex, linkToSource } = this.props;\n            const { snippet } = sourceInfo;\n            const title = sourceInfoVertex ? F.vertex.title(sourceInfoVertex) : sourceInfoVertex === null ? i18n('element.entity.not_found') : i18n('openlumify.loading');\n\n            return (\n                <div className=\"viewing\">\n                    { snippet && (<div className=\"text\"><div className=\"text-inner\" dangerouslySetInnerHTML={{ __html: snippet }} /></div>) }\n                    <div className=\"source\" title={title}>\n                        <strong>{i18n('justification.field.reference.label')}: </strong>{\n                            linkToSource !== false ?\n                            (<button className=\"ref-title btn btn-link\" onClick={this.onClick}>{title}</button>) :\n                            (<span className=\"ref-title\">{title}</span>)\n                        }</div>\n                </div>\n            );\n        },\n        onClick(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            const { openSourceInfo, value } = this.props;\n            openSourceInfo(value.sourceInfo);\n        },\n        _checkForTitle(props) {\n            const { value, sourceInfoVertex, loadVertex } = props;\n            if (!value) return;\n\n            const { sourceInfo } = value;\n            if (!sourceInfo) return;\n            if (sourceInfoVertex) return;\n\n            const { vertexId } = sourceInfo;\n            if (!this._toRequest) this._toRequest = {};\n            if (vertexId in this._toRequest) return;\n\n            this._toRequest[vertexId] = true;\n            loadVertex(vertexId);\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            let sourceInfoVertex;\n            if (props.value) {\n                const { sourceInfo } = props.value;\n                if (sourceInfo) {\n                    const vertices = elementSelectors.getVertices(state);\n                    sourceInfoVertex = vertices[sourceInfo.vertexId];\n                }\n            }\n            return {\n                sourceInfoVertex,\n                ...props\n            };\n        },\n\n        (dispatch, props) => ({\n            openSourceInfo(sourceInfo) {\n                const vertexId = sourceInfo.vertexId;\n                const textPropertyKey = sourceInfo.textPropertyKey;\n                const textPropertyName = sourceInfo.textPropertyName;\n                const offsets = [sourceInfo.startOffset, sourceInfo.endOffset];\n                dispatch(selectionActions.set({\n                    vertices: [vertexId],\n                    options: {\n                        focus: {\n                            vertexId,\n                            textPropertyKey,\n                            textPropertyName,\n                            offsets\n                        }\n                    }\n                }));\n            },\n            loadVertex(id) {\n                dispatch(elementActions.get({ vertexIds: [id] }));\n            }\n        })\n    )(JustificationViewer);\n});\n"]}
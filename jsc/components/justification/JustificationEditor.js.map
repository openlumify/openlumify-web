{"version":3,"sources":["../../../js/components/justification/JustificationEditor.jsx"],"names":["define","createReactClass","PropTypes","redux","ReactTransitionGroup","Tooltip","F","elementSelectors","elementActions","Transition","TransitionGroup","getHeight","elem","offsetHeight","forceLayout","node","DEFAULT","justificationText","sourceInfo","JustificationEditor","propTypes","validation","string","isRequired","value","shape","object","onJustificationChanged","func","getInitialState","height","componentWillReceiveProps","nextProps","checkForPastedSourceInfo","props","componentDidMount","valid","checkValid","undefined","render","state","duration","showJustification","_","isEmpty","showSourceInfo","onEnter","onEntering","onEntered","onExit","onExiting","onExited","overflow","includes","position","transition","textRef","r","display","visibility","renderJustificationInput","sourceInfoRef","top","left","renderSourceInfo","style","_justificationHeight","_sourceInfoHeight","resetHeight","$","animatePop","_justificationTextInput","focus","onEndTransition","snippet","vertexId","vertices","vertex","title","i18n","__html","onRemoveSourceInfo","onChange","onPaste","event","target","defer","sourceInfoForText","setSourceInfo","setJustificationText","loadVertex","oldProps","newProps","oldValue","pastedValue","newValue","text","clipboard","openlumifyData","copiedDocumentText","normalizeWhiteSpace","str","replace","trim","length","connect","properties","configuration","validationOverride","getVertices","dispatch","id","get","vertexIds"],"mappings":"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","file":"JustificationEditor.js","sourcesContent":["define([\n    'create-react-class',\n    'prop-types',\n    'react-redux',\n    'react-transition-group',\n    '../Tooltip',\n    'util/vertex/formatters',\n    'data/web-worker/store/element/selectors',\n    'data/web-worker/store/element/actions'\n], function(\n    createReactClass,\n    PropTypes,\n    redux,\n    ReactTransitionGroup,\n    Tooltip,\n    F,\n    elementSelectors,\n    elementActions) {\n\n    const { Transition, TransitionGroup } = ReactTransitionGroup;\n    const getHeight = elem => elem.offsetHeight;\n    const forceLayout = node => {\n        node.offsetHeight; // eslint-disable-line no-unused-expressions\n    }\n    const DEFAULT = { justificationText: '', sourceInfo: null };\n    const JustificationEditor = createReactClass({\n        propTypes: {\n            validation: PropTypes.string.isRequired,\n            value: PropTypes.shape({\n                justificationText: PropTypes.string,\n                sourceInfo: PropTypes.object\n            }),\n            onJustificationChanged: PropTypes.func.isRequired\n        },\n        getInitialState() {\n            return { height: 'auto' };\n        },\n        componentWillReceiveProps(nextProps) {\n            this.checkForPastedSourceInfo(this.props, nextProps)\n        },\n        componentDidMount() {\n            const { value = DEFAULT } = this.props;\n            const valid = this.checkValid(value);\n            this.props.onJustificationChanged({ value, valid })\n            this.checkForPastedSourceInfo(undefined, this.props);\n        },\n        render() {\n            const { value = DEFAULT, validation } = this.props;\n            const { height } = this.state;\n            const { justificationText, sourceInfo } = value;\n\n            if (validation === 'NONE') {\n                return null;\n            }\n\n            const duration = 250;\n            const showJustification = _.isEmpty(value.sourceInfo);\n            const showSourceInfo = !showJustification\n\n            return (\n                <div className=\"justification\">\n                    <Transition in={showSourceInfo} timeout={duration}\n                        onEnter={this.onEnter}\n                        onEntering={this.onEntering}\n                        onEntered={this.onEntered}\n                        onExit={this.onExit}\n                        onExiting={this.onExiting}\n                        onExited={this.onExited}>\n                            {(state) => (\n                                <div className=\"animationwrap\" style={{\n                                    overflow: ['entering', 'exiting'].includes(state) ? 'hidden' : '',\n                                    position: 'relative',\n                                    transition: `height ${duration}ms ease-in-out`\n                                }}>\n                                    <div ref={r => {this.textRef = r;}} style={{\n                                        display: state === 'entered' ? 'none' : '',\n                                        visibility: state === 'entering' ? 'hidden' : ''}}>\n                                        {this.renderJustificationInput(justificationText)}\n                                    </div>\n                                    {sourceInfo ? (\n                                    <div ref={r => {this.sourceInfoRef = r;}} style={{\n                                        ...(state === 'entered' ? {} : { position: 'absolute', top: '0', left: '0' })\n                                    }}>{this.renderSourceInfo(sourceInfo)}</div>\n                                    ) : null }\n                                </div>\n                            )}\n                    </Transition>\n                </div>\n            )\n        },\n        onEnter(node) {\n            node.style.overflow = 'hidden';\n            this._justificationHeight = getHeight(node) + 'px';\n            this._sourceInfoHeight = getHeight(this.sourceInfoRef) + 'px';\n            node.style.overflow = null;\n            node.style.height = this._justificationHeight;\n            forceLayout(node);\n        },\n        onEntering(node) {\n            node.style.height = this._sourceInfoHeight;\n        },\n        onEntered(node) {\n            this.resetHeight(node);\n            $(node).animatePop();\n        },\n        resetHeight(node) {\n            node.style.height = null;\n        },\n        onExit(node) {\n            node.style.height = this._sourceInfoHeight;\n            forceLayout(node);\n        },\n        onExited(node) {\n            this.resetHeight(node);\n            this._justificationTextInput.focus()\n        },\n        onEndTransition(node) {\n            this._justificationTextInput.focus()\n        },\n        onExiting(node) {\n            node.style.height = this._justificationHeight;\n        },\n        renderSourceInfo(sourceInfo) {\n            const { snippet, vertexId } = sourceInfo;\n            const { vertices } = this.props;\n            const vertex = vertices && vertices[vertexId];\n            const title = vertex ? F.vertex.title(vertex) : vertex === null ?\n                i18n('element.entity.not_found') : i18n('openlumify.loading');\n\n            return (\n                <div className=\"viewing\">\n                    <div className=\"text\">\n                        <div className=\"text-inner\" dangerouslySetInnerHTML={{ __html: snippet }} />\n                    </div>\n                    <div className=\"source\">\n                        <strong>{i18n('justification.field.reference.label')}:</strong>\n                        <span title={title} className=\"ref-title\">{title}</span>\n                        <button className=\"remove\" onClick={this.onRemoveSourceInfo}>Remove</button>\n                    </div>\n                </div>\n            );\n        },\n        renderJustificationInput(justificationText) {\n            const { validation } = this.props;\n            return (\n                <React.Fragment>\n                    <input\n                        ref={r => { this._justificationTextInput = r; }}\n                        className=\"editing\"\n                        onChange={this.onChange}\n                        onPaste={this.onPaste}\n                        placeholder={validation === 'OPTIONAL' ?\n                            i18n('justification.field.placeholder.optional') :\n                            i18n('justification.field.placeholder.required')\n                        }\n                        type=\"text\"\n                        value={justificationText || ''} />\n\n                    <Tooltip\n                        placement=\"left\"\n                        offset=\"0,5\"\n                        allowOverflow={['left']}\n                        trigger=\"focus\"\n                        className=\"field-tooltip\"\n                        node={this._justificationTextInput}\n                        message={i18n('justification.field.tooltip.title')}\n                        subtitle={i18n('justification.field.tooltip.subtitle')} />\n\n                </React.Fragment>\n            )\n        },\n        onPaste(event) {\n            const target = event.target;\n            _.defer(() => {\n                const sourceInfo = this.sourceInfoForText(target.value);\n                if (sourceInfo) {\n                    this.setSourceInfo(sourceInfo);\n                } else {\n                    this.setJustificationText(target.value);\n                }\n            });\n        },\n        onChange(event) {\n            this.setJustificationText(event.target.value);\n        },\n        onRemoveSourceInfo() {\n            this.setSourceInfo(null);\n        },\n        setJustificationText(justificationText) {\n            const value = { justificationText }\n            const valid = this.checkValid(value);\n            this.props.onJustificationChanged({ value, valid })\n        },\n        setSourceInfo(sourceInfo) {\n            const value = { sourceInfo }\n            const valid = this.checkValid(value);\n            if (sourceInfo) {\n                this.props.loadVertex(sourceInfo.vertexId);\n            }\n            this.props.onJustificationChanged({ value, valid })\n        },\n        checkForPastedSourceInfo(oldProps = {}, newProps = {}) {\n            const { pastedValue:oldValue } = oldProps;\n            const { pastedValue:newValue } = newProps;\n\n            if (newValue && (!oldValue || newValue !== oldValue)) {\n                const sourceInfo = this.sourceInfoForText(newValue);\n                if (sourceInfo) {\n                    this.setSourceInfo(sourceInfo);\n                }\n            }\n        },\n        sourceInfoForText(text) {\n            var clipboard = openlumifyData.copiedDocumentText,\n                normalizeWhiteSpace = function(str) {\n                    return str.replace(/\\s+/g, ' ');\n                };\n\n            if (clipboard && normalizeWhiteSpace(clipboard.text) === normalizeWhiteSpace(text)) {\n                return clipboard;\n            }\n        },\n        checkValid(value) {\n            const { validation } = this.props;\n            if (validation === 'NONE' || validation === 'OPTIONAL') {\n                return true;\n            }\n            const { justificationText = '', sourceInfo } = value;\n\n            if (!_.isEmpty(sourceInfo)) {\n                return true;\n            }\n\n            if (justificationText.trim().length) {\n                return true;\n            }\n\n            return false;\n        }\n    });\n\n    return redux.connect(\n        (state, props) => {\n            const { properties } = state.configuration;\n            return {\n                validation: props.validationOverride || properties['field.justification.validation'],\n                vertices: elementSelectors.getVertices(state),\n                ...props\n            };\n        },\n\n        (dispatch, props) => ({\n            loadVertex(id) {\n                dispatch(elementActions.get({ vertexIds: [id] }));\n            }\n        })\n    )(JustificationEditor);\n});\n"]}
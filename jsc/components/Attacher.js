function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}define(['react','create-react-class','prop-types','util/component/attacher'],function(React,createReactClass,PropTypes,attacher){'use strict';var Attacher=createReactClass({displayName:'Attacher',propTypes:{componentPath:PropTypes.string,component:PropTypes.func,behavior:PropTypes.object,legacyMapping:PropTypes.object,nodeType:PropTypes.string,nodeStyle:PropTypes.object,nodeClassName:PropTypes.string},getDefaultProps:function getDefaultProps(){return{nodeType:'div',nodeStyle:{},nodeClassName:''};},getInitialState:function getInitialState(){return{element:null};},componentDidMount:function componentDidMount(){this.reattach(this.props);},componentWillReceiveProps:function componentWillReceiveProps(nextProps){if(nextProps!==this.props){this.reattach(nextProps);}},componentWillUnmount:function componentWillUnmount(){if(this.attacher){this.attacher.teardown();this.attacher=null;}},render:function render(){var _props=this.props,nodeType=_props.nodeType,nodeStyle=_props.nodeStyle,nodeClassName=_props.nodeClassName;var element=this.state.element;return element?element:React.createElement(nodeType,{ref:'node',style:nodeStyle,className:nodeClassName});},reattach:function reattach(props){var _this=this;var component=props.component,componentPath=props.componentPath,legacyMapping=props.legacyMapping,behavior=props.behavior,nodeType=props.nodeType,nodeStyle=props.nodeStyle,nodeClassName=props.nodeClassName,rest=_objectWithoutProperties(props,['component','componentPath','legacyMapping','behavior','nodeType','nodeStyle','nodeClassName']);if(!component&&!componentPath){throw new Error('Attacher requires either component or componentPath');}var inst=(this.attacher||(this.attacher=attacher({preferDirectReactChildren:true}))).path(componentPath).component(component).params(rest);if(this.refs.node){inst.node(this.refs.node);}if(behavior){inst.behavior(behavior);}if(legacyMapping){inst.legacyMapping(legacyMapping);}inst.attach({teardown:true,teardownOptions:{react:false},emptyFlight:true}).then(function(attach){if(_this.attacher){if(attach._reactElement){_this.setState({element:attach._reactElement});}_this.afterAttach();}});},afterAttach:function afterAttach(){var afterAttach=this.props.afterAttach;if(_.isFunction(afterAttach)){afterAttach(this.attacher);}}});return Attacher;});
//# sourceMappingURL=Attacher.js.map

function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}define(['flight/lib/component','configuration/plugins/registry','util/popovers/withPopover','util/component/attacher'],function(defineComponent,registry,withPopover,Attacher){'use strict';var reportConfigurationPath='dashboard/configs/report';var reportRenderers=registry.extensionsForPoint('org.openlumify.dashboard.reportrenderer'),extensions=registry.extensionsForPoint('org.openlumify.dashboard.item');return defineComponent(ConfigPopover,withPopover);function ConfigPopover(){this.before('teardown',function(){this.components.forEach(function(attacher){attacher.teardown();});this.$node.closest('.card-toolbar').removeClass('active');});this.before('initialize',function(node,config){config.template='/dashboard/configureTpl.hbs';var paths=config.configurationPaths||[],extension=_.findWhere(extensions,{identifier:config.item.extensionId}),report=config.item.configuration.report||extension.report,addDefaultConfiguration=!extension.options||extension.options.preventDefaultConfig!==true;this.extension=extension;this.components=[];if(extension.configurationPath){paths.push(extension.configurationPath);}if(report){paths.push(reportConfigurationPath);}if(addDefaultConfiguration){paths.splice(0,0,'dashboard/configs/default');}config.empty=paths.length===0;this.after('setupWithTemplate',function(){var self=this,item=this.attr.item;this.$node.closest('.card-toolbar').addClass('active');this.on(this.popover,'redirectEventToItem',function(event,data){this.$node.closest('.grid-stack-item').find('.item-content').trigger(data.name,data.data);});this.on(this.$node.closest('.grid-stack-item').find('.item-content'),'redirectEventToConfiguration',function(event,data){this.popover.find('.popover-content > div').trigger(data.name,data.data);});this.on(this.popover,'configurationChanged',this.onConfigurationChanged);this.renderConfigurations(paths);});});this.onConfigurationChanged=function(event,data){var _this=this;this.trigger('configurationChanged',data);if(data.options&&data.options.changed==='item.title')return;var extension=this.extension,reportAdded=data.item.configuration.report||extension.report,reportRemoved=!data.item.configuration.report&&!extension.report;this.attr.item=data.item;if(reportAdded){this.teardownConfigPath(reportConfigurationPath);this.renderConfigurations([reportConfigurationPath]).then(function(){return _this.updateComponents(data);});}else if(reportRemoved){this.teardownConfigPath(reportConfigurationPath);this.updateComponents(data);}else{this.updateComponents(data);}};this.updateComponents=function(data){this.components.forEach(function(attacher){attacher.params(data).attach({teardown:true,teardownOptions:{react:false}});});};this.teardownConfigPath=function(path){this.components=_.chain(this.components).map(function(attacher){if(attacher.path()===path){attacher.teardown();attacher.node().remove();return null;}else{return attacher;}}).compact().value();};this.renderConfigurations=function(paths){var _this2=this;var item=this.attr.item;var root=this.popover.find('.popover-content');return Promise.map(paths,function(path){var node=$('<div>').data('path',path).appendTo(root);return Attacher().node(node).path(path).params({extension:_this2.extension,report:item.configuration.report||_this2.extension.report,item:item}).behavior({configurationChanged:function configurationChanged(attacher,data){_this2.onConfigurationChanged(null,data);}}).attach();}).then(function(components){var _components;(_components=_this2.components).push.apply(_components,_toConsumableArray(components));_this2.positionDialog();});};}});
//# sourceMappingURL=configure.js.map

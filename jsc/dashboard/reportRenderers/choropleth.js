var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};define(['flight/lib/component','util/formatters','./withRenderer','./withMapTiles','d3'],function(defineComponent,F,withRenderer,withMapTiles,d3){'use strict';return defineComponent(Choropleth,withRenderer,withMapTiles);function Choropleth(){this.processData=function(data){var self=this,results=data.root[0].buckets,zipCodeBoundary=function zipCodeBoundary(params){return self.dataRequest('dashboard','requestData','/zip-code-boundary',params);};if(results&&results.length){var bucketsByName=_.indexBy(results,'name');var flipCoordinates=function flipCoordinates(c){return[c[1],c[0]];};return zipCodeBoundary({zipCode:_.pluck(results,'name')}).then(function(zipCodes){var min=Infinity,max=-Infinity,features=zipCodes.features.map(function(_ref){var rings=_ref.coordinates,zipCode=_ref.zipCode;var bucket=bucketsByName[zipCode];var amount=bucket?bucket.value.count:0;min=Math.min(min,amount);max=Math.max(max,amount);return{type:'Feature',geometry:{type:'Polygon',coordinates:rings.map(function(r){return r.map(flipCoordinates);})},properties:_extends({},bucket,{label:zipCode,amount:amount})};});return{geoJson:{type:'FeatureCollection',features:features},min:min,max:max,predicate:'equal',display:'normal'};});}return null;};}});
//# sourceMappingURL=choropleth.js.map

{"version":3,"sources":["../../../js/dashboard/reportRenderers/choropleth.js"],"names":["define","defineComponent","F","withRenderer","withMapTiles","d3","Choropleth","processData","data","self","results","root","buckets","zipCodeBoundary","params","dataRequest","length","bucketsByName","_","indexBy","flipCoordinates","c","zipCode","pluck","then","zipCodes","min","Infinity","max","features","map","rings","coordinates","bucket","amount","value","count","Math","type","geometry","r","properties","label","geoJson","predicate","display"],"mappings":"gOAAAA,OAAO,CACH,sBADG,CAEH,iBAFG,CAGH,gBAHG,CAIH,gBAJG,CAKH,IALG,CAAP,CAMG,SACCC,eADD,CAECC,CAFD,CAGCC,YAHD,CAICC,YAJD,CAKCC,EALD,CAKK,CACJ,aAEA,MAAOJ,iBAAgBK,UAAhB,CAA4BH,YAA5B,CAA0CC,YAA1C,CAAP,CAEA,QAASE,WAAT,EAAsB,CAElB,KAAKC,WAAL,CAAmB,SAASC,IAAT,CAAe,CAC9B,GAAIC,MAAO,IAAX,CACIC,QAAUF,KAAKG,IAAL,CAAU,CAAV,EAAaC,OAD3B,CAEIC,gBAAkB,QAAlBA,gBAAkB,CAASC,MAAT,CAAiB,CAC/B,MAAOL,MAAKM,WAAL,CAAiB,WAAjB,CAA8B,aAA9B,CAA6C,oBAA7C,CAAmED,MAAnE,CAAP,CACH,CAJL,CAMA,GAAIJ,SAAWA,QAAQM,MAAvB,CAA+B,CAC3B,GAAMC,eAAgBC,EAAEC,OAAF,CAAUT,OAAV,CAAmB,MAAnB,CAAtB,CACA,GAAMU,iBAAkB,QAAlBA,gBAAkB,UAAK,CAACC,EAAE,CAAF,CAAD,CAAOA,EAAE,CAAF,CAAP,CAAL,EAAxB,CACA,MAAOR,iBAAgB,CAAES,QAASJ,EAAEK,KAAF,CAAQb,OAAR,CAAiB,MAAjB,CAAX,CAAhB,EACKc,IADL,CACU,SAASC,QAAT,CAAmB,CACrB,GAAIC,KAAMC,QAAV,CACIC,IAAM,CAACD,QADX,CAEIE,SAAWJ,SAASI,QAAT,CAAkBC,GAAlB,CAAsB,cAA0C,IAAlBC,MAAkB,MAA/BC,WAA+B,CAAXV,OAAW,MAAXA,OAAW,CACvE,GAAMW,QAAShB,cAAcK,OAAd,CAAf,CACA,GAAMY,QAASD,OAASA,OAAOE,KAAP,CAAaC,KAAtB,CAA8B,CAA7C,CAEAV,IAAMW,KAAKX,GAAL,CAASA,GAAT,CAAcQ,MAAd,CAAN,CACAN,IAAMS,KAAKT,GAAL,CAASA,GAAT,CAAcM,MAAd,CAAN,CAEA,MAAO,CACHI,KAAM,SADH,CAEHC,SAAU,CACND,KAAM,SADA,CAENN,YAAaD,MAAMD,GAAN,CAAU,kBAAKU,GAAEV,GAAF,CAAMV,eAAN,CAAL,EAAV,CAFP,CAFP,CAMHqB,uBACOR,MADP,EAEIS,MAAOpB,OAFX,CAGIY,aAHJ,EANG,CAAP,CAYH,CAnBU,CAFf,CAuBA,MAAO,CACHS,QAAS,CACLL,KAAM,mBADD,CAELT,iBAFK,CADN,CAKHH,OALG,CAMHE,OANG,CAOHgB,UAAW,OAPR,CAQHC,QAAS,QARN,CAAP,CAUH,CAnCL,CAAP,CAoCH,CACD,MAAO,KAAP,CACH,CAhDD,CAiDH,CACJ,CApED","file":"choropleth.js","sourcesContent":["define([\n    'flight/lib/component',\n    'util/formatters',\n    './withRenderer',\n    './withMapTiles',\n    'd3'\n], function(\n    defineComponent,\n    F,\n    withRenderer,\n    withMapTiles,\n    d3) {\n    'use strict';\n\n    return defineComponent(Choropleth, withRenderer, withMapTiles);\n\n    function Choropleth() {\n\n        this.processData = function(data) {\n            var self = this,\n                results = data.root[0].buckets,\n                zipCodeBoundary = function(params) {\n                    return self.dataRequest('dashboard', 'requestData', '/zip-code-boundary', params);\n                };\n\n            if (results && results.length) {\n                const bucketsByName = _.indexBy(results, 'name');\n                const flipCoordinates = c => [c[1], c[0]];\n                return zipCodeBoundary({ zipCode: _.pluck(results, 'name') })\n                           .then(function(zipCodes) {\n                               var min = Infinity,\n                                   max = -Infinity,\n                                   features = zipCodes.features.map(function({ coordinates: rings, zipCode }) {\n                                       const bucket = bucketsByName[zipCode];\n                                       const amount = bucket ? bucket.value.count : 0;\n\n                                       min = Math.min(min, amount);\n                                       max = Math.max(max, amount);\n\n                                       return {\n                                           type: 'Feature',\n                                           geometry: {\n                                               type: 'Polygon',\n                                               coordinates: rings.map(r => r.map(flipCoordinates))\n                                           },\n                                           properties: {\n                                               ...bucket,\n                                               label: zipCode,\n                                               amount\n                                           }\n                                       }\n                                   });\n\n                               return {\n                                   geoJson: {\n                                       type: 'FeatureCollection',\n                                       features\n                                   },\n                                   min,\n                                   max,\n                                   predicate: 'equal',\n                                   display: 'normal'\n                               };\n                           });\n            }\n            return null;\n        };\n    }\n});\n"]}
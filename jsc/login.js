define(['flight/lib/component','loginTpl.hbs','configuration/plugins/registry','util/withDataRequest','tpl!util/alert','util/requirejs/promise!util/service/propertiesPromise'],function(defineComponent,template,registry,withDataRequest,alertTemplate,configProperties){'use strict';var LoginMessageKey='loginErrorMessage';var ExpireLoginErrorMessageMillis=60*1000;var LoginComponent=defineComponent(Login,withDataRequest);LoginComponent.setErrorMessage=function(errorMessage){try{if(errorMessage){sessionStorage.setItem(LoginMessageKey,JSON.stringify({errorMessage:errorMessage,date:Date.now()}));}else{sessionStorage.removeItem(LoginMessageKey);}}catch(e){console.warn('Unable to write to sessionStorage, can\'t set error message',e);}};return LoginComponent;function Login(){this.defaultAttrs({authenticationSelector:'.authentication'});this.before('teardown',function(){this.$node.remove();});this.after('initialize',function(){registry.documentExtensionPoint('org.openlumify.authentication','Provides interface for authentication',function(e){return _.isString(e.componentPath);},'http://docs.openlumify.org/extension-points/front-end/authentication');this.$node.html(template({showPoweredBy:configProperties['login.showPoweredBy']==='true'}));var self=this,authPlugins=registry.extensionsForPoint('org.openlumify.authentication'),authNode=this.select('authenticationSelector'),error='',componentPath='';this.on('showErrorMessage',function(event,data){authNode.html(alertTemplate({error:data.message}));});if(authPlugins.length===0){error='No authentication extension registered.';}else if(authPlugins.length>1){error='Multiple authentication extensions registered. (See console for more info)';console.error('Authentication plugins:',authPlugins);}else{componentPath=authPlugins[0].componentPath;}if(error){authNode.html(alertTemplate({error:error}));}else if(componentPath){require([componentPath],function(AuthenticationPlugin){var errorMessage=self.attr.errorMessage;var messageJson=sessionStorage.getItem(LoginMessageKey);if(!errorMessage){var message=messageJson&&JSON.parse(messageJson);if(message&&_.isString(message.errorMessage)&&_.isNumber(message.date)&&Date.now()-message.date<ExpireLoginErrorMessageMillis){errorMessage=message.errorMessage;}}if(messageJson){LoginComponent.setErrorMessage(null);}AuthenticationPlugin.attachTo(authNode,{errorMessage:errorMessage});});}});}});
//# sourceMappingURL=login.js.map
